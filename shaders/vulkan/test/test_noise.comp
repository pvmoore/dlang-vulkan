#version 430 core
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_AMD_shader_trinary_minmax : enable
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 8, local_size_y = 8) in;

// Descriptor set bindings
layout(set=0, binding=0, r32f) uniform readonly image2D imageIn;
layout(set=0, binding=1, rgba8) uniform writeonly image2D imageOut;
layout(set=0, binding=2) uniform sampler2D sampler0;

// Push constants (max 128 bytes)
//layout(std140, push_constant) uniform PC {
///*  0 */    float randomSeed;
///*  4 */    int octaves;
//} pc;

ivec2 SIZE     = imageSize(imageOut);
ivec2 imagePos = ivec2(gl_GlobalInvocationID.xy);

#include "noise.comp"

void main() {
    float n;

    // Directly from noise routine:
    //n = fbm(vec2(imagePos)/50, 5);

    // Texture lookup:
    n = imageLoad(imageIn, imagePos).r;

    // Equivalent if you are using a sampler:
    //n = texture(sampler0, vec2(imagePos)/SIZE).r;

    imageStore(imageOut, imagePos, vec4(n,n,n,1));
}