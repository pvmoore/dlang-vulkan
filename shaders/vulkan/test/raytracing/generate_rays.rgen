#version 460 core
/**
 *  https://github.com/KhronosGroup/GLSL/blob/master/extensions/ext/GLSL_EXT_ray_tracing.txt
 */
#extension GL_EXT_ray_tracing : require
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_debug_printf : enable


layout(set = 0, binding = 0) uniform accelerationStructureEXT Scene;
layout(set = 0, binding = 1, rgba8) uniform image2D ResultImage;
layout(set = 0, binding = 2) uniform readonly UBO
{
	mat4 viewInverse;
	mat4 projInverse;
} ubo;

layout(location = 0) rayPayloadEXT vec3 outColour;

/**
 * Ray flags:
 *  gl_RayFlagsNoneEXT
 *  gl_RayFlagsOpaqueEXT                    ->
 *  gl_RayFlagsNoOpaqueEXT                  ->
 *  gl_RayFlagsTerminateOnFirstHitEXT       ->
 *  gl_RayFlagsSkipClosestHitShaderEXT      ->
 *  gl_RayFlagsCullBackFacingTrianglesEXT   ->
 *  gl_RayFlagsCullFrontFacingTrianglesEXT  ->
 *  gl_RayFlagsCullOpaqueEXT                ->
 *  gl_RayFlagsCullNoOpaqueEXT              ->
 */
void main() {

    // Built-in variables
    uvec3 launchID = gl_LaunchIDEXT;
    uvec3 launchSize = gl_LaunchSizeEXT;

    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin    = ubo.viewInverse * vec4(0,0,0,1);
	vec4 target    = ubo.projInverse * vec4(d.x, d.y, 1, 1) ;
	vec4 direction = ubo.viewInverse * vec4(normalize(target.xyz), 0) ;

    uint rayFlags        = gl_RayFlagsOpaqueEXT;
    uint cullMask        = 0xff;
    uint sbtRecordOffset = 0;   // Typically ray type, e.g., primary (0) or occlusion (1)
    uint sbtRecordStride = 0;   // Typically the number of ray types - 1
    uint missIndex       = 0;

    float tmin = 0.001f;
    float tmax = 10000.0f;

    outColour = vec3(0.0);

    traceRayEXT(Scene,
                rayFlags,
                cullMask,
                sbtRecordOffset,
                sbtRecordStride,
                missIndex,
                origin.xyz,
                tmin,
                direction.xyz,
                tmax,
                0); // payload location

    imageStore(ResultImage, ivec2(gl_LaunchIDEXT.xy), vec4(outColour, 1.0f));
}
