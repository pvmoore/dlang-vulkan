module vulkan.api.vulkan_api;

private:

import core.sys.windows.windows;

public:

// Vulkan 1.4.309.0 Include files converted to D (This is a generated file)
// 
// Generated by CTools (https://github.com/pvmoore/dlang-CTools)
// 
// Usage:
//   ** Start program
//   VulkanLoader.load();
//   vkLoadGlobalCommandFunctions();
//   ** Create your VkInstance here
//   vkLoadInstanceFunctions(instance);
//   ** 
//   VulkanLoader.unload();
//   ** Exit program

// VulkanLoader
private struct _VulkanLoader {
	import core.sys.windows.windows;
	import common.utils : throwIf;
	HANDLE handle;
	void load() {
		this.handle = LoadLibraryA("vulkan-1.dll");
		if(!handle) throw new Exception("Unable to load 'vulkan-1.dll'");
		
		*(cast(void**)&vkGetInstanceProcAddr) = GetProcAddress(handle, "vkGetInstanceProcAddr"); throwIf(!vkGetInstanceProcAddr);
	}
	void unload() {
		if(handle) FreeLibrary(handle);
	}
}
__gshared _VulkanLoader VulkanLoader;
// End of VulkanLoader

// Load Global Command Functions
void vkLoadGlobalCommandFunctions() {
	import std.string : toStringz;
	import common.utils : throwIf;
	*(cast(void**)&vkCreateInstance) = vkGetInstanceProcAddr(null, toStringz("vkCreateInstance")); throwIf(!vkCreateInstance);
	*(cast(void**)&vkEnumerateInstanceExtensionProperties) = vkGetInstanceProcAddr(null, toStringz("vkEnumerateInstanceExtensionProperties")); throwIf(!vkEnumerateInstanceExtensionProperties);
	*(cast(void**)&vkEnumerateInstanceLayerProperties) = vkGetInstanceProcAddr(null, toStringz("vkEnumerateInstanceLayerProperties")); throwIf(!vkEnumerateInstanceLayerProperties);
	*(cast(void**)&vkEnumerateInstanceVersion) = vkGetInstanceProcAddr(null, toStringz("vkEnumerateInstanceVersion")); throwIf(!vkEnumerateInstanceVersion);
}
// Load Instance Functions
void vkLoadInstanceFunctions(VkInstance instance) {
	import std.string : toStringz;
	import common.utils : throwIf;
	*(cast(void**)&vkAcquireDrmDisplayEXT) = vkGetInstanceProcAddr(instance, toStringz("vkAcquireDrmDisplayEXT"));
	*(cast(void**)&vkAcquireFullScreenExclusiveModeEXT) = vkGetInstanceProcAddr(instance, toStringz("vkAcquireFullScreenExclusiveModeEXT"));
	*(cast(void**)&vkAcquireNextImage2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkAcquireNextImage2KHR"));
	*(cast(void**)&vkAcquireNextImageKHR) = vkGetInstanceProcAddr(instance, toStringz("vkAcquireNextImageKHR"));
	*(cast(void**)&vkAcquirePerformanceConfigurationINTEL) = vkGetInstanceProcAddr(instance, toStringz("vkAcquirePerformanceConfigurationINTEL"));
	*(cast(void**)&vkAcquireProfilingLockKHR) = vkGetInstanceProcAddr(instance, toStringz("vkAcquireProfilingLockKHR"));
	*(cast(void**)&vkAcquireWinrtDisplayNV) = vkGetInstanceProcAddr(instance, toStringz("vkAcquireWinrtDisplayNV"));
	*(cast(void**)&vkAllocateCommandBuffers) = vkGetInstanceProcAddr(instance, toStringz("vkAllocateCommandBuffers"));
	*(cast(void**)&vkAllocateDescriptorSets) = vkGetInstanceProcAddr(instance, toStringz("vkAllocateDescriptorSets"));
	*(cast(void**)&vkAllocateMemory) = vkGetInstanceProcAddr(instance, toStringz("vkAllocateMemory"));
	*(cast(void**)&vkAntiLagUpdateAMD) = vkGetInstanceProcAddr(instance, toStringz("vkAntiLagUpdateAMD"));
	*(cast(void**)&vkBeginCommandBuffer) = vkGetInstanceProcAddr(instance, toStringz("vkBeginCommandBuffer"));
	*(cast(void**)&vkBindAccelerationStructureMemoryNV) = vkGetInstanceProcAddr(instance, toStringz("vkBindAccelerationStructureMemoryNV"));
	*(cast(void**)&vkBindBufferMemory) = vkGetInstanceProcAddr(instance, toStringz("vkBindBufferMemory"));
	*(cast(void**)&vkBindBufferMemory2) = vkGetInstanceProcAddr(instance, toStringz("vkBindBufferMemory2"));
	*(cast(void**)&vkBindBufferMemory2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkBindBufferMemory2KHR"));
	*(cast(void**)&vkBindImageMemory) = vkGetInstanceProcAddr(instance, toStringz("vkBindImageMemory"));
	*(cast(void**)&vkBindImageMemory2) = vkGetInstanceProcAddr(instance, toStringz("vkBindImageMemory2"));
	*(cast(void**)&vkBindImageMemory2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkBindImageMemory2KHR"));
	*(cast(void**)&vkBindOpticalFlowSessionImageNV) = vkGetInstanceProcAddr(instance, toStringz("vkBindOpticalFlowSessionImageNV"));
	*(cast(void**)&vkBindVideoSessionMemoryKHR) = vkGetInstanceProcAddr(instance, toStringz("vkBindVideoSessionMemoryKHR"));
	*(cast(void**)&vkBuildAccelerationStructuresKHR) = vkGetInstanceProcAddr(instance, toStringz("vkBuildAccelerationStructuresKHR"));
	*(cast(void**)&vkBuildMicromapsEXT) = vkGetInstanceProcAddr(instance, toStringz("vkBuildMicromapsEXT"));
	*(cast(void**)&vkCmdBeginConditionalRenderingEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBeginConditionalRenderingEXT"));
	*(cast(void**)&vkCmdBeginDebugUtilsLabelEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBeginDebugUtilsLabelEXT"));
	*(cast(void**)&vkCmdBeginQuery) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBeginQuery"));
	*(cast(void**)&vkCmdBeginQueryIndexedEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBeginQueryIndexedEXT"));
	*(cast(void**)&vkCmdBeginRenderPass) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBeginRenderPass"));
	*(cast(void**)&vkCmdBeginRenderPass2) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBeginRenderPass2"));
	*(cast(void**)&vkCmdBeginRenderPass2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBeginRenderPass2KHR"));
	*(cast(void**)&vkCmdBeginRendering) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBeginRendering"));
	*(cast(void**)&vkCmdBeginRenderingKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBeginRenderingKHR"));
	*(cast(void**)&vkCmdBeginTransformFeedbackEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBeginTransformFeedbackEXT"));
	*(cast(void**)&vkCmdBeginVideoCodingKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBeginVideoCodingKHR"));
	*(cast(void**)&vkCmdBindDescriptorBufferEmbeddedSamplers2EXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBindDescriptorBufferEmbeddedSamplers2EXT"));
	*(cast(void**)&vkCmdBindDescriptorBufferEmbeddedSamplersEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBindDescriptorBufferEmbeddedSamplersEXT"));
	*(cast(void**)&vkCmdBindDescriptorBuffersEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBindDescriptorBuffersEXT"));
	*(cast(void**)&vkCmdBindDescriptorSets) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBindDescriptorSets"));
	*(cast(void**)&vkCmdBindDescriptorSets2) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBindDescriptorSets2"));
	*(cast(void**)&vkCmdBindDescriptorSets2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBindDescriptorSets2KHR"));
	*(cast(void**)&vkCmdBindIndexBuffer) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBindIndexBuffer"));
	*(cast(void**)&vkCmdBindIndexBuffer2) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBindIndexBuffer2"));
	*(cast(void**)&vkCmdBindIndexBuffer2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBindIndexBuffer2KHR"));
	*(cast(void**)&vkCmdBindInvocationMaskHUAWEI) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBindInvocationMaskHUAWEI"));
	*(cast(void**)&vkCmdBindPipeline) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBindPipeline"));
	*(cast(void**)&vkCmdBindPipelineShaderGroupNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBindPipelineShaderGroupNV"));
	*(cast(void**)&vkCmdBindShadersEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBindShadersEXT"));
	*(cast(void**)&vkCmdBindShadingRateImageNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBindShadingRateImageNV"));
	*(cast(void**)&vkCmdBindTransformFeedbackBuffersEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBindTransformFeedbackBuffersEXT"));
	*(cast(void**)&vkCmdBindVertexBuffers) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBindVertexBuffers"));
	*(cast(void**)&vkCmdBindVertexBuffers2) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBindVertexBuffers2"));
	*(cast(void**)&vkCmdBindVertexBuffers2EXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBindVertexBuffers2EXT"));
	*(cast(void**)&vkCmdBlitImage) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBlitImage"));
	*(cast(void**)&vkCmdBlitImage2) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBlitImage2"));
	*(cast(void**)&vkCmdBlitImage2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBlitImage2KHR"));
	*(cast(void**)&vkCmdBuildAccelerationStructureNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBuildAccelerationStructureNV"));
	*(cast(void**)&vkCmdBuildAccelerationStructuresIndirectKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBuildAccelerationStructuresIndirectKHR"));
	*(cast(void**)&vkCmdBuildAccelerationStructuresKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBuildAccelerationStructuresKHR"));
	*(cast(void**)&vkCmdBuildClusterAccelerationStructureIndirectNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBuildClusterAccelerationStructureIndirectNV"));
	*(cast(void**)&vkCmdBuildMicromapsEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBuildMicromapsEXT"));
	*(cast(void**)&vkCmdBuildPartitionedAccelerationStructuresNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdBuildPartitionedAccelerationStructuresNV"));
	*(cast(void**)&vkCmdClearAttachments) = vkGetInstanceProcAddr(instance, toStringz("vkCmdClearAttachments"));
	*(cast(void**)&vkCmdClearColorImage) = vkGetInstanceProcAddr(instance, toStringz("vkCmdClearColorImage"));
	*(cast(void**)&vkCmdClearDepthStencilImage) = vkGetInstanceProcAddr(instance, toStringz("vkCmdClearDepthStencilImage"));
	*(cast(void**)&vkCmdControlVideoCodingKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdControlVideoCodingKHR"));
	*(cast(void**)&vkCmdConvertCooperativeVectorMatrixNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdConvertCooperativeVectorMatrixNV"));
	*(cast(void**)&vkCmdCopyAccelerationStructureKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdCopyAccelerationStructureKHR"));
	*(cast(void**)&vkCmdCopyAccelerationStructureNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdCopyAccelerationStructureNV"));
	*(cast(void**)&vkCmdCopyAccelerationStructureToMemoryKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdCopyAccelerationStructureToMemoryKHR"));
	*(cast(void**)&vkCmdCopyBuffer) = vkGetInstanceProcAddr(instance, toStringz("vkCmdCopyBuffer"));
	*(cast(void**)&vkCmdCopyBuffer2) = vkGetInstanceProcAddr(instance, toStringz("vkCmdCopyBuffer2"));
	*(cast(void**)&vkCmdCopyBuffer2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdCopyBuffer2KHR"));
	*(cast(void**)&vkCmdCopyBufferToImage) = vkGetInstanceProcAddr(instance, toStringz("vkCmdCopyBufferToImage"));
	*(cast(void**)&vkCmdCopyBufferToImage2) = vkGetInstanceProcAddr(instance, toStringz("vkCmdCopyBufferToImage2"));
	*(cast(void**)&vkCmdCopyBufferToImage2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdCopyBufferToImage2KHR"));
	*(cast(void**)&vkCmdCopyImage) = vkGetInstanceProcAddr(instance, toStringz("vkCmdCopyImage"));
	*(cast(void**)&vkCmdCopyImage2) = vkGetInstanceProcAddr(instance, toStringz("vkCmdCopyImage2"));
	*(cast(void**)&vkCmdCopyImage2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdCopyImage2KHR"));
	*(cast(void**)&vkCmdCopyImageToBuffer) = vkGetInstanceProcAddr(instance, toStringz("vkCmdCopyImageToBuffer"));
	*(cast(void**)&vkCmdCopyImageToBuffer2) = vkGetInstanceProcAddr(instance, toStringz("vkCmdCopyImageToBuffer2"));
	*(cast(void**)&vkCmdCopyImageToBuffer2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdCopyImageToBuffer2KHR"));
	*(cast(void**)&vkCmdCopyMemoryIndirectNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdCopyMemoryIndirectNV"));
	*(cast(void**)&vkCmdCopyMemoryToAccelerationStructureKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdCopyMemoryToAccelerationStructureKHR"));
	*(cast(void**)&vkCmdCopyMemoryToImageIndirectNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdCopyMemoryToImageIndirectNV"));
	*(cast(void**)&vkCmdCopyMemoryToMicromapEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdCopyMemoryToMicromapEXT"));
	*(cast(void**)&vkCmdCopyMicromapEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdCopyMicromapEXT"));
	*(cast(void**)&vkCmdCopyMicromapToMemoryEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdCopyMicromapToMemoryEXT"));
	*(cast(void**)&vkCmdCopyQueryPoolResults) = vkGetInstanceProcAddr(instance, toStringz("vkCmdCopyQueryPoolResults"));
	*(cast(void**)&vkCmdCuLaunchKernelNVX) = vkGetInstanceProcAddr(instance, toStringz("vkCmdCuLaunchKernelNVX"));
	*(cast(void**)&vkCmdCudaLaunchKernelNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdCudaLaunchKernelNV"));
	*(cast(void**)&vkCmdDebugMarkerBeginEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDebugMarkerBeginEXT"));
	*(cast(void**)&vkCmdDebugMarkerEndEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDebugMarkerEndEXT"));
	*(cast(void**)&vkCmdDebugMarkerInsertEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDebugMarkerInsertEXT"));
	*(cast(void**)&vkCmdDecodeVideoKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDecodeVideoKHR"));
	*(cast(void**)&vkCmdDecompressMemoryIndirectCountNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDecompressMemoryIndirectCountNV"));
	*(cast(void**)&vkCmdDecompressMemoryNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDecompressMemoryNV"));
	*(cast(void**)&vkCmdDispatch) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDispatch"));
	*(cast(void**)&vkCmdDispatchBase) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDispatchBase"));
	*(cast(void**)&vkCmdDispatchBaseKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDispatchBaseKHR"));
	*(cast(void**)&vkCmdDispatchIndirect) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDispatchIndirect"));
	*(cast(void**)&vkCmdDraw) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDraw"));
	*(cast(void**)&vkCmdDrawClusterHUAWEI) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDrawClusterHUAWEI"));
	*(cast(void**)&vkCmdDrawClusterIndirectHUAWEI) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDrawClusterIndirectHUAWEI"));
	*(cast(void**)&vkCmdDrawIndexed) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDrawIndexed"));
	*(cast(void**)&vkCmdDrawIndexedIndirect) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDrawIndexedIndirect"));
	*(cast(void**)&vkCmdDrawIndexedIndirectCount) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDrawIndexedIndirectCount"));
	*(cast(void**)&vkCmdDrawIndexedIndirectCountAMD) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDrawIndexedIndirectCountAMD"));
	*(cast(void**)&vkCmdDrawIndexedIndirectCountKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDrawIndexedIndirectCountKHR"));
	*(cast(void**)&vkCmdDrawIndirect) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDrawIndirect"));
	*(cast(void**)&vkCmdDrawIndirectByteCountEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDrawIndirectByteCountEXT"));
	*(cast(void**)&vkCmdDrawIndirectCount) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDrawIndirectCount"));
	*(cast(void**)&vkCmdDrawIndirectCountAMD) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDrawIndirectCountAMD"));
	*(cast(void**)&vkCmdDrawIndirectCountKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDrawIndirectCountKHR"));
	*(cast(void**)&vkCmdDrawMeshTasksEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDrawMeshTasksEXT"));
	*(cast(void**)&vkCmdDrawMeshTasksIndirectCountEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDrawMeshTasksIndirectCountEXT"));
	*(cast(void**)&vkCmdDrawMeshTasksIndirectCountNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDrawMeshTasksIndirectCountNV"));
	*(cast(void**)&vkCmdDrawMeshTasksIndirectEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDrawMeshTasksIndirectEXT"));
	*(cast(void**)&vkCmdDrawMeshTasksIndirectNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDrawMeshTasksIndirectNV"));
	*(cast(void**)&vkCmdDrawMeshTasksNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDrawMeshTasksNV"));
	*(cast(void**)&vkCmdDrawMultiEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDrawMultiEXT"));
	*(cast(void**)&vkCmdDrawMultiIndexedEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdDrawMultiIndexedEXT"));
	*(cast(void**)&vkCmdEncodeVideoKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdEncodeVideoKHR"));
	*(cast(void**)&vkCmdEndConditionalRenderingEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdEndConditionalRenderingEXT"));
	*(cast(void**)&vkCmdEndDebugUtilsLabelEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdEndDebugUtilsLabelEXT"));
	*(cast(void**)&vkCmdEndQuery) = vkGetInstanceProcAddr(instance, toStringz("vkCmdEndQuery"));
	*(cast(void**)&vkCmdEndQueryIndexedEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdEndQueryIndexedEXT"));
	*(cast(void**)&vkCmdEndRenderPass) = vkGetInstanceProcAddr(instance, toStringz("vkCmdEndRenderPass"));
	*(cast(void**)&vkCmdEndRenderPass2) = vkGetInstanceProcAddr(instance, toStringz("vkCmdEndRenderPass2"));
	*(cast(void**)&vkCmdEndRenderPass2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdEndRenderPass2KHR"));
	*(cast(void**)&vkCmdEndRendering) = vkGetInstanceProcAddr(instance, toStringz("vkCmdEndRendering"));
	*(cast(void**)&vkCmdEndRenderingKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdEndRenderingKHR"));
	*(cast(void**)&vkCmdEndTransformFeedbackEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdEndTransformFeedbackEXT"));
	*(cast(void**)&vkCmdEndVideoCodingKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdEndVideoCodingKHR"));
	*(cast(void**)&vkCmdExecuteCommands) = vkGetInstanceProcAddr(instance, toStringz("vkCmdExecuteCommands"));
	*(cast(void**)&vkCmdExecuteGeneratedCommandsEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdExecuteGeneratedCommandsEXT"));
	*(cast(void**)&vkCmdExecuteGeneratedCommandsNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdExecuteGeneratedCommandsNV"));
	*(cast(void**)&vkCmdFillBuffer) = vkGetInstanceProcAddr(instance, toStringz("vkCmdFillBuffer"));
	*(cast(void**)&vkCmdInsertDebugUtilsLabelEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdInsertDebugUtilsLabelEXT"));
	*(cast(void**)&vkCmdNextSubpass) = vkGetInstanceProcAddr(instance, toStringz("vkCmdNextSubpass"));
	*(cast(void**)&vkCmdNextSubpass2) = vkGetInstanceProcAddr(instance, toStringz("vkCmdNextSubpass2"));
	*(cast(void**)&vkCmdNextSubpass2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdNextSubpass2KHR"));
	*(cast(void**)&vkCmdOpticalFlowExecuteNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdOpticalFlowExecuteNV"));
	*(cast(void**)&vkCmdPipelineBarrier) = vkGetInstanceProcAddr(instance, toStringz("vkCmdPipelineBarrier"));
	*(cast(void**)&vkCmdPipelineBarrier2) = vkGetInstanceProcAddr(instance, toStringz("vkCmdPipelineBarrier2"));
	*(cast(void**)&vkCmdPipelineBarrier2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdPipelineBarrier2KHR"));
	*(cast(void**)&vkCmdPreprocessGeneratedCommandsEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdPreprocessGeneratedCommandsEXT"));
	*(cast(void**)&vkCmdPreprocessGeneratedCommandsNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdPreprocessGeneratedCommandsNV"));
	*(cast(void**)&vkCmdPushConstants) = vkGetInstanceProcAddr(instance, toStringz("vkCmdPushConstants"));
	*(cast(void**)&vkCmdPushConstants2) = vkGetInstanceProcAddr(instance, toStringz("vkCmdPushConstants2"));
	*(cast(void**)&vkCmdPushConstants2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdPushConstants2KHR"));
	*(cast(void**)&vkCmdPushDescriptorSet) = vkGetInstanceProcAddr(instance, toStringz("vkCmdPushDescriptorSet"));
	*(cast(void**)&vkCmdPushDescriptorSet2) = vkGetInstanceProcAddr(instance, toStringz("vkCmdPushDescriptorSet2"));
	*(cast(void**)&vkCmdPushDescriptorSet2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdPushDescriptorSet2KHR"));
	*(cast(void**)&vkCmdPushDescriptorSetKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdPushDescriptorSetKHR"));
	*(cast(void**)&vkCmdPushDescriptorSetWithTemplate) = vkGetInstanceProcAddr(instance, toStringz("vkCmdPushDescriptorSetWithTemplate"));
	*(cast(void**)&vkCmdPushDescriptorSetWithTemplate2) = vkGetInstanceProcAddr(instance, toStringz("vkCmdPushDescriptorSetWithTemplate2"));
	*(cast(void**)&vkCmdPushDescriptorSetWithTemplate2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdPushDescriptorSetWithTemplate2KHR"));
	*(cast(void**)&vkCmdPushDescriptorSetWithTemplateKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdPushDescriptorSetWithTemplateKHR"));
	*(cast(void**)&vkCmdResetEvent) = vkGetInstanceProcAddr(instance, toStringz("vkCmdResetEvent"));
	*(cast(void**)&vkCmdResetEvent2) = vkGetInstanceProcAddr(instance, toStringz("vkCmdResetEvent2"));
	*(cast(void**)&vkCmdResetEvent2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdResetEvent2KHR"));
	*(cast(void**)&vkCmdResetQueryPool) = vkGetInstanceProcAddr(instance, toStringz("vkCmdResetQueryPool"));
	*(cast(void**)&vkCmdResolveImage) = vkGetInstanceProcAddr(instance, toStringz("vkCmdResolveImage"));
	*(cast(void**)&vkCmdResolveImage2) = vkGetInstanceProcAddr(instance, toStringz("vkCmdResolveImage2"));
	*(cast(void**)&vkCmdResolveImage2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdResolveImage2KHR"));
	*(cast(void**)&vkCmdSetAlphaToCoverageEnableEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetAlphaToCoverageEnableEXT"));
	*(cast(void**)&vkCmdSetAlphaToOneEnableEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetAlphaToOneEnableEXT"));
	*(cast(void**)&vkCmdSetAttachmentFeedbackLoopEnableEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetAttachmentFeedbackLoopEnableEXT"));
	*(cast(void**)&vkCmdSetBlendConstants) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetBlendConstants"));
	*(cast(void**)&vkCmdSetCheckpointNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetCheckpointNV"));
	*(cast(void**)&vkCmdSetCoarseSampleOrderNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetCoarseSampleOrderNV"));
	*(cast(void**)&vkCmdSetColorBlendAdvancedEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetColorBlendAdvancedEXT"));
	*(cast(void**)&vkCmdSetColorBlendEnableEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetColorBlendEnableEXT"));
	*(cast(void**)&vkCmdSetColorBlendEquationEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetColorBlendEquationEXT"));
	*(cast(void**)&vkCmdSetColorWriteEnableEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetColorWriteEnableEXT"));
	*(cast(void**)&vkCmdSetColorWriteMaskEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetColorWriteMaskEXT"));
	*(cast(void**)&vkCmdSetConservativeRasterizationModeEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetConservativeRasterizationModeEXT"));
	*(cast(void**)&vkCmdSetCoverageModulationModeNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetCoverageModulationModeNV"));
	*(cast(void**)&vkCmdSetCoverageModulationTableEnableNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetCoverageModulationTableEnableNV"));
	*(cast(void**)&vkCmdSetCoverageModulationTableNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetCoverageModulationTableNV"));
	*(cast(void**)&vkCmdSetCoverageReductionModeNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetCoverageReductionModeNV"));
	*(cast(void**)&vkCmdSetCoverageToColorEnableNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetCoverageToColorEnableNV"));
	*(cast(void**)&vkCmdSetCoverageToColorLocationNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetCoverageToColorLocationNV"));
	*(cast(void**)&vkCmdSetCullMode) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetCullMode"));
	*(cast(void**)&vkCmdSetCullModeEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetCullModeEXT"));
	*(cast(void**)&vkCmdSetDepthBias) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetDepthBias"));
	*(cast(void**)&vkCmdSetDepthBias2EXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetDepthBias2EXT"));
	*(cast(void**)&vkCmdSetDepthBiasEnable) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetDepthBiasEnable"));
	*(cast(void**)&vkCmdSetDepthBiasEnableEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetDepthBiasEnableEXT"));
	*(cast(void**)&vkCmdSetDepthBounds) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetDepthBounds"));
	*(cast(void**)&vkCmdSetDepthBoundsTestEnable) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetDepthBoundsTestEnable"));
	*(cast(void**)&vkCmdSetDepthBoundsTestEnableEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetDepthBoundsTestEnableEXT"));
	*(cast(void**)&vkCmdSetDepthClampEnableEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetDepthClampEnableEXT"));
	*(cast(void**)&vkCmdSetDepthClampRangeEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetDepthClampRangeEXT"));
	*(cast(void**)&vkCmdSetDepthClipEnableEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetDepthClipEnableEXT"));
	*(cast(void**)&vkCmdSetDepthClipNegativeOneToOneEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetDepthClipNegativeOneToOneEXT"));
	*(cast(void**)&vkCmdSetDepthCompareOp) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetDepthCompareOp"));
	*(cast(void**)&vkCmdSetDepthCompareOpEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetDepthCompareOpEXT"));
	*(cast(void**)&vkCmdSetDepthTestEnable) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetDepthTestEnable"));
	*(cast(void**)&vkCmdSetDepthTestEnableEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetDepthTestEnableEXT"));
	*(cast(void**)&vkCmdSetDepthWriteEnable) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetDepthWriteEnable"));
	*(cast(void**)&vkCmdSetDepthWriteEnableEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetDepthWriteEnableEXT"));
	*(cast(void**)&vkCmdSetDescriptorBufferOffsets2EXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetDescriptorBufferOffsets2EXT"));
	*(cast(void**)&vkCmdSetDescriptorBufferOffsetsEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetDescriptorBufferOffsetsEXT"));
	*(cast(void**)&vkCmdSetDeviceMask) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetDeviceMask"));
	*(cast(void**)&vkCmdSetDeviceMaskKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetDeviceMaskKHR"));
	*(cast(void**)&vkCmdSetDiscardRectangleEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetDiscardRectangleEXT"));
	*(cast(void**)&vkCmdSetDiscardRectangleEnableEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetDiscardRectangleEnableEXT"));
	*(cast(void**)&vkCmdSetDiscardRectangleModeEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetDiscardRectangleModeEXT"));
	*(cast(void**)&vkCmdSetEvent) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetEvent"));
	*(cast(void**)&vkCmdSetEvent2) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetEvent2"));
	*(cast(void**)&vkCmdSetEvent2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetEvent2KHR"));
	*(cast(void**)&vkCmdSetExclusiveScissorEnableNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetExclusiveScissorEnableNV"));
	*(cast(void**)&vkCmdSetExclusiveScissorNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetExclusiveScissorNV"));
	*(cast(void**)&vkCmdSetExtraPrimitiveOverestimationSizeEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetExtraPrimitiveOverestimationSizeEXT"));
	*(cast(void**)&vkCmdSetFragmentShadingRateEnumNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetFragmentShadingRateEnumNV"));
	*(cast(void**)&vkCmdSetFragmentShadingRateKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetFragmentShadingRateKHR"));
	*(cast(void**)&vkCmdSetFrontFace) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetFrontFace"));
	*(cast(void**)&vkCmdSetFrontFaceEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetFrontFaceEXT"));
	*(cast(void**)&vkCmdSetLineRasterizationModeEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetLineRasterizationModeEXT"));
	*(cast(void**)&vkCmdSetLineStipple) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetLineStipple"));
	*(cast(void**)&vkCmdSetLineStippleEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetLineStippleEXT"));
	*(cast(void**)&vkCmdSetLineStippleEnableEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetLineStippleEnableEXT"));
	*(cast(void**)&vkCmdSetLineStippleKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetLineStippleKHR"));
	*(cast(void**)&vkCmdSetLineWidth) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetLineWidth"));
	*(cast(void**)&vkCmdSetLogicOpEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetLogicOpEXT"));
	*(cast(void**)&vkCmdSetLogicOpEnableEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetLogicOpEnableEXT"));
	*(cast(void**)&vkCmdSetPatchControlPointsEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetPatchControlPointsEXT"));
	*(cast(void**)&vkCmdSetPerformanceMarkerINTEL) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetPerformanceMarkerINTEL"));
	*(cast(void**)&vkCmdSetPerformanceOverrideINTEL) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetPerformanceOverrideINTEL"));
	*(cast(void**)&vkCmdSetPerformanceStreamMarkerINTEL) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetPerformanceStreamMarkerINTEL"));
	*(cast(void**)&vkCmdSetPolygonModeEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetPolygonModeEXT"));
	*(cast(void**)&vkCmdSetPrimitiveRestartEnable) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetPrimitiveRestartEnable"));
	*(cast(void**)&vkCmdSetPrimitiveRestartEnableEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetPrimitiveRestartEnableEXT"));
	*(cast(void**)&vkCmdSetPrimitiveTopology) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetPrimitiveTopology"));
	*(cast(void**)&vkCmdSetPrimitiveTopologyEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetPrimitiveTopologyEXT"));
	*(cast(void**)&vkCmdSetProvokingVertexModeEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetProvokingVertexModeEXT"));
	*(cast(void**)&vkCmdSetRasterizationSamplesEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetRasterizationSamplesEXT"));
	*(cast(void**)&vkCmdSetRasterizationStreamEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetRasterizationStreamEXT"));
	*(cast(void**)&vkCmdSetRasterizerDiscardEnable) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetRasterizerDiscardEnable"));
	*(cast(void**)&vkCmdSetRasterizerDiscardEnableEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetRasterizerDiscardEnableEXT"));
	*(cast(void**)&vkCmdSetRayTracingPipelineStackSizeKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetRayTracingPipelineStackSizeKHR"));
	*(cast(void**)&vkCmdSetRenderingAttachmentLocations) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetRenderingAttachmentLocations"));
	*(cast(void**)&vkCmdSetRenderingAttachmentLocationsKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetRenderingAttachmentLocationsKHR"));
	*(cast(void**)&vkCmdSetRenderingInputAttachmentIndices) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetRenderingInputAttachmentIndices"));
	*(cast(void**)&vkCmdSetRenderingInputAttachmentIndicesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetRenderingInputAttachmentIndicesKHR"));
	*(cast(void**)&vkCmdSetRepresentativeFragmentTestEnableNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetRepresentativeFragmentTestEnableNV"));
	*(cast(void**)&vkCmdSetSampleLocationsEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetSampleLocationsEXT"));
	*(cast(void**)&vkCmdSetSampleLocationsEnableEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetSampleLocationsEnableEXT"));
	*(cast(void**)&vkCmdSetSampleMaskEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetSampleMaskEXT"));
	*(cast(void**)&vkCmdSetScissor) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetScissor"));
	*(cast(void**)&vkCmdSetScissorWithCount) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetScissorWithCount"));
	*(cast(void**)&vkCmdSetScissorWithCountEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetScissorWithCountEXT"));
	*(cast(void**)&vkCmdSetShadingRateImageEnableNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetShadingRateImageEnableNV"));
	*(cast(void**)&vkCmdSetStencilCompareMask) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetStencilCompareMask"));
	*(cast(void**)&vkCmdSetStencilOp) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetStencilOp"));
	*(cast(void**)&vkCmdSetStencilOpEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetStencilOpEXT"));
	*(cast(void**)&vkCmdSetStencilReference) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetStencilReference"));
	*(cast(void**)&vkCmdSetStencilTestEnable) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetStencilTestEnable"));
	*(cast(void**)&vkCmdSetStencilTestEnableEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetStencilTestEnableEXT"));
	*(cast(void**)&vkCmdSetStencilWriteMask) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetStencilWriteMask"));
	*(cast(void**)&vkCmdSetTessellationDomainOriginEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetTessellationDomainOriginEXT"));
	*(cast(void**)&vkCmdSetVertexInputEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetVertexInputEXT"));
	*(cast(void**)&vkCmdSetViewport) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetViewport"));
	*(cast(void**)&vkCmdSetViewportShadingRatePaletteNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetViewportShadingRatePaletteNV"));
	*(cast(void**)&vkCmdSetViewportSwizzleNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetViewportSwizzleNV"));
	*(cast(void**)&vkCmdSetViewportWScalingEnableNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetViewportWScalingEnableNV"));
	*(cast(void**)&vkCmdSetViewportWScalingNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetViewportWScalingNV"));
	*(cast(void**)&vkCmdSetViewportWithCount) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetViewportWithCount"));
	*(cast(void**)&vkCmdSetViewportWithCountEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSetViewportWithCountEXT"));
	*(cast(void**)&vkCmdSubpassShadingHUAWEI) = vkGetInstanceProcAddr(instance, toStringz("vkCmdSubpassShadingHUAWEI"));
	*(cast(void**)&vkCmdTraceRaysIndirect2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdTraceRaysIndirect2KHR"));
	*(cast(void**)&vkCmdTraceRaysIndirectKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdTraceRaysIndirectKHR"));
	*(cast(void**)&vkCmdTraceRaysKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdTraceRaysKHR"));
	*(cast(void**)&vkCmdTraceRaysNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdTraceRaysNV"));
	*(cast(void**)&vkCmdUpdateBuffer) = vkGetInstanceProcAddr(instance, toStringz("vkCmdUpdateBuffer"));
	*(cast(void**)&vkCmdUpdatePipelineIndirectBufferNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdUpdatePipelineIndirectBufferNV"));
	*(cast(void**)&vkCmdWaitEvents) = vkGetInstanceProcAddr(instance, toStringz("vkCmdWaitEvents"));
	*(cast(void**)&vkCmdWaitEvents2) = vkGetInstanceProcAddr(instance, toStringz("vkCmdWaitEvents2"));
	*(cast(void**)&vkCmdWaitEvents2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdWaitEvents2KHR"));
	*(cast(void**)&vkCmdWriteAccelerationStructuresPropertiesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdWriteAccelerationStructuresPropertiesKHR"));
	*(cast(void**)&vkCmdWriteAccelerationStructuresPropertiesNV) = vkGetInstanceProcAddr(instance, toStringz("vkCmdWriteAccelerationStructuresPropertiesNV"));
	*(cast(void**)&vkCmdWriteBufferMarker2AMD) = vkGetInstanceProcAddr(instance, toStringz("vkCmdWriteBufferMarker2AMD"));
	*(cast(void**)&vkCmdWriteBufferMarkerAMD) = vkGetInstanceProcAddr(instance, toStringz("vkCmdWriteBufferMarkerAMD"));
	*(cast(void**)&vkCmdWriteMicromapsPropertiesEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCmdWriteMicromapsPropertiesEXT"));
	*(cast(void**)&vkCmdWriteTimestamp) = vkGetInstanceProcAddr(instance, toStringz("vkCmdWriteTimestamp"));
	*(cast(void**)&vkCmdWriteTimestamp2) = vkGetInstanceProcAddr(instance, toStringz("vkCmdWriteTimestamp2"));
	*(cast(void**)&vkCmdWriteTimestamp2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkCmdWriteTimestamp2KHR"));
	*(cast(void**)&vkCompileDeferredNV) = vkGetInstanceProcAddr(instance, toStringz("vkCompileDeferredNV"));
	*(cast(void**)&vkConvertCooperativeVectorMatrixNV) = vkGetInstanceProcAddr(instance, toStringz("vkConvertCooperativeVectorMatrixNV"));
	*(cast(void**)&vkCopyAccelerationStructureKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCopyAccelerationStructureKHR"));
	*(cast(void**)&vkCopyAccelerationStructureToMemoryKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCopyAccelerationStructureToMemoryKHR"));
	*(cast(void**)&vkCopyImageToImage) = vkGetInstanceProcAddr(instance, toStringz("vkCopyImageToImage"));
	*(cast(void**)&vkCopyImageToImageEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCopyImageToImageEXT"));
	*(cast(void**)&vkCopyImageToMemory) = vkGetInstanceProcAddr(instance, toStringz("vkCopyImageToMemory"));
	*(cast(void**)&vkCopyImageToMemoryEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCopyImageToMemoryEXT"));
	*(cast(void**)&vkCopyMemoryToAccelerationStructureKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCopyMemoryToAccelerationStructureKHR"));
	*(cast(void**)&vkCopyMemoryToImage) = vkGetInstanceProcAddr(instance, toStringz("vkCopyMemoryToImage"));
	*(cast(void**)&vkCopyMemoryToImageEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCopyMemoryToImageEXT"));
	*(cast(void**)&vkCopyMemoryToMicromapEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCopyMemoryToMicromapEXT"));
	*(cast(void**)&vkCopyMicromapEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCopyMicromapEXT"));
	*(cast(void**)&vkCopyMicromapToMemoryEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCopyMicromapToMemoryEXT"));
	*(cast(void**)&vkCreateAccelerationStructureKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCreateAccelerationStructureKHR"));
	*(cast(void**)&vkCreateAccelerationStructureNV) = vkGetInstanceProcAddr(instance, toStringz("vkCreateAccelerationStructureNV"));
	*(cast(void**)&vkCreateBuffer) = vkGetInstanceProcAddr(instance, toStringz("vkCreateBuffer"));
	*(cast(void**)&vkCreateBufferView) = vkGetInstanceProcAddr(instance, toStringz("vkCreateBufferView"));
	*(cast(void**)&vkCreateCommandPool) = vkGetInstanceProcAddr(instance, toStringz("vkCreateCommandPool"));
	*(cast(void**)&vkCreateComputePipelines) = vkGetInstanceProcAddr(instance, toStringz("vkCreateComputePipelines"));
	*(cast(void**)&vkCreateCuFunctionNVX) = vkGetInstanceProcAddr(instance, toStringz("vkCreateCuFunctionNVX"));
	*(cast(void**)&vkCreateCuModuleNVX) = vkGetInstanceProcAddr(instance, toStringz("vkCreateCuModuleNVX"));
	*(cast(void**)&vkCreateCudaFunctionNV) = vkGetInstanceProcAddr(instance, toStringz("vkCreateCudaFunctionNV"));
	*(cast(void**)&vkCreateCudaModuleNV) = vkGetInstanceProcAddr(instance, toStringz("vkCreateCudaModuleNV"));
	*(cast(void**)&vkCreateDebugReportCallbackEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCreateDebugReportCallbackEXT"));
	*(cast(void**)&vkCreateDebugUtilsMessengerEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCreateDebugUtilsMessengerEXT"));
	*(cast(void**)&vkCreateDeferredOperationKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCreateDeferredOperationKHR"));
	*(cast(void**)&vkCreateDescriptorPool) = vkGetInstanceProcAddr(instance, toStringz("vkCreateDescriptorPool"));
	*(cast(void**)&vkCreateDescriptorSetLayout) = vkGetInstanceProcAddr(instance, toStringz("vkCreateDescriptorSetLayout"));
	*(cast(void**)&vkCreateDescriptorUpdateTemplate) = vkGetInstanceProcAddr(instance, toStringz("vkCreateDescriptorUpdateTemplate"));
	*(cast(void**)&vkCreateDescriptorUpdateTemplateKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCreateDescriptorUpdateTemplateKHR"));
	*(cast(void**)&vkCreateDevice) = vkGetInstanceProcAddr(instance, toStringz("vkCreateDevice"));
	*(cast(void**)&vkCreateDisplayModeKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCreateDisplayModeKHR"));
	*(cast(void**)&vkCreateDisplayPlaneSurfaceKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCreateDisplayPlaneSurfaceKHR"));
	*(cast(void**)&vkCreateEvent) = vkGetInstanceProcAddr(instance, toStringz("vkCreateEvent"));
	*(cast(void**)&vkCreateFence) = vkGetInstanceProcAddr(instance, toStringz("vkCreateFence"));
	*(cast(void**)&vkCreateFramebuffer) = vkGetInstanceProcAddr(instance, toStringz("vkCreateFramebuffer"));
	*(cast(void**)&vkCreateGraphicsPipelines) = vkGetInstanceProcAddr(instance, toStringz("vkCreateGraphicsPipelines"));
	*(cast(void**)&vkCreateHeadlessSurfaceEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCreateHeadlessSurfaceEXT"));
	*(cast(void**)&vkCreateImage) = vkGetInstanceProcAddr(instance, toStringz("vkCreateImage"));
	*(cast(void**)&vkCreateImageView) = vkGetInstanceProcAddr(instance, toStringz("vkCreateImageView"));
	*(cast(void**)&vkCreateIndirectCommandsLayoutEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCreateIndirectCommandsLayoutEXT"));
	*(cast(void**)&vkCreateIndirectCommandsLayoutNV) = vkGetInstanceProcAddr(instance, toStringz("vkCreateIndirectCommandsLayoutNV"));
	*(cast(void**)&vkCreateIndirectExecutionSetEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCreateIndirectExecutionSetEXT"));
	*(cast(void**)&vkCreateMicromapEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCreateMicromapEXT"));
	*(cast(void**)&vkCreateOpticalFlowSessionNV) = vkGetInstanceProcAddr(instance, toStringz("vkCreateOpticalFlowSessionNV"));
	*(cast(void**)&vkCreatePipelineBinariesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCreatePipelineBinariesKHR"));
	*(cast(void**)&vkCreatePipelineCache) = vkGetInstanceProcAddr(instance, toStringz("vkCreatePipelineCache"));
	*(cast(void**)&vkCreatePipelineLayout) = vkGetInstanceProcAddr(instance, toStringz("vkCreatePipelineLayout"));
	*(cast(void**)&vkCreatePrivateDataSlot) = vkGetInstanceProcAddr(instance, toStringz("vkCreatePrivateDataSlot"));
	*(cast(void**)&vkCreatePrivateDataSlotEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCreatePrivateDataSlotEXT"));
	*(cast(void**)&vkCreateQueryPool) = vkGetInstanceProcAddr(instance, toStringz("vkCreateQueryPool"));
	*(cast(void**)&vkCreateRayTracingPipelinesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCreateRayTracingPipelinesKHR"));
	*(cast(void**)&vkCreateRayTracingPipelinesNV) = vkGetInstanceProcAddr(instance, toStringz("vkCreateRayTracingPipelinesNV"));
	*(cast(void**)&vkCreateRenderPass) = vkGetInstanceProcAddr(instance, toStringz("vkCreateRenderPass"));
	*(cast(void**)&vkCreateRenderPass2) = vkGetInstanceProcAddr(instance, toStringz("vkCreateRenderPass2"));
	*(cast(void**)&vkCreateRenderPass2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkCreateRenderPass2KHR"));
	*(cast(void**)&vkCreateSampler) = vkGetInstanceProcAddr(instance, toStringz("vkCreateSampler"));
	*(cast(void**)&vkCreateSamplerYcbcrConversion) = vkGetInstanceProcAddr(instance, toStringz("vkCreateSamplerYcbcrConversion"));
	*(cast(void**)&vkCreateSamplerYcbcrConversionKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCreateSamplerYcbcrConversionKHR"));
	*(cast(void**)&vkCreateSemaphore) = vkGetInstanceProcAddr(instance, toStringz("vkCreateSemaphore"));
	*(cast(void**)&vkCreateShaderModule) = vkGetInstanceProcAddr(instance, toStringz("vkCreateShaderModule"));
	*(cast(void**)&vkCreateShadersEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCreateShadersEXT"));
	*(cast(void**)&vkCreateSharedSwapchainsKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCreateSharedSwapchainsKHR"));
	*(cast(void**)&vkCreateSwapchainKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCreateSwapchainKHR"));
	*(cast(void**)&vkCreateValidationCacheEXT) = vkGetInstanceProcAddr(instance, toStringz("vkCreateValidationCacheEXT"));
	*(cast(void**)&vkCreateVideoSessionKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCreateVideoSessionKHR"));
	*(cast(void**)&vkCreateVideoSessionParametersKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCreateVideoSessionParametersKHR"));
	*(cast(void**)&vkCreateWin32SurfaceKHR) = vkGetInstanceProcAddr(instance, toStringz("vkCreateWin32SurfaceKHR"));
	*(cast(void**)&vkDebugMarkerSetObjectNameEXT) = vkGetInstanceProcAddr(instance, toStringz("vkDebugMarkerSetObjectNameEXT"));
	*(cast(void**)&vkDebugMarkerSetObjectTagEXT) = vkGetInstanceProcAddr(instance, toStringz("vkDebugMarkerSetObjectTagEXT"));
	*(cast(void**)&vkDebugReportMessageEXT) = vkGetInstanceProcAddr(instance, toStringz("vkDebugReportMessageEXT"));
	*(cast(void**)&vkDeferredOperationJoinKHR) = vkGetInstanceProcAddr(instance, toStringz("vkDeferredOperationJoinKHR"));
	*(cast(void**)&vkDestroyAccelerationStructureKHR) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyAccelerationStructureKHR"));
	*(cast(void**)&vkDestroyAccelerationStructureNV) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyAccelerationStructureNV"));
	*(cast(void**)&vkDestroyBuffer) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyBuffer"));
	*(cast(void**)&vkDestroyBufferView) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyBufferView"));
	*(cast(void**)&vkDestroyCommandPool) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyCommandPool"));
	*(cast(void**)&vkDestroyCuFunctionNVX) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyCuFunctionNVX"));
	*(cast(void**)&vkDestroyCuModuleNVX) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyCuModuleNVX"));
	*(cast(void**)&vkDestroyCudaFunctionNV) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyCudaFunctionNV"));
	*(cast(void**)&vkDestroyCudaModuleNV) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyCudaModuleNV"));
	*(cast(void**)&vkDestroyDebugReportCallbackEXT) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyDebugReportCallbackEXT"));
	*(cast(void**)&vkDestroyDebugUtilsMessengerEXT) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyDebugUtilsMessengerEXT"));
	*(cast(void**)&vkDestroyDeferredOperationKHR) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyDeferredOperationKHR"));
	*(cast(void**)&vkDestroyDescriptorPool) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyDescriptorPool"));
	*(cast(void**)&vkDestroyDescriptorSetLayout) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyDescriptorSetLayout"));
	*(cast(void**)&vkDestroyDescriptorUpdateTemplate) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyDescriptorUpdateTemplate"));
	*(cast(void**)&vkDestroyDescriptorUpdateTemplateKHR) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyDescriptorUpdateTemplateKHR"));
	*(cast(void**)&vkDestroyDevice) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyDevice"));
	*(cast(void**)&vkDestroyEvent) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyEvent"));
	*(cast(void**)&vkDestroyFence) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyFence"));
	*(cast(void**)&vkDestroyFramebuffer) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyFramebuffer"));
	*(cast(void**)&vkDestroyImage) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyImage"));
	*(cast(void**)&vkDestroyImageView) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyImageView"));
	*(cast(void**)&vkDestroyIndirectCommandsLayoutEXT) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyIndirectCommandsLayoutEXT"));
	*(cast(void**)&vkDestroyIndirectCommandsLayoutNV) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyIndirectCommandsLayoutNV"));
	*(cast(void**)&vkDestroyIndirectExecutionSetEXT) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyIndirectExecutionSetEXT"));
	*(cast(void**)&vkDestroyInstance) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyInstance"));
	*(cast(void**)&vkDestroyMicromapEXT) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyMicromapEXT"));
	*(cast(void**)&vkDestroyOpticalFlowSessionNV) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyOpticalFlowSessionNV"));
	*(cast(void**)&vkDestroyPipeline) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyPipeline"));
	*(cast(void**)&vkDestroyPipelineBinaryKHR) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyPipelineBinaryKHR"));
	*(cast(void**)&vkDestroyPipelineCache) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyPipelineCache"));
	*(cast(void**)&vkDestroyPipelineLayout) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyPipelineLayout"));
	*(cast(void**)&vkDestroyPrivateDataSlot) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyPrivateDataSlot"));
	*(cast(void**)&vkDestroyPrivateDataSlotEXT) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyPrivateDataSlotEXT"));
	*(cast(void**)&vkDestroyQueryPool) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyQueryPool"));
	*(cast(void**)&vkDestroyRenderPass) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyRenderPass"));
	*(cast(void**)&vkDestroySampler) = vkGetInstanceProcAddr(instance, toStringz("vkDestroySampler"));
	*(cast(void**)&vkDestroySamplerYcbcrConversion) = vkGetInstanceProcAddr(instance, toStringz("vkDestroySamplerYcbcrConversion"));
	*(cast(void**)&vkDestroySamplerYcbcrConversionKHR) = vkGetInstanceProcAddr(instance, toStringz("vkDestroySamplerYcbcrConversionKHR"));
	*(cast(void**)&vkDestroySemaphore) = vkGetInstanceProcAddr(instance, toStringz("vkDestroySemaphore"));
	*(cast(void**)&vkDestroyShaderEXT) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyShaderEXT"));
	*(cast(void**)&vkDestroyShaderModule) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyShaderModule"));
	*(cast(void**)&vkDestroySurfaceKHR) = vkGetInstanceProcAddr(instance, toStringz("vkDestroySurfaceKHR"));
	*(cast(void**)&vkDestroySwapchainKHR) = vkGetInstanceProcAddr(instance, toStringz("vkDestroySwapchainKHR"));
	*(cast(void**)&vkDestroyValidationCacheEXT) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyValidationCacheEXT"));
	*(cast(void**)&vkDestroyVideoSessionKHR) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyVideoSessionKHR"));
	*(cast(void**)&vkDestroyVideoSessionParametersKHR) = vkGetInstanceProcAddr(instance, toStringz("vkDestroyVideoSessionParametersKHR"));
	*(cast(void**)&vkDeviceWaitIdle) = vkGetInstanceProcAddr(instance, toStringz("vkDeviceWaitIdle"));
	*(cast(void**)&vkDisplayPowerControlEXT) = vkGetInstanceProcAddr(instance, toStringz("vkDisplayPowerControlEXT"));
	*(cast(void**)&vkEndCommandBuffer) = vkGetInstanceProcAddr(instance, toStringz("vkEndCommandBuffer"));
	*(cast(void**)&vkEnumerateDeviceExtensionProperties) = vkGetInstanceProcAddr(instance, toStringz("vkEnumerateDeviceExtensionProperties"));
	*(cast(void**)&vkEnumerateDeviceLayerProperties) = vkGetInstanceProcAddr(instance, toStringz("vkEnumerateDeviceLayerProperties"));
	*(cast(void**)&vkEnumeratePhysicalDeviceGroups) = vkGetInstanceProcAddr(instance, toStringz("vkEnumeratePhysicalDeviceGroups"));
	*(cast(void**)&vkEnumeratePhysicalDeviceGroupsKHR) = vkGetInstanceProcAddr(instance, toStringz("vkEnumeratePhysicalDeviceGroupsKHR"));
	*(cast(void**)&vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR) = vkGetInstanceProcAddr(instance, toStringz("vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR"));
	*(cast(void**)&vkEnumeratePhysicalDevices) = vkGetInstanceProcAddr(instance, toStringz("vkEnumeratePhysicalDevices"));
	*(cast(void**)&vkFlushMappedMemoryRanges) = vkGetInstanceProcAddr(instance, toStringz("vkFlushMappedMemoryRanges"));
	*(cast(void**)&vkFreeCommandBuffers) = vkGetInstanceProcAddr(instance, toStringz("vkFreeCommandBuffers"));
	*(cast(void**)&vkFreeDescriptorSets) = vkGetInstanceProcAddr(instance, toStringz("vkFreeDescriptorSets"));
	*(cast(void**)&vkFreeMemory) = vkGetInstanceProcAddr(instance, toStringz("vkFreeMemory"));
	*(cast(void**)&vkGetAccelerationStructureBuildSizesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetAccelerationStructureBuildSizesKHR"));
	*(cast(void**)&vkGetAccelerationStructureDeviceAddressKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetAccelerationStructureDeviceAddressKHR"));
	*(cast(void**)&vkGetAccelerationStructureHandleNV) = vkGetInstanceProcAddr(instance, toStringz("vkGetAccelerationStructureHandleNV"));
	*(cast(void**)&vkGetAccelerationStructureMemoryRequirementsNV) = vkGetInstanceProcAddr(instance, toStringz("vkGetAccelerationStructureMemoryRequirementsNV"));
	*(cast(void**)&vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT"));
	*(cast(void**)&vkGetBufferDeviceAddress) = vkGetInstanceProcAddr(instance, toStringz("vkGetBufferDeviceAddress"));
	*(cast(void**)&vkGetBufferDeviceAddressEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetBufferDeviceAddressEXT"));
	*(cast(void**)&vkGetBufferDeviceAddressKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetBufferDeviceAddressKHR"));
	*(cast(void**)&vkGetBufferMemoryRequirements) = vkGetInstanceProcAddr(instance, toStringz("vkGetBufferMemoryRequirements"));
	*(cast(void**)&vkGetBufferMemoryRequirements2) = vkGetInstanceProcAddr(instance, toStringz("vkGetBufferMemoryRequirements2"));
	*(cast(void**)&vkGetBufferMemoryRequirements2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetBufferMemoryRequirements2KHR"));
	*(cast(void**)&vkGetBufferOpaqueCaptureAddress) = vkGetInstanceProcAddr(instance, toStringz("vkGetBufferOpaqueCaptureAddress"));
	*(cast(void**)&vkGetBufferOpaqueCaptureAddressKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetBufferOpaqueCaptureAddressKHR"));
	*(cast(void**)&vkGetBufferOpaqueCaptureDescriptorDataEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetBufferOpaqueCaptureDescriptorDataEXT"));
	*(cast(void**)&vkGetCalibratedTimestampsEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetCalibratedTimestampsEXT"));
	*(cast(void**)&vkGetCalibratedTimestampsKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetCalibratedTimestampsKHR"));
	*(cast(void**)&vkGetClusterAccelerationStructureBuildSizesNV) = vkGetInstanceProcAddr(instance, toStringz("vkGetClusterAccelerationStructureBuildSizesNV"));
	*(cast(void**)&vkGetCudaModuleCacheNV) = vkGetInstanceProcAddr(instance, toStringz("vkGetCudaModuleCacheNV"));
	*(cast(void**)&vkGetDeferredOperationMaxConcurrencyKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetDeferredOperationMaxConcurrencyKHR"));
	*(cast(void**)&vkGetDeferredOperationResultKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetDeferredOperationResultKHR"));
	*(cast(void**)&vkGetDescriptorEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetDescriptorEXT"));
	*(cast(void**)&vkGetDescriptorSetHostMappingVALVE) = vkGetInstanceProcAddr(instance, toStringz("vkGetDescriptorSetHostMappingVALVE"));
	*(cast(void**)&vkGetDescriptorSetLayoutBindingOffsetEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetDescriptorSetLayoutBindingOffsetEXT"));
	*(cast(void**)&vkGetDescriptorSetLayoutHostMappingInfoVALVE) = vkGetInstanceProcAddr(instance, toStringz("vkGetDescriptorSetLayoutHostMappingInfoVALVE"));
	*(cast(void**)&vkGetDescriptorSetLayoutSizeEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetDescriptorSetLayoutSizeEXT"));
	*(cast(void**)&vkGetDescriptorSetLayoutSupport) = vkGetInstanceProcAddr(instance, toStringz("vkGetDescriptorSetLayoutSupport"));
	*(cast(void**)&vkGetDescriptorSetLayoutSupportKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetDescriptorSetLayoutSupportKHR"));
	*(cast(void**)&vkGetDeviceAccelerationStructureCompatibilityKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetDeviceAccelerationStructureCompatibilityKHR"));
	*(cast(void**)&vkGetDeviceBufferMemoryRequirements) = vkGetInstanceProcAddr(instance, toStringz("vkGetDeviceBufferMemoryRequirements"));
	*(cast(void**)&vkGetDeviceBufferMemoryRequirementsKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetDeviceBufferMemoryRequirementsKHR"));
	*(cast(void**)&vkGetDeviceFaultInfoEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetDeviceFaultInfoEXT"));
	*(cast(void**)&vkGetDeviceGroupPeerMemoryFeatures) = vkGetInstanceProcAddr(instance, toStringz("vkGetDeviceGroupPeerMemoryFeatures"));
	*(cast(void**)&vkGetDeviceGroupPeerMemoryFeaturesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetDeviceGroupPeerMemoryFeaturesKHR"));
	*(cast(void**)&vkGetDeviceGroupPresentCapabilitiesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetDeviceGroupPresentCapabilitiesKHR"));
	*(cast(void**)&vkGetDeviceGroupSurfacePresentModes2EXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetDeviceGroupSurfacePresentModes2EXT"));
	*(cast(void**)&vkGetDeviceGroupSurfacePresentModesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetDeviceGroupSurfacePresentModesKHR"));
	*(cast(void**)&vkGetDeviceImageMemoryRequirements) = vkGetInstanceProcAddr(instance, toStringz("vkGetDeviceImageMemoryRequirements"));
	*(cast(void**)&vkGetDeviceImageMemoryRequirementsKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetDeviceImageMemoryRequirementsKHR"));
	*(cast(void**)&vkGetDeviceImageSparseMemoryRequirements) = vkGetInstanceProcAddr(instance, toStringz("vkGetDeviceImageSparseMemoryRequirements"));
	*(cast(void**)&vkGetDeviceImageSparseMemoryRequirementsKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetDeviceImageSparseMemoryRequirementsKHR"));
	*(cast(void**)&vkGetDeviceImageSubresourceLayout) = vkGetInstanceProcAddr(instance, toStringz("vkGetDeviceImageSubresourceLayout"));
	*(cast(void**)&vkGetDeviceImageSubresourceLayoutKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetDeviceImageSubresourceLayoutKHR"));
	*(cast(void**)&vkGetDeviceMemoryCommitment) = vkGetInstanceProcAddr(instance, toStringz("vkGetDeviceMemoryCommitment"));
	*(cast(void**)&vkGetDeviceMemoryOpaqueCaptureAddress) = vkGetInstanceProcAddr(instance, toStringz("vkGetDeviceMemoryOpaqueCaptureAddress"));
	*(cast(void**)&vkGetDeviceMemoryOpaqueCaptureAddressKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetDeviceMemoryOpaqueCaptureAddressKHR"));
	*(cast(void**)&vkGetDeviceMicromapCompatibilityEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetDeviceMicromapCompatibilityEXT"));
	*(cast(void**)&vkGetDeviceProcAddr) = vkGetInstanceProcAddr(instance, toStringz("vkGetDeviceProcAddr"));
	*(cast(void**)&vkGetDeviceQueue) = vkGetInstanceProcAddr(instance, toStringz("vkGetDeviceQueue"));
	*(cast(void**)&vkGetDeviceQueue2) = vkGetInstanceProcAddr(instance, toStringz("vkGetDeviceQueue2"));
	*(cast(void**)&vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI) = vkGetInstanceProcAddr(instance, toStringz("vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI"));
	*(cast(void**)&vkGetDisplayModeProperties2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetDisplayModeProperties2KHR"));
	*(cast(void**)&vkGetDisplayModePropertiesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetDisplayModePropertiesKHR"));
	*(cast(void**)&vkGetDisplayPlaneCapabilities2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetDisplayPlaneCapabilities2KHR"));
	*(cast(void**)&vkGetDisplayPlaneCapabilitiesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetDisplayPlaneCapabilitiesKHR"));
	*(cast(void**)&vkGetDisplayPlaneSupportedDisplaysKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetDisplayPlaneSupportedDisplaysKHR"));
	*(cast(void**)&vkGetDrmDisplayEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetDrmDisplayEXT"));
	*(cast(void**)&vkGetDynamicRenderingTilePropertiesQCOM) = vkGetInstanceProcAddr(instance, toStringz("vkGetDynamicRenderingTilePropertiesQCOM"));
	*(cast(void**)&vkGetEncodedVideoSessionParametersKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetEncodedVideoSessionParametersKHR"));
	*(cast(void**)&vkGetEventStatus) = vkGetInstanceProcAddr(instance, toStringz("vkGetEventStatus"));
	*(cast(void**)&vkGetFenceFdKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetFenceFdKHR"));
	*(cast(void**)&vkGetFenceStatus) = vkGetInstanceProcAddr(instance, toStringz("vkGetFenceStatus"));
	*(cast(void**)&vkGetFenceWin32HandleKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetFenceWin32HandleKHR"));
	*(cast(void**)&vkGetFramebufferTilePropertiesQCOM) = vkGetInstanceProcAddr(instance, toStringz("vkGetFramebufferTilePropertiesQCOM"));
	*(cast(void**)&vkGetGeneratedCommandsMemoryRequirementsEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetGeneratedCommandsMemoryRequirementsEXT"));
	*(cast(void**)&vkGetGeneratedCommandsMemoryRequirementsNV) = vkGetInstanceProcAddr(instance, toStringz("vkGetGeneratedCommandsMemoryRequirementsNV"));
	*(cast(void**)&vkGetImageDrmFormatModifierPropertiesEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetImageDrmFormatModifierPropertiesEXT"));
	*(cast(void**)&vkGetImageMemoryRequirements) = vkGetInstanceProcAddr(instance, toStringz("vkGetImageMemoryRequirements"));
	*(cast(void**)&vkGetImageMemoryRequirements2) = vkGetInstanceProcAddr(instance, toStringz("vkGetImageMemoryRequirements2"));
	*(cast(void**)&vkGetImageMemoryRequirements2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetImageMemoryRequirements2KHR"));
	*(cast(void**)&vkGetImageOpaqueCaptureDescriptorDataEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetImageOpaqueCaptureDescriptorDataEXT"));
	*(cast(void**)&vkGetImageSparseMemoryRequirements) = vkGetInstanceProcAddr(instance, toStringz("vkGetImageSparseMemoryRequirements"));
	*(cast(void**)&vkGetImageSparseMemoryRequirements2) = vkGetInstanceProcAddr(instance, toStringz("vkGetImageSparseMemoryRequirements2"));
	*(cast(void**)&vkGetImageSparseMemoryRequirements2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetImageSparseMemoryRequirements2KHR"));
	*(cast(void**)&vkGetImageSubresourceLayout) = vkGetInstanceProcAddr(instance, toStringz("vkGetImageSubresourceLayout"));
	*(cast(void**)&vkGetImageSubresourceLayout2) = vkGetInstanceProcAddr(instance, toStringz("vkGetImageSubresourceLayout2"));
	*(cast(void**)&vkGetImageSubresourceLayout2EXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetImageSubresourceLayout2EXT"));
	*(cast(void**)&vkGetImageSubresourceLayout2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetImageSubresourceLayout2KHR"));
	*(cast(void**)&vkGetImageViewAddressNVX) = vkGetInstanceProcAddr(instance, toStringz("vkGetImageViewAddressNVX"));
	*(cast(void**)&vkGetImageViewHandle64NVX) = vkGetInstanceProcAddr(instance, toStringz("vkGetImageViewHandle64NVX"));
	*(cast(void**)&vkGetImageViewHandleNVX) = vkGetInstanceProcAddr(instance, toStringz("vkGetImageViewHandleNVX"));
	*(cast(void**)&vkGetImageViewOpaqueCaptureDescriptorDataEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetImageViewOpaqueCaptureDescriptorDataEXT"));
	*(cast(void**)&vkGetLatencyTimingsNV) = vkGetInstanceProcAddr(instance, toStringz("vkGetLatencyTimingsNV"));
	*(cast(void**)&vkGetMemoryFdKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetMemoryFdKHR"));
	*(cast(void**)&vkGetMemoryFdPropertiesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetMemoryFdPropertiesKHR"));
	*(cast(void**)&vkGetMemoryHostPointerPropertiesEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetMemoryHostPointerPropertiesEXT"));
	*(cast(void**)&vkGetMemoryRemoteAddressNV) = vkGetInstanceProcAddr(instance, toStringz("vkGetMemoryRemoteAddressNV"));
	*(cast(void**)&vkGetMemoryWin32HandleKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetMemoryWin32HandleKHR"));
	*(cast(void**)&vkGetMemoryWin32HandleNV) = vkGetInstanceProcAddr(instance, toStringz("vkGetMemoryWin32HandleNV"));
	*(cast(void**)&vkGetMemoryWin32HandlePropertiesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetMemoryWin32HandlePropertiesKHR"));
	*(cast(void**)&vkGetMicromapBuildSizesEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetMicromapBuildSizesEXT"));
	*(cast(void**)&vkGetPartitionedAccelerationStructuresBuildSizesNV) = vkGetInstanceProcAddr(instance, toStringz("vkGetPartitionedAccelerationStructuresBuildSizesNV"));
	*(cast(void**)&vkGetPastPresentationTimingGOOGLE) = vkGetInstanceProcAddr(instance, toStringz("vkGetPastPresentationTimingGOOGLE"));
	*(cast(void**)&vkGetPerformanceParameterINTEL) = vkGetInstanceProcAddr(instance, toStringz("vkGetPerformanceParameterINTEL"));
	*(cast(void**)&vkGetPhysicalDeviceCalibrateableTimeDomainsEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceCalibrateableTimeDomainsEXT"));
	*(cast(void**)&vkGetPhysicalDeviceCalibrateableTimeDomainsKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceCalibrateableTimeDomainsKHR"));
	*(cast(void**)&vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV"));
	*(cast(void**)&vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR"));
	*(cast(void**)&vkGetPhysicalDeviceCooperativeMatrixPropertiesNV) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceCooperativeMatrixPropertiesNV"));
	*(cast(void**)&vkGetPhysicalDeviceCooperativeVectorPropertiesNV) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceCooperativeVectorPropertiesNV"));
	*(cast(void**)&vkGetPhysicalDeviceDisplayPlaneProperties2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceDisplayPlaneProperties2KHR"));
	*(cast(void**)&vkGetPhysicalDeviceDisplayPlanePropertiesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceDisplayPlanePropertiesKHR"));
	*(cast(void**)&vkGetPhysicalDeviceDisplayProperties2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceDisplayProperties2KHR"));
	*(cast(void**)&vkGetPhysicalDeviceDisplayPropertiesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceDisplayPropertiesKHR"));
	*(cast(void**)&vkGetPhysicalDeviceExternalBufferProperties) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceExternalBufferProperties"));
	*(cast(void**)&vkGetPhysicalDeviceExternalBufferPropertiesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceExternalBufferPropertiesKHR"));
	*(cast(void**)&vkGetPhysicalDeviceExternalFenceProperties) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceExternalFenceProperties"));
	*(cast(void**)&vkGetPhysicalDeviceExternalFencePropertiesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceExternalFencePropertiesKHR"));
	*(cast(void**)&vkGetPhysicalDeviceExternalImageFormatPropertiesNV) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceExternalImageFormatPropertiesNV"));
	*(cast(void**)&vkGetPhysicalDeviceExternalSemaphoreProperties) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceExternalSemaphoreProperties"));
	*(cast(void**)&vkGetPhysicalDeviceExternalSemaphorePropertiesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceExternalSemaphorePropertiesKHR"));
	*(cast(void**)&vkGetPhysicalDeviceFeatures) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceFeatures"));
	*(cast(void**)&vkGetPhysicalDeviceFeatures2) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceFeatures2"));
	*(cast(void**)&vkGetPhysicalDeviceFeatures2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceFeatures2KHR"));
	*(cast(void**)&vkGetPhysicalDeviceFormatProperties) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceFormatProperties"));
	*(cast(void**)&vkGetPhysicalDeviceFormatProperties2) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceFormatProperties2"));
	*(cast(void**)&vkGetPhysicalDeviceFormatProperties2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceFormatProperties2KHR"));
	*(cast(void**)&vkGetPhysicalDeviceFragmentShadingRatesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceFragmentShadingRatesKHR"));
	*(cast(void**)&vkGetPhysicalDeviceImageFormatProperties) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceImageFormatProperties"));
	*(cast(void**)&vkGetPhysicalDeviceImageFormatProperties2) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceImageFormatProperties2"));
	*(cast(void**)&vkGetPhysicalDeviceImageFormatProperties2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceImageFormatProperties2KHR"));
	*(cast(void**)&vkGetPhysicalDeviceMemoryProperties) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceMemoryProperties"));
	*(cast(void**)&vkGetPhysicalDeviceMemoryProperties2) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceMemoryProperties2"));
	*(cast(void**)&vkGetPhysicalDeviceMemoryProperties2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceMemoryProperties2KHR"));
	*(cast(void**)&vkGetPhysicalDeviceMultisamplePropertiesEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceMultisamplePropertiesEXT"));
	*(cast(void**)&vkGetPhysicalDeviceOpticalFlowImageFormatsNV) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceOpticalFlowImageFormatsNV"));
	*(cast(void**)&vkGetPhysicalDevicePresentRectanglesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDevicePresentRectanglesKHR"));
	*(cast(void**)&vkGetPhysicalDeviceProperties) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceProperties"));
	*(cast(void**)&vkGetPhysicalDeviceProperties2) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceProperties2"));
	*(cast(void**)&vkGetPhysicalDeviceProperties2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceProperties2KHR"));
	*(cast(void**)&vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR"));
	*(cast(void**)&vkGetPhysicalDeviceQueueFamilyProperties) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceQueueFamilyProperties"));
	*(cast(void**)&vkGetPhysicalDeviceQueueFamilyProperties2) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceQueueFamilyProperties2"));
	*(cast(void**)&vkGetPhysicalDeviceQueueFamilyProperties2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceQueueFamilyProperties2KHR"));
	*(cast(void**)&vkGetPhysicalDeviceSparseImageFormatProperties) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceSparseImageFormatProperties"));
	*(cast(void**)&vkGetPhysicalDeviceSparseImageFormatProperties2) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceSparseImageFormatProperties2"));
	*(cast(void**)&vkGetPhysicalDeviceSparseImageFormatProperties2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceSparseImageFormatProperties2KHR"));
	*(cast(void**)&vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV"));
	*(cast(void**)&vkGetPhysicalDeviceSurfaceCapabilities2EXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceSurfaceCapabilities2EXT"));
	*(cast(void**)&vkGetPhysicalDeviceSurfaceCapabilities2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceSurfaceCapabilities2KHR"));
	*(cast(void**)&vkGetPhysicalDeviceSurfaceCapabilitiesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceSurfaceCapabilitiesKHR"));
	*(cast(void**)&vkGetPhysicalDeviceSurfaceFormats2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceSurfaceFormats2KHR"));
	*(cast(void**)&vkGetPhysicalDeviceSurfaceFormatsKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceSurfaceFormatsKHR"));
	*(cast(void**)&vkGetPhysicalDeviceSurfacePresentModes2EXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceSurfacePresentModes2EXT"));
	*(cast(void**)&vkGetPhysicalDeviceSurfacePresentModesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceSurfacePresentModesKHR"));
	*(cast(void**)&vkGetPhysicalDeviceSurfaceSupportKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceSurfaceSupportKHR"));
	*(cast(void**)&vkGetPhysicalDeviceToolProperties) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceToolProperties"));
	*(cast(void**)&vkGetPhysicalDeviceToolPropertiesEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceToolPropertiesEXT"));
	*(cast(void**)&vkGetPhysicalDeviceVideoCapabilitiesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceVideoCapabilitiesKHR"));
	*(cast(void**)&vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR"));
	*(cast(void**)&vkGetPhysicalDeviceVideoFormatPropertiesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceVideoFormatPropertiesKHR"));
	*(cast(void**)&vkGetPhysicalDeviceWin32PresentationSupportKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPhysicalDeviceWin32PresentationSupportKHR"));
	*(cast(void**)&vkGetPipelineBinaryDataKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPipelineBinaryDataKHR"));
	*(cast(void**)&vkGetPipelineCacheData) = vkGetInstanceProcAddr(instance, toStringz("vkGetPipelineCacheData"));
	*(cast(void**)&vkGetPipelineExecutableInternalRepresentationsKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPipelineExecutableInternalRepresentationsKHR"));
	*(cast(void**)&vkGetPipelineExecutablePropertiesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPipelineExecutablePropertiesKHR"));
	*(cast(void**)&vkGetPipelineExecutableStatisticsKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPipelineExecutableStatisticsKHR"));
	*(cast(void**)&vkGetPipelineIndirectDeviceAddressNV) = vkGetInstanceProcAddr(instance, toStringz("vkGetPipelineIndirectDeviceAddressNV"));
	*(cast(void**)&vkGetPipelineIndirectMemoryRequirementsNV) = vkGetInstanceProcAddr(instance, toStringz("vkGetPipelineIndirectMemoryRequirementsNV"));
	*(cast(void**)&vkGetPipelineKeyKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetPipelineKeyKHR"));
	*(cast(void**)&vkGetPipelinePropertiesEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetPipelinePropertiesEXT"));
	*(cast(void**)&vkGetPrivateData) = vkGetInstanceProcAddr(instance, toStringz("vkGetPrivateData"));
	*(cast(void**)&vkGetPrivateDataEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetPrivateDataEXT"));
	*(cast(void**)&vkGetQueryPoolResults) = vkGetInstanceProcAddr(instance, toStringz("vkGetQueryPoolResults"));
	*(cast(void**)&vkGetQueueCheckpointData2NV) = vkGetInstanceProcAddr(instance, toStringz("vkGetQueueCheckpointData2NV"));
	*(cast(void**)&vkGetQueueCheckpointDataNV) = vkGetInstanceProcAddr(instance, toStringz("vkGetQueueCheckpointDataNV"));
	*(cast(void**)&vkGetRayTracingCaptureReplayShaderGroupHandlesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetRayTracingCaptureReplayShaderGroupHandlesKHR"));
	*(cast(void**)&vkGetRayTracingShaderGroupHandlesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetRayTracingShaderGroupHandlesKHR"));
	*(cast(void**)&vkGetRayTracingShaderGroupHandlesNV) = vkGetInstanceProcAddr(instance, toStringz("vkGetRayTracingShaderGroupHandlesNV"));
	*(cast(void**)&vkGetRayTracingShaderGroupStackSizeKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetRayTracingShaderGroupStackSizeKHR"));
	*(cast(void**)&vkGetRefreshCycleDurationGOOGLE) = vkGetInstanceProcAddr(instance, toStringz("vkGetRefreshCycleDurationGOOGLE"));
	*(cast(void**)&vkGetRenderAreaGranularity) = vkGetInstanceProcAddr(instance, toStringz("vkGetRenderAreaGranularity"));
	*(cast(void**)&vkGetRenderingAreaGranularity) = vkGetInstanceProcAddr(instance, toStringz("vkGetRenderingAreaGranularity"));
	*(cast(void**)&vkGetRenderingAreaGranularityKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetRenderingAreaGranularityKHR"));
	*(cast(void**)&vkGetSamplerOpaqueCaptureDescriptorDataEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetSamplerOpaqueCaptureDescriptorDataEXT"));
	*(cast(void**)&vkGetSemaphoreCounterValue) = vkGetInstanceProcAddr(instance, toStringz("vkGetSemaphoreCounterValue"));
	*(cast(void**)&vkGetSemaphoreCounterValueKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetSemaphoreCounterValueKHR"));
	*(cast(void**)&vkGetSemaphoreFdKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetSemaphoreFdKHR"));
	*(cast(void**)&vkGetSemaphoreWin32HandleKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetSemaphoreWin32HandleKHR"));
	*(cast(void**)&vkGetShaderBinaryDataEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetShaderBinaryDataEXT"));
	*(cast(void**)&vkGetShaderInfoAMD) = vkGetInstanceProcAddr(instance, toStringz("vkGetShaderInfoAMD"));
	*(cast(void**)&vkGetShaderModuleCreateInfoIdentifierEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetShaderModuleCreateInfoIdentifierEXT"));
	*(cast(void**)&vkGetShaderModuleIdentifierEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetShaderModuleIdentifierEXT"));
	*(cast(void**)&vkGetSwapchainCounterEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetSwapchainCounterEXT"));
	*(cast(void**)&vkGetSwapchainImagesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetSwapchainImagesKHR"));
	*(cast(void**)&vkGetSwapchainStatusKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetSwapchainStatusKHR"));
	*(cast(void**)&vkGetValidationCacheDataEXT) = vkGetInstanceProcAddr(instance, toStringz("vkGetValidationCacheDataEXT"));
	*(cast(void**)&vkGetVideoSessionMemoryRequirementsKHR) = vkGetInstanceProcAddr(instance, toStringz("vkGetVideoSessionMemoryRequirementsKHR"));
	*(cast(void**)&vkGetWinrtDisplayNV) = vkGetInstanceProcAddr(instance, toStringz("vkGetWinrtDisplayNV"));
	*(cast(void**)&vkImportFenceFdKHR) = vkGetInstanceProcAddr(instance, toStringz("vkImportFenceFdKHR"));
	*(cast(void**)&vkImportFenceWin32HandleKHR) = vkGetInstanceProcAddr(instance, toStringz("vkImportFenceWin32HandleKHR"));
	*(cast(void**)&vkImportSemaphoreFdKHR) = vkGetInstanceProcAddr(instance, toStringz("vkImportSemaphoreFdKHR"));
	*(cast(void**)&vkImportSemaphoreWin32HandleKHR) = vkGetInstanceProcAddr(instance, toStringz("vkImportSemaphoreWin32HandleKHR"));
	*(cast(void**)&vkInitializePerformanceApiINTEL) = vkGetInstanceProcAddr(instance, toStringz("vkInitializePerformanceApiINTEL"));
	*(cast(void**)&vkInvalidateMappedMemoryRanges) = vkGetInstanceProcAddr(instance, toStringz("vkInvalidateMappedMemoryRanges"));
	*(cast(void**)&vkLatencySleepNV) = vkGetInstanceProcAddr(instance, toStringz("vkLatencySleepNV"));
	*(cast(void**)&vkMapMemory) = vkGetInstanceProcAddr(instance, toStringz("vkMapMemory"));
	*(cast(void**)&vkMapMemory2) = vkGetInstanceProcAddr(instance, toStringz("vkMapMemory2"));
	*(cast(void**)&vkMapMemory2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkMapMemory2KHR"));
	*(cast(void**)&vkMergePipelineCaches) = vkGetInstanceProcAddr(instance, toStringz("vkMergePipelineCaches"));
	*(cast(void**)&vkMergeValidationCachesEXT) = vkGetInstanceProcAddr(instance, toStringz("vkMergeValidationCachesEXT"));
	*(cast(void**)&vkQueueBeginDebugUtilsLabelEXT) = vkGetInstanceProcAddr(instance, toStringz("vkQueueBeginDebugUtilsLabelEXT"));
	*(cast(void**)&vkQueueBindSparse) = vkGetInstanceProcAddr(instance, toStringz("vkQueueBindSparse"));
	*(cast(void**)&vkQueueEndDebugUtilsLabelEXT) = vkGetInstanceProcAddr(instance, toStringz("vkQueueEndDebugUtilsLabelEXT"));
	*(cast(void**)&vkQueueInsertDebugUtilsLabelEXT) = vkGetInstanceProcAddr(instance, toStringz("vkQueueInsertDebugUtilsLabelEXT"));
	*(cast(void**)&vkQueueNotifyOutOfBandNV) = vkGetInstanceProcAddr(instance, toStringz("vkQueueNotifyOutOfBandNV"));
	*(cast(void**)&vkQueuePresentKHR) = vkGetInstanceProcAddr(instance, toStringz("vkQueuePresentKHR"));
	*(cast(void**)&vkQueueSetPerformanceConfigurationINTEL) = vkGetInstanceProcAddr(instance, toStringz("vkQueueSetPerformanceConfigurationINTEL"));
	*(cast(void**)&vkQueueSubmit) = vkGetInstanceProcAddr(instance, toStringz("vkQueueSubmit"));
	*(cast(void**)&vkQueueSubmit2) = vkGetInstanceProcAddr(instance, toStringz("vkQueueSubmit2"));
	*(cast(void**)&vkQueueSubmit2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkQueueSubmit2KHR"));
	*(cast(void**)&vkQueueWaitIdle) = vkGetInstanceProcAddr(instance, toStringz("vkQueueWaitIdle"));
	*(cast(void**)&vkRegisterDeviceEventEXT) = vkGetInstanceProcAddr(instance, toStringz("vkRegisterDeviceEventEXT"));
	*(cast(void**)&vkRegisterDisplayEventEXT) = vkGetInstanceProcAddr(instance, toStringz("vkRegisterDisplayEventEXT"));
	*(cast(void**)&vkReleaseCapturedPipelineDataKHR) = vkGetInstanceProcAddr(instance, toStringz("vkReleaseCapturedPipelineDataKHR"));
	*(cast(void**)&vkReleaseDisplayEXT) = vkGetInstanceProcAddr(instance, toStringz("vkReleaseDisplayEXT"));
	*(cast(void**)&vkReleaseFullScreenExclusiveModeEXT) = vkGetInstanceProcAddr(instance, toStringz("vkReleaseFullScreenExclusiveModeEXT"));
	*(cast(void**)&vkReleasePerformanceConfigurationINTEL) = vkGetInstanceProcAddr(instance, toStringz("vkReleasePerformanceConfigurationINTEL"));
	*(cast(void**)&vkReleaseProfilingLockKHR) = vkGetInstanceProcAddr(instance, toStringz("vkReleaseProfilingLockKHR"));
	*(cast(void**)&vkReleaseSwapchainImagesEXT) = vkGetInstanceProcAddr(instance, toStringz("vkReleaseSwapchainImagesEXT"));
	*(cast(void**)&vkResetCommandBuffer) = vkGetInstanceProcAddr(instance, toStringz("vkResetCommandBuffer"));
	*(cast(void**)&vkResetCommandPool) = vkGetInstanceProcAddr(instance, toStringz("vkResetCommandPool"));
	*(cast(void**)&vkResetDescriptorPool) = vkGetInstanceProcAddr(instance, toStringz("vkResetDescriptorPool"));
	*(cast(void**)&vkResetEvent) = vkGetInstanceProcAddr(instance, toStringz("vkResetEvent"));
	*(cast(void**)&vkResetFences) = vkGetInstanceProcAddr(instance, toStringz("vkResetFences"));
	*(cast(void**)&vkResetQueryPool) = vkGetInstanceProcAddr(instance, toStringz("vkResetQueryPool"));
	*(cast(void**)&vkResetQueryPoolEXT) = vkGetInstanceProcAddr(instance, toStringz("vkResetQueryPoolEXT"));
	*(cast(void**)&vkSetDebugUtilsObjectNameEXT) = vkGetInstanceProcAddr(instance, toStringz("vkSetDebugUtilsObjectNameEXT"));
	*(cast(void**)&vkSetDebugUtilsObjectTagEXT) = vkGetInstanceProcAddr(instance, toStringz("vkSetDebugUtilsObjectTagEXT"));
	*(cast(void**)&vkSetDeviceMemoryPriorityEXT) = vkGetInstanceProcAddr(instance, toStringz("vkSetDeviceMemoryPriorityEXT"));
	*(cast(void**)&vkSetEvent) = vkGetInstanceProcAddr(instance, toStringz("vkSetEvent"));
	*(cast(void**)&vkSetHdrMetadataEXT) = vkGetInstanceProcAddr(instance, toStringz("vkSetHdrMetadataEXT"));
	*(cast(void**)&vkSetLatencyMarkerNV) = vkGetInstanceProcAddr(instance, toStringz("vkSetLatencyMarkerNV"));
	*(cast(void**)&vkSetLatencySleepModeNV) = vkGetInstanceProcAddr(instance, toStringz("vkSetLatencySleepModeNV"));
	*(cast(void**)&vkSetLocalDimmingAMD) = vkGetInstanceProcAddr(instance, toStringz("vkSetLocalDimmingAMD"));
	*(cast(void**)&vkSetPrivateData) = vkGetInstanceProcAddr(instance, toStringz("vkSetPrivateData"));
	*(cast(void**)&vkSetPrivateDataEXT) = vkGetInstanceProcAddr(instance, toStringz("vkSetPrivateDataEXT"));
	*(cast(void**)&vkSignalSemaphore) = vkGetInstanceProcAddr(instance, toStringz("vkSignalSemaphore"));
	*(cast(void**)&vkSignalSemaphoreKHR) = vkGetInstanceProcAddr(instance, toStringz("vkSignalSemaphoreKHR"));
	*(cast(void**)&vkSubmitDebugUtilsMessageEXT) = vkGetInstanceProcAddr(instance, toStringz("vkSubmitDebugUtilsMessageEXT"));
	*(cast(void**)&vkTransitionImageLayout) = vkGetInstanceProcAddr(instance, toStringz("vkTransitionImageLayout"));
	*(cast(void**)&vkTransitionImageLayoutEXT) = vkGetInstanceProcAddr(instance, toStringz("vkTransitionImageLayoutEXT"));
	*(cast(void**)&vkTrimCommandPool) = vkGetInstanceProcAddr(instance, toStringz("vkTrimCommandPool"));
	*(cast(void**)&vkTrimCommandPoolKHR) = vkGetInstanceProcAddr(instance, toStringz("vkTrimCommandPoolKHR"));
	*(cast(void**)&vkUninitializePerformanceApiINTEL) = vkGetInstanceProcAddr(instance, toStringz("vkUninitializePerformanceApiINTEL"));
	*(cast(void**)&vkUnmapMemory) = vkGetInstanceProcAddr(instance, toStringz("vkUnmapMemory"));
	*(cast(void**)&vkUnmapMemory2) = vkGetInstanceProcAddr(instance, toStringz("vkUnmapMemory2"));
	*(cast(void**)&vkUnmapMemory2KHR) = vkGetInstanceProcAddr(instance, toStringz("vkUnmapMemory2KHR"));
	*(cast(void**)&vkUpdateDescriptorSetWithTemplate) = vkGetInstanceProcAddr(instance, toStringz("vkUpdateDescriptorSetWithTemplate"));
	*(cast(void**)&vkUpdateDescriptorSetWithTemplateKHR) = vkGetInstanceProcAddr(instance, toStringz("vkUpdateDescriptorSetWithTemplateKHR"));
	*(cast(void**)&vkUpdateDescriptorSets) = vkGetInstanceProcAddr(instance, toStringz("vkUpdateDescriptorSets"));
	*(cast(void**)&vkUpdateIndirectExecutionSetPipelineEXT) = vkGetInstanceProcAddr(instance, toStringz("vkUpdateIndirectExecutionSetPipelineEXT"));
	*(cast(void**)&vkUpdateIndirectExecutionSetShaderEXT) = vkGetInstanceProcAddr(instance, toStringz("vkUpdateIndirectExecutionSetShaderEXT"));
	*(cast(void**)&vkUpdateVideoSessionParametersKHR) = vkGetInstanceProcAddr(instance, toStringz("vkUpdateVideoSessionParametersKHR"));
	*(cast(void**)&vkWaitForFences) = vkGetInstanceProcAddr(instance, toStringz("vkWaitForFences"));
	*(cast(void**)&vkWaitForPresentKHR) = vkGetInstanceProcAddr(instance, toStringz("vkWaitForPresentKHR"));
	*(cast(void**)&vkWaitSemaphores) = vkGetInstanceProcAddr(instance, toStringz("vkWaitSemaphores"));
	*(cast(void**)&vkWaitSemaphoresKHR) = vkGetInstanceProcAddr(instance, toStringz("vkWaitSemaphoresKHR"));
	*(cast(void**)&vkWriteAccelerationStructuresPropertiesKHR) = vkGetInstanceProcAddr(instance, toStringz("vkWriteAccelerationStructuresPropertiesKHR"));
	*(cast(void**)&vkWriteMicromapsPropertiesEXT) = vkGetInstanceProcAddr(instance, toStringz("vkWriteMicromapsPropertiesEXT"));
}
// Aliases
alias BOOL = int;
alias BYTE = ubyte;
alias CCHAR = char;
alias CHAR = char;
alias DWORD = uint;
alias DWORD64 = ulong;
alias FLOAT = float;
alias FXPT2DOT30 = int;
alias HANDLE = void*;
alias HANDLE64 = void*;
alias HFILE = int;
alias HGDIOBJ = void*;
alias HPCON = void*;
alias HRESULT = int;
alias INT = int;
alias INT16 = short;
alias INT32 = int;
alias INT64 = long;
alias INT8 = char;
alias INT_PTR = long;
alias LONG = int;
alias LONG64 = long;
alias LONGLONG = long;
alias LONG_PTR = long;
alias LPCVOID = void*;
alias LPINT = int*;
alias LPLONG = int*;
alias LPVOID = void*;
alias MENUTEMPLATEA = void;
alias MENUTEMPLATEW = void;
alias PFN_vkVoidFunction = extern(Windows) void function() nothrow;
alias PUINT = uint*;
alias PUMS_COMPLETION_LIST = void*;
alias PUMS_CONTEXT = void*;
alias PVOID = void*;
alias PVOID64 = void*;
alias SHORT = short;
alias UCHAR = ubyte;
alias UCSCHAR = uint;
alias UINT = uint;
alias UINT16 = ushort;
alias UINT32 = uint;
alias UINT64 = ulong;
alias UINT8 = ubyte;
alias UINT_PTR = ulong;
alias ULONG = uint;
alias ULONG64 = ulong;
alias ULONGLONG = ulong;
alias ULONG_PTR = ulong;
alias USHORT = ushort;
alias VkAccelerationStructureCreateFlagsKHR = VkFlags;
alias VkAccelerationStructureKHR = VkAccelerationStructureKHR_T*;
alias VkAccelerationStructureMotionInfoFlagsNV = VkFlags;
alias VkAccelerationStructureMotionInstanceFlagsNV = VkFlags;
alias VkAccelerationStructureNV = VkAccelerationStructureNV_T*;
alias VkAccelerationStructureTypeNV = VkAccelerationStructureTypeKHR;
alias VkAccessFlags = VkFlags;
alias VkAccessFlags2 = VkFlags64;
alias VkAccessFlags3KHR = VkFlags64;
alias VkAcquireProfilingLockFlagsKHR = VkFlags;
alias VkAttachmentDescriptionFlags = VkFlags;
alias VkBool32 = uint32_t;
alias VkBuffer = VkBuffer_T*;
alias VkBufferCreateFlags = VkFlags;
alias VkBufferUsageFlags = VkFlags;
alias VkBufferUsageFlags2 = VkFlags64;
alias VkBufferView = VkBufferView_T*;
alias VkBufferViewCreateFlags = VkFlags;
alias VkBuildAccelerationStructureFlagsKHR = VkFlags;
alias VkBuildAccelerationStructureFlagsNV = VkBuildAccelerationStructureFlagsKHR;
alias VkBuildMicromapFlagsEXT = VkFlags;
alias VkClusterAccelerationStructureAddressResolutionFlagsNV = VkFlags;
alias VkClusterAccelerationStructureClusterFlagsNV = VkFlags;
alias VkColorComponentFlags = VkFlags;
alias VkCommandBuffer = VkCommandBuffer_T*;
alias VkCommandBufferResetFlags = VkFlags;
alias VkCommandBufferUsageFlags = VkFlags;
alias VkCommandPool = VkCommandPool_T*;
alias VkCommandPoolCreateFlags = VkFlags;
alias VkCommandPoolResetFlags = VkFlags;
alias VkCommandPoolTrimFlags = VkFlags;
alias VkComponentTypeNV = VkComponentTypeKHR;
alias VkCompositeAlphaFlagsKHR = VkFlags;
alias VkConditionalRenderingFlagsEXT = VkFlags;
alias VkCuFunctionNVX = VkCuFunctionNVX_T*;
alias VkCuModuleNVX = VkCuModuleNVX_T*;
alias VkCudaFunctionNV = VkCudaFunctionNV_T*;
alias VkCudaModuleNV = VkCudaModuleNV_T*;
alias VkCullModeFlags = VkFlags;
alias VkDebugReportCallbackEXT = VkDebugReportCallbackEXT_T*;
alias VkDebugReportFlagsEXT = VkFlags;
alias VkDebugUtilsMessageSeverityFlagsEXT = VkFlags;
alias VkDebugUtilsMessageTypeFlagsEXT = VkFlags;
alias VkDebugUtilsMessengerCallbackDataFlagsEXT = VkFlags;
alias VkDebugUtilsMessengerCreateFlagsEXT = VkFlags;
alias VkDebugUtilsMessengerEXT = VkDebugUtilsMessengerEXT_T*;
alias VkDeferredOperationKHR = VkDeferredOperationKHR_T*;
alias VkDependencyFlags = VkFlags;
alias VkDescriptorBindingFlags = VkFlags;
alias VkDescriptorPool = VkDescriptorPool_T*;
alias VkDescriptorPoolCreateFlags = VkFlags;
alias VkDescriptorPoolResetFlags = VkFlags;
alias VkDescriptorSet = VkDescriptorSet_T*;
alias VkDescriptorSetLayout = VkDescriptorSetLayout_T*;
alias VkDescriptorSetLayoutCreateFlags = VkFlags;
alias VkDescriptorUpdateTemplate = VkDescriptorUpdateTemplate_T*;
alias VkDescriptorUpdateTemplateCreateFlags = VkFlags;
alias VkDevice = VkDevice_T*;
alias VkDeviceAddress = uint64_t;
alias VkDeviceAddressBindingFlagsEXT = VkFlags;
alias VkDeviceCreateFlags = VkFlags;
alias VkDeviceDiagnosticsConfigFlagsNV = VkFlags;
alias VkDeviceGroupPresentModeFlagsKHR = VkFlags;
alias VkDeviceMemory = VkDeviceMemory_T*;
alias VkDeviceMemoryReportFlagsEXT = VkFlags;
alias VkDeviceQueueCreateFlags = VkFlags;
alias VkDeviceSize = uint64_t;
alias VkDirectDriverLoadingFlagsLUNARG = VkFlags;
alias VkDisplayKHR = VkDisplayKHR_T*;
alias VkDisplayModeCreateFlagsKHR = VkFlags;
alias VkDisplayModeKHR = VkDisplayModeKHR_T*;
alias VkDisplayPlaneAlphaFlagsKHR = VkFlags;
alias VkDisplaySurfaceCreateFlagsKHR = VkFlags;
alias VkEvent = VkEvent_T*;
alias VkEventCreateFlags = VkFlags;
alias VkExternalFenceFeatureFlags = VkFlags;
alias VkExternalFenceHandleTypeFlags = VkFlags;
alias VkExternalMemoryFeatureFlags = VkFlags;
alias VkExternalMemoryFeatureFlagsNV = VkFlags;
alias VkExternalMemoryHandleTypeFlags = VkFlags;
alias VkExternalMemoryHandleTypeFlagsNV = VkFlags;
alias VkExternalSemaphoreFeatureFlags = VkFlags;
alias VkExternalSemaphoreHandleTypeFlags = VkFlags;
alias VkFence = VkFence_T*;
alias VkFenceCreateFlags = VkFlags;
alias VkFenceImportFlags = VkFlags;
alias VkFlags = uint32_t;
alias VkFlags64 = uint64_t;
alias VkFormatFeatureFlags = VkFlags;
alias VkFormatFeatureFlags2 = VkFlags64;
alias VkFrameBoundaryFlagsEXT = VkFlags;
alias VkFramebuffer = VkFramebuffer_T*;
alias VkFramebufferCreateFlags = VkFlags;
alias VkGeometryFlagsKHR = VkFlags;
alias VkGeometryInstanceFlagsKHR = VkFlags;
alias VkGraphicsPipelineLibraryFlagsEXT = VkFlags;
alias VkHeadlessSurfaceCreateFlagsEXT = VkFlags;
alias VkHostImageCopyFlags = VkFlags;
alias VkImage = VkImage_T*;
alias VkImageAspectFlags = VkFlags;
alias VkImageCompressionFixedRateFlagsEXT = VkFlags;
alias VkImageCompressionFlagsEXT = VkFlags;
alias VkImageCreateFlags = VkFlags;
alias VkImageUsageFlags = VkFlags;
alias VkImageView = VkImageView_T*;
alias VkImageViewCreateFlags = VkFlags;
alias VkIndirectCommandsInputModeFlagsEXT = VkFlags;
alias VkIndirectCommandsLayoutEXT = VkIndirectCommandsLayoutEXT_T*;
alias VkIndirectCommandsLayoutNV = VkIndirectCommandsLayoutNV_T*;
alias VkIndirectCommandsLayoutUsageFlagsEXT = VkFlags;
alias VkIndirectCommandsLayoutUsageFlagsNV = VkFlags;
alias VkIndirectExecutionSetEXT = VkIndirectExecutionSetEXT_T*;
alias VkIndirectStateFlagsNV = VkFlags;
alias VkInstance = VkInstance_T*;
alias VkInstanceCreateFlags = VkFlags;
alias VkLineRasterizationModeEXT = VkLineRasterizationMode;
alias VkMemoryAllocateFlags = VkFlags;
alias VkMemoryDecompressionMethodFlagsNV = VkFlags64;
alias VkMemoryHeapFlags = VkFlags;
alias VkMemoryMapFlags = VkFlags;
alias VkMemoryPropertyFlags = VkFlags;
alias VkMemoryRequirements2KHR = VkMemoryRequirements2;
alias VkMemoryUnmapFlags = VkFlags;
alias VkMicromapCreateFlagsEXT = VkFlags;
alias VkMicromapEXT = VkMicromapEXT_T*;
alias VkOpticalFlowExecuteFlagsNV = VkFlags;
alias VkOpticalFlowGridSizeFlagsNV = VkFlags;
alias VkOpticalFlowSessionCreateFlagsNV = VkFlags;
alias VkOpticalFlowSessionNV = VkOpticalFlowSessionNV_T*;
alias VkOpticalFlowUsageFlagsNV = VkFlags;
alias VkPartitionedAccelerationStructureInstanceFlagsNV = VkFlags;
alias VkPeerMemoryFeatureFlags = VkFlags;
alias VkPerformanceConfigurationINTEL = VkPerformanceConfigurationINTEL_T*;
alias VkPerformanceCounterDescriptionFlagsKHR = VkFlags;
alias VkPhysicalDevice = VkPhysicalDevice_T*;
alias VkPhysicalDeviceSchedulingControlsFlagsARM = VkFlags64;
alias VkPipeline = VkPipeline_T*;
alias VkPipelineBinaryKHR = VkPipelineBinaryKHR_T*;
alias VkPipelineCache = VkPipelineCache_T*;
alias VkPipelineCacheCreateFlags = VkFlags;
alias VkPipelineColorBlendStateCreateFlags = VkFlags;
alias VkPipelineCompilerControlFlagsAMD = VkFlags;
alias VkPipelineCoverageModulationStateCreateFlagsNV = VkFlags;
alias VkPipelineCoverageReductionStateCreateFlagsNV = VkFlags;
alias VkPipelineCoverageToColorStateCreateFlagsNV = VkFlags;
alias VkPipelineCreateFlags = VkFlags;
alias VkPipelineCreateFlags2 = VkFlags64;
alias VkPipelineCreationFeedbackFlags = VkFlags;
alias VkPipelineDepthStencilStateCreateFlags = VkFlags;
alias VkPipelineDiscardRectangleStateCreateFlagsEXT = VkFlags;
alias VkPipelineDynamicStateCreateFlags = VkFlags;
alias VkPipelineInfoEXT = VkPipelineInfoKHR;
alias VkPipelineInputAssemblyStateCreateFlags = VkFlags;
alias VkPipelineLayout = VkPipelineLayout_T*;
alias VkPipelineLayoutCreateFlags = VkFlags;
alias VkPipelineMultisampleStateCreateFlags = VkFlags;
alias VkPipelineRasterizationConservativeStateCreateFlagsEXT = VkFlags;
alias VkPipelineRasterizationDepthClipStateCreateFlagsEXT = VkFlags;
alias VkPipelineRasterizationStateCreateFlags = VkFlags;
alias VkPipelineRasterizationStateStreamCreateFlagsEXT = VkFlags;
alias VkPipelineShaderStageCreateFlags = VkFlags;
alias VkPipelineStageFlags = VkFlags;
alias VkPipelineStageFlags2 = VkFlags64;
alias VkPipelineTessellationStateCreateFlags = VkFlags;
alias VkPipelineVertexInputStateCreateFlags = VkFlags;
alias VkPipelineViewportStateCreateFlags = VkFlags;
alias VkPipelineViewportSwizzleStateCreateFlagsNV = VkFlags;
alias VkPresentGravityFlagsEXT = VkFlags;
alias VkPresentScalingFlagsEXT = VkFlags;
alias VkPrivateDataSlot = VkPrivateDataSlot_T*;
alias VkPrivateDataSlotCreateFlags = VkFlags;
alias VkQueryControlFlags = VkFlags;
alias VkQueryPipelineStatisticFlags = VkFlags;
alias VkQueryPool = VkQueryPool_T*;
alias VkQueryPoolCreateFlags = VkFlags;
alias VkQueryResultFlags = VkFlags;
alias VkQueue = VkQueue_T*;
alias VkQueueFlags = VkFlags;
alias VkRemoteAddressNV = void*;
alias VkRenderPass = VkRenderPass_T*;
alias VkRenderPassCreateFlags = VkFlags;
alias VkRenderingFlags = VkFlags;
alias VkResolveModeFlags = VkFlags;
alias VkSampleCountFlags = VkFlags;
alias VkSampleMask = uint32_t;
alias VkSampler = VkSampler_T*;
alias VkSamplerCreateFlags = VkFlags;
alias VkSamplerYcbcrConversion = VkSamplerYcbcrConversion_T*;
alias VkScopeNV = VkScopeKHR;
alias VkSemaphore = VkSemaphore_T*;
alias VkSemaphoreCreateFlags = VkFlags;
alias VkSemaphoreImportFlags = VkFlags;
alias VkSemaphoreWaitFlags = VkFlags;
alias VkShaderCorePropertiesFlagsAMD = VkFlags;
alias VkShaderCreateFlagsEXT = VkFlags;
alias VkShaderEXT = VkShaderEXT_T*;
alias VkShaderModule = VkShaderModule_T*;
alias VkShaderModuleCreateFlags = VkFlags;
alias VkShaderStageFlags = VkFlags;
alias VkSparseImageFormatFlags = VkFlags;
alias VkSparseMemoryBindFlags = VkFlags;
alias VkStencilFaceFlags = VkFlags;
alias VkSubgroupFeatureFlags = VkFlags;
alias VkSubmitFlags = VkFlags;
alias VkSubpassDescriptionFlags = VkFlags;
alias VkSurfaceCounterFlagsEXT = VkFlags;
alias VkSurfaceKHR = VkSurfaceKHR_T*;
alias VkSurfaceTransformFlagsKHR = VkFlags;
alias VkSwapchainCreateFlagsKHR = VkFlags;
alias VkSwapchainKHR = VkSwapchainKHR_T*;
alias VkToolPurposeFlags = VkFlags;
alias VkValidationCacheCreateFlagsEXT = VkFlags;
alias VkValidationCacheEXT = VkValidationCacheEXT_T*;
alias VkVideoBeginCodingFlagsKHR = VkFlags;
alias VkVideoCapabilityFlagsKHR = VkFlags;
alias VkVideoChromaSubsamplingFlagsKHR = VkFlags;
alias VkVideoCodecOperationFlagsKHR = VkFlags;
alias VkVideoCodingControlFlagsKHR = VkFlags;
alias VkVideoComponentBitDepthFlagsKHR = VkFlags;
alias VkVideoDecodeCapabilityFlagsKHR = VkFlags;
alias VkVideoDecodeFlagsKHR = VkFlags;
alias VkVideoDecodeUsageFlagsKHR = VkFlags;
alias VkVideoEncodeAV1CapabilityFlagsKHR = VkFlags;
alias VkVideoEncodeAV1RateControlFlagsKHR = VkFlags;
alias VkVideoEncodeAV1StdFlagsKHR = VkFlags;
alias VkVideoEncodeAV1SuperblockSizeFlagsKHR = VkFlags;
alias VkVideoEncodeCapabilityFlagsKHR = VkFlags;
alias VkVideoEncodeContentFlagsKHR = VkFlags;
alias VkVideoEncodeFeedbackFlagsKHR = VkFlags;
alias VkVideoEncodeFlagsKHR = VkFlags;
alias VkVideoEncodeH264CapabilityFlagsKHR = VkFlags;
alias VkVideoEncodeH264RateControlFlagsKHR = VkFlags;
alias VkVideoEncodeH264StdFlagsKHR = VkFlags;
alias VkVideoEncodeH265CapabilityFlagsKHR = VkFlags;
alias VkVideoEncodeH265CtbSizeFlagsKHR = VkFlags;
alias VkVideoEncodeH265RateControlFlagsKHR = VkFlags;
alias VkVideoEncodeH265StdFlagsKHR = VkFlags;
alias VkVideoEncodeH265TransformBlockSizeFlagsKHR = VkFlags;
alias VkVideoEncodeRateControlFlagsKHR = VkFlags;
alias VkVideoEncodeRateControlModeFlagsKHR = VkFlags;
alias VkVideoEncodeUsageFlagsKHR = VkFlags;
alias VkVideoEndCodingFlagsKHR = VkFlags;
alias VkVideoSessionCreateFlagsKHR = VkFlags;
alias VkVideoSessionKHR = VkVideoSessionKHR_T*;
alias VkVideoSessionParametersCreateFlagsKHR = VkFlags;
alias VkVideoSessionParametersKHR = VkVideoSessionParametersKHR_T*;
alias VkWin32SurfaceCreateFlagsKHR = VkFlags;
alias WORD = ushort;
alias __time64_t = long;
alias errno_t = int;
alias int16_t = short;
alias int32_t = int;
alias int64_t = long;
alias int8_t = char;
alias size_t = ulong;
alias uint16_t = ushort;
alias uint32_t = uint;
alias uint64_t = ulong;
alias uint8_t = ubyte;
alias uintptr_t = ulong;
alias va_list = immutable(char)*;
alias wchar_t = ushort;
alias wctype_t = ushort;
alias wint_t = ushort;
alias PFN_vkAcquireDrmDisplayEXT = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, int32_t drmFd, VkDisplayKHR display) nothrow;
alias PFN_vkAcquireFullScreenExclusiveModeEXT = extern(Windows) VkResult function(VkDevice device, VkSwapchainKHR swapchain) nothrow;
alias PFN_vkAcquireNextImage2KHR = extern(Windows) VkResult function(VkDevice device, VkAcquireNextImageInfoKHR* pAcquireInfo, uint32_t* pImageIndex) nothrow;
alias PFN_vkAcquireNextImageKHR = extern(Windows) VkResult function(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t* pImageIndex) nothrow;
alias PFN_vkAcquirePerformanceConfigurationINTEL = extern(Windows) VkResult function(VkDevice device, VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo, VkPerformanceConfigurationINTEL* pConfiguration) nothrow;
alias PFN_vkAcquireProfilingLockKHR = extern(Windows) VkResult function(VkDevice device, VkAcquireProfilingLockInfoKHR* pInfo) nothrow;
alias PFN_vkAcquireWinrtDisplayNV = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, VkDisplayKHR display) nothrow;
alias PFN_vkAllocateCommandBuffers = extern(Windows) VkResult function(VkDevice device, VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers) nothrow;
alias PFN_vkAllocateDescriptorSets = extern(Windows) VkResult function(VkDevice device, VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets) nothrow;
alias PFN_vkAllocateMemory = extern(Windows) VkResult function(VkDevice device, VkMemoryAllocateInfo* pAllocateInfo, VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory) nothrow;
alias PFN_vkAllocationFunction = extern(Windows) void* function(void* pUserData, size_t size, size_t alignment, VkSystemAllocationScope allocationScope) nothrow;
alias PFN_vkAntiLagUpdateAMD = extern(Windows) void function(VkDevice device, VkAntiLagDataAMD* pData) nothrow;
alias PFN_vkBeginCommandBuffer = extern(Windows) VkResult function(VkCommandBuffer commandBuffer, VkCommandBufferBeginInfo* pBeginInfo) nothrow;
alias PFN_vkBindAccelerationStructureMemoryNV = extern(Windows) VkResult function(VkDevice device, uint32_t bindInfoCount, VkBindAccelerationStructureMemoryInfoNV* pBindInfos) nothrow;
alias PFN_vkBindBufferMemory = extern(Windows) VkResult function(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset) nothrow;
alias PFN_vkBindBufferMemory2 = extern(Windows) VkResult function(VkDevice device, uint32_t bindInfoCount, VkBindBufferMemoryInfo* pBindInfos) nothrow;
alias PFN_vkBindBufferMemory2KHR = extern(Windows) VkResult function(VkDevice device, uint32_t bindInfoCount, VkBindBufferMemoryInfo* pBindInfos) nothrow;
alias PFN_vkBindImageMemory = extern(Windows) VkResult function(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset) nothrow;
alias PFN_vkBindImageMemory2 = extern(Windows) VkResult function(VkDevice device, uint32_t bindInfoCount, VkBindImageMemoryInfo* pBindInfos) nothrow;
alias PFN_vkBindImageMemory2KHR = extern(Windows) VkResult function(VkDevice device, uint32_t bindInfoCount, VkBindImageMemoryInfo* pBindInfos) nothrow;
alias PFN_vkBindOpticalFlowSessionImageNV = extern(Windows) VkResult function(VkDevice device, VkOpticalFlowSessionNV session, VkOpticalFlowSessionBindingPointNV bindingPoint, VkImageView view, VkImageLayout layout) nothrow;
alias PFN_vkBindVideoSessionMemoryKHR = extern(Windows) VkResult function(VkDevice device, VkVideoSessionKHR videoSession, uint32_t bindSessionMemoryInfoCount, VkBindVideoSessionMemoryInfoKHR* pBindSessionMemoryInfos) nothrow;
alias PFN_vkBuildAccelerationStructuresKHR = extern(Windows) VkResult function(VkDevice device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount, VkAccelerationStructureBuildGeometryInfoKHR* pInfos, VkAccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos) nothrow;
alias PFN_vkBuildMicromapsEXT = extern(Windows) VkResult function(VkDevice device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount, VkMicromapBuildInfoEXT* pInfos) nothrow;
alias PFN_vkCmdBeginConditionalRenderingEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin) nothrow;
alias PFN_vkCmdBeginDebugUtilsLabelEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT* pLabelInfo) nothrow;
alias PFN_vkCmdBeginQuery = extern(Windows) void function(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags) nothrow;
alias PFN_vkCmdBeginQueryIndexedEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags, uint32_t index) nothrow;
alias PFN_vkCmdBeginRenderPass = extern(Windows) void function(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents) nothrow;
alias PFN_vkCmdBeginRenderPass2 = extern(Windows) void function(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassBeginInfo* pSubpassBeginInfo) nothrow;
alias PFN_vkCmdBeginRenderPass2KHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassBeginInfo* pSubpassBeginInfo) nothrow;
alias PFN_vkCmdBeginRendering = extern(Windows) void function(VkCommandBuffer commandBuffer, VkRenderingInfo* pRenderingInfo) nothrow;
alias PFN_vkCmdBeginRenderingKHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkRenderingInfo* pRenderingInfo) nothrow;
alias PFN_vkCmdBeginTransformFeedbackEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, VkBuffer* pCounterBuffers, VkDeviceSize* pCounterBufferOffsets) nothrow;
alias PFN_vkCmdBeginVideoCodingKHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkVideoBeginCodingInfoKHR* pBeginInfo) nothrow;
alias PFN_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBindDescriptorBufferEmbeddedSamplersInfoEXT* pBindDescriptorBufferEmbeddedSamplersInfo) nothrow;
alias PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set) nothrow;
alias PFN_vkCmdBindDescriptorBuffersEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t bufferCount, VkDescriptorBufferBindingInfoEXT* pBindingInfos) nothrow;
alias PFN_vkCmdBindDescriptorSets = extern(Windows) void function(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, VkDescriptorSet* pDescriptorSets, uint32_t dynamicOffsetCount, uint32_t* pDynamicOffsets) nothrow;
alias PFN_vkCmdBindDescriptorSets2 = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBindDescriptorSetsInfo* pBindDescriptorSetsInfo) nothrow;
alias PFN_vkCmdBindDescriptorSets2KHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBindDescriptorSetsInfo* pBindDescriptorSetsInfo) nothrow;
alias PFN_vkCmdBindIndexBuffer = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType) nothrow;
alias PFN_vkCmdBindIndexBuffer2 = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkDeviceSize size, VkIndexType indexType) nothrow;
alias PFN_vkCmdBindIndexBuffer2KHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkDeviceSize size, VkIndexType indexType) nothrow;
alias PFN_vkCmdBindInvocationMaskHUAWEI = extern(Windows) void function(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout) nothrow;
alias PFN_vkCmdBindPipeline = extern(Windows) void function(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline) nothrow;
alias PFN_vkCmdBindPipelineShaderGroupNV = extern(Windows) void function(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline, uint32_t groupIndex) nothrow;
alias PFN_vkCmdBindShadersEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t stageCount, VkShaderStageFlagBits* pStages, VkShaderEXT* pShaders) nothrow;
alias PFN_vkCmdBindShadingRateImageNV = extern(Windows) void function(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout) nothrow;
alias PFN_vkCmdBindTransformFeedbackBuffersEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets, VkDeviceSize* pSizes) nothrow;
alias PFN_vkCmdBindVertexBuffers = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets) nothrow;
alias PFN_vkCmdBindVertexBuffers2 = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets, VkDeviceSize* pSizes, VkDeviceSize* pStrides) nothrow;
alias PFN_vkCmdBindVertexBuffers2EXT = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets, VkDeviceSize* pSizes, VkDeviceSize* pStrides) nothrow;
alias PFN_vkCmdBlitImage = extern(Windows) void function(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageBlit* pRegions, VkFilter filter) nothrow;
alias PFN_vkCmdBlitImage2 = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBlitImageInfo2* pBlitImageInfo) nothrow;
alias PFN_vkCmdBlitImage2KHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBlitImageInfo2* pBlitImageInfo) nothrow;
alias PFN_vkCmdBuildAccelerationStructureNV = extern(Windows) void function(VkCommandBuffer commandBuffer, VkAccelerationStructureInfoNV* pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset) nothrow;
alias PFN_vkCmdBuildAccelerationStructuresIndirectKHR = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t infoCount, VkAccelerationStructureBuildGeometryInfoKHR* pInfos, VkDeviceAddress* pIndirectDeviceAddresses, uint32_t* pIndirectStrides, uint32_t** ppMaxPrimitiveCounts) nothrow;
alias PFN_vkCmdBuildAccelerationStructuresKHR = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t infoCount, VkAccelerationStructureBuildGeometryInfoKHR* pInfos, VkAccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos) nothrow;
alias PFN_vkCmdBuildClusterAccelerationStructureIndirectNV = extern(Windows) void function(VkCommandBuffer commandBuffer, VkClusterAccelerationStructureCommandsInfoNV* pCommandInfos) nothrow;
alias PFN_vkCmdBuildMicromapsEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t infoCount, VkMicromapBuildInfoEXT* pInfos) nothrow;
alias PFN_vkCmdBuildPartitionedAccelerationStructuresNV = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBuildPartitionedAccelerationStructureInfoNV* pBuildInfo) nothrow;
alias PFN_vkCmdClearAttachments = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t attachmentCount, VkClearAttachment* pAttachments, uint32_t rectCount, VkClearRect* pRects) nothrow;
alias PFN_vkCmdClearColorImage = extern(Windows) void function(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue* pColor, uint32_t rangeCount, VkImageSubresourceRange* pRanges) nothrow;
alias PFN_vkCmdClearDepthStencilImage = extern(Windows) void function(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue* pDepthStencil, uint32_t rangeCount, VkImageSubresourceRange* pRanges) nothrow;
alias PFN_vkCmdControlVideoCodingKHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkVideoCodingControlInfoKHR* pCodingControlInfo) nothrow;
alias PFN_vkCmdConvertCooperativeVectorMatrixNV = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t infoCount, VkConvertCooperativeVectorMatrixInfoNV* pInfos) nothrow;
alias PFN_vkCmdCopyAccelerationStructureKHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkCopyAccelerationStructureInfoKHR* pInfo) nothrow;
alias PFN_vkCmdCopyAccelerationStructureNV = extern(Windows) void function(VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeKHR mode) nothrow;
alias PFN_vkCmdCopyAccelerationStructureToMemoryKHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkCopyAccelerationStructureToMemoryInfoKHR* pInfo) nothrow;
alias PFN_vkCmdCopyBuffer = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, VkBufferCopy* pRegions) nothrow;
alias PFN_vkCmdCopyBuffer2 = extern(Windows) void function(VkCommandBuffer commandBuffer, VkCopyBufferInfo2* pCopyBufferInfo) nothrow;
alias PFN_vkCmdCopyBuffer2KHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkCopyBufferInfo2* pCopyBufferInfo) nothrow;
alias PFN_vkCmdCopyBufferToImage = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkBufferImageCopy* pRegions) nothrow;
alias PFN_vkCmdCopyBufferToImage2 = extern(Windows) void function(VkCommandBuffer commandBuffer, VkCopyBufferToImageInfo2* pCopyBufferToImageInfo) nothrow;
alias PFN_vkCmdCopyBufferToImage2KHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkCopyBufferToImageInfo2* pCopyBufferToImageInfo) nothrow;
alias PFN_vkCmdCopyImage = extern(Windows) void function(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageCopy* pRegions) nothrow;
alias PFN_vkCmdCopyImage2 = extern(Windows) void function(VkCommandBuffer commandBuffer, VkCopyImageInfo2* pCopyImageInfo) nothrow;
alias PFN_vkCmdCopyImage2KHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkCopyImageInfo2* pCopyImageInfo) nothrow;
alias PFN_vkCmdCopyImageToBuffer = extern(Windows) void function(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, VkBufferImageCopy* pRegions) nothrow;
alias PFN_vkCmdCopyImageToBuffer2 = extern(Windows) void function(VkCommandBuffer commandBuffer, VkCopyImageToBufferInfo2* pCopyImageToBufferInfo) nothrow;
alias PFN_vkCmdCopyImageToBuffer2KHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkCopyImageToBufferInfo2* pCopyImageToBufferInfo) nothrow;
alias PFN_vkCmdCopyMemoryIndirectNV = extern(Windows) void function(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32_t copyCount, uint32_t stride) nothrow;
alias PFN_vkCmdCopyMemoryToAccelerationStructureKHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkCopyMemoryToAccelerationStructureInfoKHR* pInfo) nothrow;
alias PFN_vkCmdCopyMemoryToImageIndirectNV = extern(Windows) void function(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32_t copyCount, uint32_t stride, VkImage dstImage, VkImageLayout dstImageLayout, VkImageSubresourceLayers* pImageSubresources) nothrow;
alias PFN_vkCmdCopyMemoryToMicromapEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkCopyMemoryToMicromapInfoEXT* pInfo) nothrow;
alias PFN_vkCmdCopyMicromapEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkCopyMicromapInfoEXT* pInfo) nothrow;
alias PFN_vkCmdCopyMicromapToMemoryEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkCopyMicromapToMemoryInfoEXT* pInfo) nothrow;
alias PFN_vkCmdCopyQueryPoolResults = extern(Windows) void function(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags) nothrow;
alias PFN_vkCmdCuLaunchKernelNVX = extern(Windows) void function(VkCommandBuffer commandBuffer, VkCuLaunchInfoNVX* pLaunchInfo) nothrow;
alias PFN_vkCmdCudaLaunchKernelNV = extern(Windows) void function(VkCommandBuffer commandBuffer, VkCudaLaunchInfoNV* pLaunchInfo) nothrow;
alias PFN_vkCmdDebugMarkerBeginEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT* pMarkerInfo) nothrow;
alias PFN_vkCmdDebugMarkerEndEXT = extern(Windows) void function(VkCommandBuffer commandBuffer) nothrow;
alias PFN_vkCmdDebugMarkerInsertEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT* pMarkerInfo) nothrow;
alias PFN_vkCmdDecodeVideoKHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkVideoDecodeInfoKHR* pDecodeInfo) nothrow;
alias PFN_vkCmdDecompressMemoryIndirectCountNV = extern(Windows) void function(VkCommandBuffer commandBuffer, VkDeviceAddress indirectCommandsAddress, VkDeviceAddress indirectCommandsCountAddress, uint32_t stride) nothrow;
alias PFN_vkCmdDecompressMemoryNV = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t decompressRegionCount, VkDecompressMemoryRegionNV* pDecompressMemoryRegions) nothrow;
alias PFN_vkCmdDispatch = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) nothrow;
alias PFN_vkCmdDispatchBase = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) nothrow;
alias PFN_vkCmdDispatchBaseKHR = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) nothrow;
alias PFN_vkCmdDispatchIndirect = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset) nothrow;
alias PFN_vkCmdDraw = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) nothrow;
alias PFN_vkCmdDrawClusterHUAWEI = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) nothrow;
alias PFN_vkCmdDrawClusterIndirectHUAWEI = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset) nothrow;
alias PFN_vkCmdDrawIndexed = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance) nothrow;
alias PFN_vkCmdDrawIndexedIndirect = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) nothrow;
alias PFN_vkCmdDrawIndexedIndirectCount = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) nothrow;
alias PFN_vkCmdDrawIndexedIndirectCountAMD = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) nothrow;
alias PFN_vkCmdDrawIndexedIndirectCountKHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) nothrow;
alias PFN_vkCmdDrawIndirect = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) nothrow;
alias PFN_vkCmdDrawIndirectByteCountEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t instanceCount, uint32_t firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint32_t counterOffset, uint32_t vertexStride) nothrow;
alias PFN_vkCmdDrawIndirectCount = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) nothrow;
alias PFN_vkCmdDrawIndirectCountAMD = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) nothrow;
alias PFN_vkCmdDrawIndirectCountKHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) nothrow;
alias PFN_vkCmdDrawMeshTasksEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) nothrow;
alias PFN_vkCmdDrawMeshTasksIndirectCountEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) nothrow;
alias PFN_vkCmdDrawMeshTasksIndirectCountNV = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) nothrow;
alias PFN_vkCmdDrawMeshTasksIndirectEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) nothrow;
alias PFN_vkCmdDrawMeshTasksIndirectNV = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) nothrow;
alias PFN_vkCmdDrawMeshTasksNV = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t taskCount, uint32_t firstTask) nothrow;
alias PFN_vkCmdDrawMultiEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t drawCount, VkMultiDrawInfoEXT* pVertexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride) nothrow;
alias PFN_vkCmdDrawMultiIndexedEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t drawCount, VkMultiDrawIndexedInfoEXT* pIndexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride, int32_t* pVertexOffset) nothrow;
alias PFN_vkCmdEncodeVideoKHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkVideoEncodeInfoKHR* pEncodeInfo) nothrow;
alias PFN_vkCmdEndConditionalRenderingEXT = extern(Windows) void function(VkCommandBuffer commandBuffer) nothrow;
alias PFN_vkCmdEndDebugUtilsLabelEXT = extern(Windows) void function(VkCommandBuffer commandBuffer) nothrow;
alias PFN_vkCmdEndQuery = extern(Windows) void function(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query) nothrow;
alias PFN_vkCmdEndQueryIndexedEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, uint32_t index) nothrow;
alias PFN_vkCmdEndRenderPass = extern(Windows) void function(VkCommandBuffer commandBuffer) nothrow;
alias PFN_vkCmdEndRenderPass2 = extern(Windows) void function(VkCommandBuffer commandBuffer, VkSubpassEndInfo* pSubpassEndInfo) nothrow;
alias PFN_vkCmdEndRenderPass2KHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkSubpassEndInfo* pSubpassEndInfo) nothrow;
alias PFN_vkCmdEndRendering = extern(Windows) void function(VkCommandBuffer commandBuffer) nothrow;
alias PFN_vkCmdEndRenderingKHR = extern(Windows) void function(VkCommandBuffer commandBuffer) nothrow;
alias PFN_vkCmdEndTransformFeedbackEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, VkBuffer* pCounterBuffers, VkDeviceSize* pCounterBufferOffsets) nothrow;
alias PFN_vkCmdEndVideoCodingKHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkVideoEndCodingInfoKHR* pEndCodingInfo) nothrow;
alias PFN_vkCmdExecuteCommands = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, VkCommandBuffer* pCommandBuffers) nothrow;
alias PFN_vkCmdExecuteGeneratedCommandsEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, VkGeneratedCommandsInfoEXT* pGeneratedCommandsInfo) nothrow;
alias PFN_vkCmdExecuteGeneratedCommandsNV = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo) nothrow;
alias PFN_vkCmdFillBuffer = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data) nothrow;
alias PFN_vkCmdInsertDebugUtilsLabelEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT* pLabelInfo) nothrow;
alias PFN_vkCmdNextSubpass = extern(Windows) void function(VkCommandBuffer commandBuffer, VkSubpassContents contents) nothrow;
alias PFN_vkCmdNextSubpass2 = extern(Windows) void function(VkCommandBuffer commandBuffer, VkSubpassBeginInfo* pSubpassBeginInfo, VkSubpassEndInfo* pSubpassEndInfo) nothrow;
alias PFN_vkCmdNextSubpass2KHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkSubpassBeginInfo* pSubpassBeginInfo, VkSubpassEndInfo* pSubpassEndInfo) nothrow;
alias PFN_vkCmdOpticalFlowExecuteNV = extern(Windows) void function(VkCommandBuffer commandBuffer, VkOpticalFlowSessionNV session, VkOpticalFlowExecuteInfoNV* pExecuteInfo) nothrow;
alias PFN_vkCmdPipelineBarrier = extern(Windows) void function(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers) nothrow;
alias PFN_vkCmdPipelineBarrier2 = extern(Windows) void function(VkCommandBuffer commandBuffer, VkDependencyInfo* pDependencyInfo) nothrow;
alias PFN_vkCmdPipelineBarrier2KHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkDependencyInfo* pDependencyInfo) nothrow;
alias PFN_vkCmdPreprocessGeneratedCommandsEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkGeneratedCommandsInfoEXT* pGeneratedCommandsInfo, VkCommandBuffer stateCommandBuffer) nothrow;
alias PFN_vkCmdPreprocessGeneratedCommandsNV = extern(Windows) void function(VkCommandBuffer commandBuffer, VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo) nothrow;
alias PFN_vkCmdPushConstants = extern(Windows) void function(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, void* pValues) nothrow;
alias PFN_vkCmdPushConstants2 = extern(Windows) void function(VkCommandBuffer commandBuffer, VkPushConstantsInfo* pPushConstantsInfo) nothrow;
alias PFN_vkCmdPushConstants2KHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkPushConstantsInfo* pPushConstantsInfo) nothrow;
alias PFN_vkCmdPushDescriptorSet = extern(Windows) void function(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites) nothrow;
alias PFN_vkCmdPushDescriptorSet2 = extern(Windows) void function(VkCommandBuffer commandBuffer, VkPushDescriptorSetInfo* pPushDescriptorSetInfo) nothrow;
alias PFN_vkCmdPushDescriptorSet2KHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkPushDescriptorSetInfo* pPushDescriptorSetInfo) nothrow;
alias PFN_vkCmdPushDescriptorSetKHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites) nothrow;
alias PFN_vkCmdPushDescriptorSetWithTemplate = extern(Windows) void function(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, void* pData) nothrow;
alias PFN_vkCmdPushDescriptorSetWithTemplate2 = extern(Windows) void function(VkCommandBuffer commandBuffer, VkPushDescriptorSetWithTemplateInfo* pPushDescriptorSetWithTemplateInfo) nothrow;
alias PFN_vkCmdPushDescriptorSetWithTemplate2KHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkPushDescriptorSetWithTemplateInfo* pPushDescriptorSetWithTemplateInfo) nothrow;
alias PFN_vkCmdPushDescriptorSetWithTemplateKHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, void* pData) nothrow;
alias PFN_vkCmdResetEvent = extern(Windows) void function(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask) nothrow;
alias PFN_vkCmdResetEvent2 = extern(Windows) void function(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask) nothrow;
alias PFN_vkCmdResetEvent2KHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask) nothrow;
alias PFN_vkCmdResetQueryPool = extern(Windows) void function(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) nothrow;
alias PFN_vkCmdResolveImage = extern(Windows) void function(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageResolve* pRegions) nothrow;
alias PFN_vkCmdResolveImage2 = extern(Windows) void function(VkCommandBuffer commandBuffer, VkResolveImageInfo2* pResolveImageInfo) nothrow;
alias PFN_vkCmdResolveImage2KHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkResolveImageInfo2* pResolveImageInfo) nothrow;
alias PFN_vkCmdSetAlphaToCoverageEnableEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 alphaToCoverageEnable) nothrow;
alias PFN_vkCmdSetAlphaToOneEnableEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 alphaToOneEnable) nothrow;
alias PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkImageAspectFlags aspectMask) nothrow;
alias PFN_vkCmdSetBlendConstants = extern(Windows) void function(VkCommandBuffer commandBuffer, ref float[4] blendConstants) nothrow;
alias PFN_vkCmdSetCheckpointNV = extern(Windows) void function(VkCommandBuffer commandBuffer, void* pCheckpointMarker) nothrow;
alias PFN_vkCmdSetCoarseSampleOrderNV = extern(Windows) void function(VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint32_t customSampleOrderCount, VkCoarseSampleOrderCustomNV* pCustomSampleOrders) nothrow;
alias PFN_vkCmdSetColorBlendAdvancedEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, VkColorBlendAdvancedEXT* pColorBlendAdvanced) nothrow;
alias PFN_vkCmdSetColorBlendEnableEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, VkBool32* pColorBlendEnables) nothrow;
alias PFN_vkCmdSetColorBlendEquationEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, VkColorBlendEquationEXT* pColorBlendEquations) nothrow;
alias PFN_vkCmdSetColorWriteEnableEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t attachmentCount, VkBool32* pColorWriteEnables) nothrow;
alias PFN_vkCmdSetColorWriteMaskEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, VkColorComponentFlags* pColorWriteMasks) nothrow;
alias PFN_vkCmdSetConservativeRasterizationModeEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkConservativeRasterizationModeEXT conservativeRasterizationMode) nothrow;
alias PFN_vkCmdSetCoverageModulationModeNV = extern(Windows) void function(VkCommandBuffer commandBuffer, VkCoverageModulationModeNV coverageModulationMode) nothrow;
alias PFN_vkCmdSetCoverageModulationTableEnableNV = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 coverageModulationTableEnable) nothrow;
alias PFN_vkCmdSetCoverageModulationTableNV = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t coverageModulationTableCount, float* pCoverageModulationTable) nothrow;
alias PFN_vkCmdSetCoverageReductionModeNV = extern(Windows) void function(VkCommandBuffer commandBuffer, VkCoverageReductionModeNV coverageReductionMode) nothrow;
alias PFN_vkCmdSetCoverageToColorEnableNV = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 coverageToColorEnable) nothrow;
alias PFN_vkCmdSetCoverageToColorLocationNV = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t coverageToColorLocation) nothrow;
alias PFN_vkCmdSetCullMode = extern(Windows) void function(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode) nothrow;
alias PFN_vkCmdSetCullModeEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode) nothrow;
alias PFN_vkCmdSetDepthBias = extern(Windows) void function(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor) nothrow;
alias PFN_vkCmdSetDepthBias2EXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkDepthBiasInfoEXT* pDepthBiasInfo) nothrow;
alias PFN_vkCmdSetDepthBiasEnable = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable) nothrow;
alias PFN_vkCmdSetDepthBiasEnableEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable) nothrow;
alias PFN_vkCmdSetDepthBounds = extern(Windows) void function(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds) nothrow;
alias PFN_vkCmdSetDepthBoundsTestEnable = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable) nothrow;
alias PFN_vkCmdSetDepthBoundsTestEnableEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable) nothrow;
alias PFN_vkCmdSetDepthClampEnableEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 depthClampEnable) nothrow;
alias PFN_vkCmdSetDepthClampRangeEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkDepthClampModeEXT depthClampMode, VkDepthClampRangeEXT* pDepthClampRange) nothrow;
alias PFN_vkCmdSetDepthClipEnableEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 depthClipEnable) nothrow;
alias PFN_vkCmdSetDepthClipNegativeOneToOneEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 negativeOneToOne) nothrow;
alias PFN_vkCmdSetDepthCompareOp = extern(Windows) void function(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp) nothrow;
alias PFN_vkCmdSetDepthCompareOpEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp) nothrow;
alias PFN_vkCmdSetDepthTestEnable = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable) nothrow;
alias PFN_vkCmdSetDepthTestEnableEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable) nothrow;
alias PFN_vkCmdSetDepthWriteEnable = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable) nothrow;
alias PFN_vkCmdSetDepthWriteEnableEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable) nothrow;
alias PFN_vkCmdSetDescriptorBufferOffsets2EXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkSetDescriptorBufferOffsetsInfoEXT* pSetDescriptorBufferOffsetsInfo) nothrow;
alias PFN_vkCmdSetDescriptorBufferOffsetsEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t setCount, uint32_t* pBufferIndices, VkDeviceSize* pOffsets) nothrow;
alias PFN_vkCmdSetDeviceMask = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t deviceMask) nothrow;
alias PFN_vkCmdSetDeviceMaskKHR = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t deviceMask) nothrow;
alias PFN_vkCmdSetDiscardRectangleEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t firstDiscardRectangle, uint32_t discardRectangleCount, VkRect2D* pDiscardRectangles) nothrow;
alias PFN_vkCmdSetDiscardRectangleEnableEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 discardRectangleEnable) nothrow;
alias PFN_vkCmdSetDiscardRectangleModeEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkDiscardRectangleModeEXT discardRectangleMode) nothrow;
alias PFN_vkCmdSetEvent = extern(Windows) void function(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask) nothrow;
alias PFN_vkCmdSetEvent2 = extern(Windows) void function(VkCommandBuffer commandBuffer, VkEvent event, VkDependencyInfo* pDependencyInfo) nothrow;
alias PFN_vkCmdSetEvent2KHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkEvent event, VkDependencyInfo* pDependencyInfo) nothrow;
alias PFN_vkCmdSetExclusiveScissorEnableNV = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, VkBool32* pExclusiveScissorEnables) nothrow;
alias PFN_vkCmdSetExclusiveScissorNV = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, VkRect2D* pExclusiveScissors) nothrow;
alias PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, float extraPrimitiveOverestimationSize) nothrow;
alias PFN_vkCmdSetFragmentShadingRateEnumNV = extern(Windows) void function(VkCommandBuffer commandBuffer, VkFragmentShadingRateNV shadingRate, ref VkFragmentShadingRateCombinerOpKHR[2] combinerOps) nothrow;
alias PFN_vkCmdSetFragmentShadingRateKHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkExtent2D* pFragmentSize, ref VkFragmentShadingRateCombinerOpKHR[2] combinerOps) nothrow;
alias PFN_vkCmdSetFrontFace = extern(Windows) void function(VkCommandBuffer commandBuffer, VkFrontFace frontFace) nothrow;
alias PFN_vkCmdSetFrontFaceEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkFrontFace frontFace) nothrow;
alias PFN_vkCmdSetLineRasterizationModeEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkLineRasterizationModeEXT lineRasterizationMode) nothrow;
alias PFN_vkCmdSetLineStipple = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern) nothrow;
alias PFN_vkCmdSetLineStippleEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern) nothrow;
alias PFN_vkCmdSetLineStippleEnableEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 stippledLineEnable) nothrow;
alias PFN_vkCmdSetLineStippleKHR = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern) nothrow;
alias PFN_vkCmdSetLineWidth = extern(Windows) void function(VkCommandBuffer commandBuffer, float lineWidth) nothrow;
alias PFN_vkCmdSetLogicOpEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkLogicOp logicOp) nothrow;
alias PFN_vkCmdSetLogicOpEnableEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 logicOpEnable) nothrow;
alias PFN_vkCmdSetPatchControlPointsEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t patchControlPoints) nothrow;
alias PFN_vkCmdSetPerformanceMarkerINTEL = extern(Windows) VkResult function(VkCommandBuffer commandBuffer, VkPerformanceMarkerInfoINTEL* pMarkerInfo) nothrow;
alias PFN_vkCmdSetPerformanceOverrideINTEL = extern(Windows) VkResult function(VkCommandBuffer commandBuffer, VkPerformanceOverrideInfoINTEL* pOverrideInfo) nothrow;
alias PFN_vkCmdSetPerformanceStreamMarkerINTEL = extern(Windows) VkResult function(VkCommandBuffer commandBuffer, VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo) nothrow;
alias PFN_vkCmdSetPolygonModeEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkPolygonMode polygonMode) nothrow;
alias PFN_vkCmdSetPrimitiveRestartEnable = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable) nothrow;
alias PFN_vkCmdSetPrimitiveRestartEnableEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable) nothrow;
alias PFN_vkCmdSetPrimitiveTopology = extern(Windows) void function(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology) nothrow;
alias PFN_vkCmdSetPrimitiveTopologyEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology) nothrow;
alias PFN_vkCmdSetProvokingVertexModeEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkProvokingVertexModeEXT provokingVertexMode) nothrow;
alias PFN_vkCmdSetRasterizationSamplesEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkSampleCountFlagBits rasterizationSamples) nothrow;
alias PFN_vkCmdSetRasterizationStreamEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t rasterizationStream) nothrow;
alias PFN_vkCmdSetRasterizerDiscardEnable = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable) nothrow;
alias PFN_vkCmdSetRasterizerDiscardEnableEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable) nothrow;
alias PFN_vkCmdSetRayTracingPipelineStackSizeKHR = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t pipelineStackSize) nothrow;
alias PFN_vkCmdSetRenderingAttachmentLocations = extern(Windows) void function(VkCommandBuffer commandBuffer, VkRenderingAttachmentLocationInfo* pLocationInfo) nothrow;
alias PFN_vkCmdSetRenderingAttachmentLocationsKHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkRenderingAttachmentLocationInfo* pLocationInfo) nothrow;
alias PFN_vkCmdSetRenderingInputAttachmentIndices = extern(Windows) void function(VkCommandBuffer commandBuffer, VkRenderingInputAttachmentIndexInfo* pInputAttachmentIndexInfo) nothrow;
alias PFN_vkCmdSetRenderingInputAttachmentIndicesKHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkRenderingInputAttachmentIndexInfo* pInputAttachmentIndexInfo) nothrow;
alias PFN_vkCmdSetRepresentativeFragmentTestEnableNV = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 representativeFragmentTestEnable) nothrow;
alias PFN_vkCmdSetSampleLocationsEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkSampleLocationsInfoEXT* pSampleLocationsInfo) nothrow;
alias PFN_vkCmdSetSampleLocationsEnableEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 sampleLocationsEnable) nothrow;
alias PFN_vkCmdSetSampleMaskEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkSampleCountFlagBits samples, VkSampleMask* pSampleMask) nothrow;
alias PFN_vkCmdSetScissor = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, VkRect2D* pScissors) nothrow;
alias PFN_vkCmdSetScissorWithCount = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t scissorCount, VkRect2D* pScissors) nothrow;
alias PFN_vkCmdSetScissorWithCountEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t scissorCount, VkRect2D* pScissors) nothrow;
alias PFN_vkCmdSetShadingRateImageEnableNV = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 shadingRateImageEnable) nothrow;
alias PFN_vkCmdSetStencilCompareMask = extern(Windows) void function(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask) nothrow;
alias PFN_vkCmdSetStencilOp = extern(Windows) void function(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp) nothrow;
alias PFN_vkCmdSetStencilOpEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp) nothrow;
alias PFN_vkCmdSetStencilReference = extern(Windows) void function(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference) nothrow;
alias PFN_vkCmdSetStencilTestEnable = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable) nothrow;
alias PFN_vkCmdSetStencilTestEnableEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable) nothrow;
alias PFN_vkCmdSetStencilWriteMask = extern(Windows) void function(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask) nothrow;
alias PFN_vkCmdSetTessellationDomainOriginEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, VkTessellationDomainOrigin domainOrigin) nothrow;
alias PFN_vkCmdSetVertexInputEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t vertexBindingDescriptionCount, VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions, uint32_t vertexAttributeDescriptionCount, VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions) nothrow;
alias PFN_vkCmdSetViewport = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, VkViewport* pViewports) nothrow;
alias PFN_vkCmdSetViewportShadingRatePaletteNV = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, VkShadingRatePaletteNV* pShadingRatePalettes) nothrow;
alias PFN_vkCmdSetViewportSwizzleNV = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, VkViewportSwizzleNV* pViewportSwizzles) nothrow;
alias PFN_vkCmdSetViewportWScalingEnableNV = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBool32 viewportWScalingEnable) nothrow;
alias PFN_vkCmdSetViewportWScalingNV = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, VkViewportWScalingNV* pViewportWScalings) nothrow;
alias PFN_vkCmdSetViewportWithCount = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t viewportCount, VkViewport* pViewports) nothrow;
alias PFN_vkCmdSetViewportWithCountEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t viewportCount, VkViewport* pViewports) nothrow;
alias PFN_vkCmdSubpassShadingHUAWEI = extern(Windows) void function(VkCommandBuffer commandBuffer) nothrow;
alias PFN_vkCmdTraceRaysIndirect2KHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkDeviceAddress indirectDeviceAddress) nothrow;
alias PFN_vkCmdTraceRaysIndirectKHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, VkDeviceAddress indirectDeviceAddress) nothrow;
alias PFN_vkCmdTraceRaysKHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, uint32_t width, uint32_t height, uint32_t depth) nothrow;
alias PFN_vkCmdTraceRaysNV = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32_t width, uint32_t height, uint32_t depth) nothrow;
alias PFN_vkCmdUpdateBuffer = extern(Windows) void function(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, void* pData) nothrow;
alias PFN_vkCmdUpdatePipelineIndirectBufferNV = extern(Windows) void function(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline) nothrow;
alias PFN_vkCmdWaitEvents = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t eventCount, VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers) nothrow;
alias PFN_vkCmdWaitEvents2 = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t eventCount, VkEvent* pEvents, VkDependencyInfo* pDependencyInfos) nothrow;
alias PFN_vkCmdWaitEvents2KHR = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t eventCount, VkEvent* pEvents, VkDependencyInfo* pDependencyInfos) nothrow;
alias PFN_vkCmdWriteAccelerationStructuresPropertiesKHR = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery) nothrow;
alias PFN_vkCmdWriteAccelerationStructuresPropertiesNV = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, VkAccelerationStructureNV* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery) nothrow;
alias PFN_vkCmdWriteBufferMarker2AMD = extern(Windows) void function(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker) nothrow;
alias PFN_vkCmdWriteBufferMarkerAMD = extern(Windows) void function(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker) nothrow;
alias PFN_vkCmdWriteMicromapsPropertiesEXT = extern(Windows) void function(VkCommandBuffer commandBuffer, uint32_t micromapCount, VkMicromapEXT* pMicromaps, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery) nothrow;
alias PFN_vkCmdWriteTimestamp = extern(Windows) void function(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query) nothrow;
alias PFN_vkCmdWriteTimestamp2 = extern(Windows) void function(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query) nothrow;
alias PFN_vkCmdWriteTimestamp2KHR = extern(Windows) void function(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query) nothrow;
alias PFN_vkCompileDeferredNV = extern(Windows) VkResult function(VkDevice device, VkPipeline pipeline, uint32_t shader) nothrow;
alias PFN_vkConvertCooperativeVectorMatrixNV = extern(Windows) VkResult function(VkDevice device, VkConvertCooperativeVectorMatrixInfoNV* pInfo) nothrow;
alias PFN_vkCopyAccelerationStructureKHR = extern(Windows) VkResult function(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyAccelerationStructureInfoKHR* pInfo) nothrow;
alias PFN_vkCopyAccelerationStructureToMemoryKHR = extern(Windows) VkResult function(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyAccelerationStructureToMemoryInfoKHR* pInfo) nothrow;
alias PFN_vkCopyImageToImage = extern(Windows) VkResult function(VkDevice device, VkCopyImageToImageInfo* pCopyImageToImageInfo) nothrow;
alias PFN_vkCopyImageToImageEXT = extern(Windows) VkResult function(VkDevice device, VkCopyImageToImageInfo* pCopyImageToImageInfo) nothrow;
alias PFN_vkCopyImageToMemory = extern(Windows) VkResult function(VkDevice device, VkCopyImageToMemoryInfo* pCopyImageToMemoryInfo) nothrow;
alias PFN_vkCopyImageToMemoryEXT = extern(Windows) VkResult function(VkDevice device, VkCopyImageToMemoryInfo* pCopyImageToMemoryInfo) nothrow;
alias PFN_vkCopyMemoryToAccelerationStructureKHR = extern(Windows) VkResult function(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyMemoryToAccelerationStructureInfoKHR* pInfo) nothrow;
alias PFN_vkCopyMemoryToImage = extern(Windows) VkResult function(VkDevice device, VkCopyMemoryToImageInfo* pCopyMemoryToImageInfo) nothrow;
alias PFN_vkCopyMemoryToImageEXT = extern(Windows) VkResult function(VkDevice device, VkCopyMemoryToImageInfo* pCopyMemoryToImageInfo) nothrow;
alias PFN_vkCopyMemoryToMicromapEXT = extern(Windows) VkResult function(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyMemoryToMicromapInfoEXT* pInfo) nothrow;
alias PFN_vkCopyMicromapEXT = extern(Windows) VkResult function(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyMicromapInfoEXT* pInfo) nothrow;
alias PFN_vkCopyMicromapToMemoryEXT = extern(Windows) VkResult function(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyMicromapToMemoryInfoEXT* pInfo) nothrow;
alias PFN_vkCreateAccelerationStructureKHR = extern(Windows) VkResult function(VkDevice device, VkAccelerationStructureCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkAccelerationStructureKHR* pAccelerationStructure) nothrow;
alias PFN_vkCreateAccelerationStructureNV = extern(Windows) VkResult function(VkDevice device, VkAccelerationStructureCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, VkAccelerationStructureNV* pAccelerationStructure) nothrow;
alias PFN_vkCreateBuffer = extern(Windows) VkResult function(VkDevice device, VkBufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer) nothrow;
alias PFN_vkCreateBufferView = extern(Windows) VkResult function(VkDevice device, VkBufferViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkBufferView* pView) nothrow;
alias PFN_vkCreateCommandPool = extern(Windows) VkResult function(VkDevice device, VkCommandPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool) nothrow;
alias PFN_vkCreateComputePipelines = extern(Windows) VkResult function(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, VkComputePipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) nothrow;
alias PFN_vkCreateCuFunctionNVX = extern(Windows) VkResult function(VkDevice device, VkCuFunctionCreateInfoNVX* pCreateInfo, VkAllocationCallbacks* pAllocator, VkCuFunctionNVX* pFunction) nothrow;
alias PFN_vkCreateCuModuleNVX = extern(Windows) VkResult function(VkDevice device, VkCuModuleCreateInfoNVX* pCreateInfo, VkAllocationCallbacks* pAllocator, VkCuModuleNVX* pModule) nothrow;
alias PFN_vkCreateCudaFunctionNV = extern(Windows) VkResult function(VkDevice device, VkCudaFunctionCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, VkCudaFunctionNV* pFunction) nothrow;
alias PFN_vkCreateCudaModuleNV = extern(Windows) VkResult function(VkDevice device, VkCudaModuleCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, VkCudaModuleNV* pModule) nothrow;
alias PFN_vkCreateDebugReportCallbackEXT = extern(Windows) VkResult function(VkInstance instance, VkDebugReportCallbackCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDebugReportCallbackEXT* pCallback) nothrow;
alias PFN_vkCreateDebugUtilsMessengerEXT = extern(Windows) VkResult function(VkInstance instance, VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDebugUtilsMessengerEXT* pMessenger) nothrow;
alias PFN_vkCreateDeferredOperationKHR = extern(Windows) VkResult function(VkDevice device, VkAllocationCallbacks* pAllocator, VkDeferredOperationKHR* pDeferredOperation) nothrow;
alias PFN_vkCreateDescriptorPool = extern(Windows) VkResult function(VkDevice device, VkDescriptorPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool) nothrow;
alias PFN_vkCreateDescriptorSetLayout = extern(Windows) VkResult function(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout) nothrow;
alias PFN_vkCreateDescriptorUpdateTemplate = extern(Windows) VkResult function(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate) nothrow;
alias PFN_vkCreateDescriptorUpdateTemplateKHR = extern(Windows) VkResult function(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate) nothrow;
alias PFN_vkCreateDevice = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDevice* pDevice) nothrow;
alias PFN_vkCreateDisplayModeKHR = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, VkDisplayKHR display, VkDisplayModeCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDisplayModeKHR* pMode) nothrow;
alias PFN_vkCreateDisplayPlaneSurfaceKHR = extern(Windows) VkResult function(VkInstance instance, VkDisplaySurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) nothrow;
alias PFN_vkCreateEvent = extern(Windows) VkResult function(VkDevice device, VkEventCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkEvent* pEvent) nothrow;
alias PFN_vkCreateFence = extern(Windows) VkResult function(VkDevice device, VkFenceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkFence* pFence) nothrow;
alias PFN_vkCreateFramebuffer = extern(Windows) VkResult function(VkDevice device, VkFramebufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer) nothrow;
alias PFN_vkCreateGraphicsPipelines = extern(Windows) VkResult function(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, VkGraphicsPipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) nothrow;
alias PFN_vkCreateHeadlessSurfaceEXT = extern(Windows) VkResult function(VkInstance instance, VkHeadlessSurfaceCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) nothrow;
alias PFN_vkCreateImage = extern(Windows) VkResult function(VkDevice device, VkImageCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkImage* pImage) nothrow;
alias PFN_vkCreateImageView = extern(Windows) VkResult function(VkDevice device, VkImageViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkImageView* pView) nothrow;
alias PFN_vkCreateIndirectCommandsLayoutEXT = extern(Windows) VkResult function(VkDevice device, VkIndirectCommandsLayoutCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkIndirectCommandsLayoutEXT* pIndirectCommandsLayout) nothrow;
alias PFN_vkCreateIndirectCommandsLayoutNV = extern(Windows) VkResult function(VkDevice device, VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, VkIndirectCommandsLayoutNV* pIndirectCommandsLayout) nothrow;
alias PFN_vkCreateIndirectExecutionSetEXT = extern(Windows) VkResult function(VkDevice device, VkIndirectExecutionSetCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkIndirectExecutionSetEXT* pIndirectExecutionSet) nothrow;
alias PFN_vkCreateInstance = extern(Windows) VkResult function(VkInstanceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkInstance* pInstance) nothrow;
alias PFN_vkCreateMicromapEXT = extern(Windows) VkResult function(VkDevice device, VkMicromapCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkMicromapEXT* pMicromap) nothrow;
alias PFN_vkCreateOpticalFlowSessionNV = extern(Windows) VkResult function(VkDevice device, VkOpticalFlowSessionCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, VkOpticalFlowSessionNV* pSession) nothrow;
alias PFN_vkCreatePipelineBinariesKHR = extern(Windows) VkResult function(VkDevice device, VkPipelineBinaryCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineBinaryHandlesInfoKHR* pBinaries) nothrow;
alias PFN_vkCreatePipelineCache = extern(Windows) VkResult function(VkDevice device, VkPipelineCacheCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache) nothrow;
alias PFN_vkCreatePipelineLayout = extern(Windows) VkResult function(VkDevice device, VkPipelineLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout) nothrow;
alias PFN_vkCreatePrivateDataSlot = extern(Windows) VkResult function(VkDevice device, VkPrivateDataSlotCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPrivateDataSlot* pPrivateDataSlot) nothrow;
alias PFN_vkCreatePrivateDataSlotEXT = extern(Windows) VkResult function(VkDevice device, VkPrivateDataSlotCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPrivateDataSlot* pPrivateDataSlot) nothrow;
alias PFN_vkCreateQueryPool = extern(Windows) VkResult function(VkDevice device, VkQueryPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool) nothrow;
alias PFN_vkCreateRayTracingPipelinesKHR = extern(Windows) VkResult function(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint32_t createInfoCount, VkRayTracingPipelineCreateInfoKHR* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) nothrow;
alias PFN_vkCreateRayTracingPipelinesNV = extern(Windows) VkResult function(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, VkRayTracingPipelineCreateInfoNV* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) nothrow;
alias PFN_vkCreateRenderPass = extern(Windows) VkResult function(VkDevice device, VkRenderPassCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass) nothrow;
alias PFN_vkCreateRenderPass2 = extern(Windows) VkResult function(VkDevice device, VkRenderPassCreateInfo2* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass) nothrow;
alias PFN_vkCreateRenderPass2KHR = extern(Windows) VkResult function(VkDevice device, VkRenderPassCreateInfo2* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass) nothrow;
alias PFN_vkCreateSampler = extern(Windows) VkResult function(VkDevice device, VkSamplerCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSampler* pSampler) nothrow;
alias PFN_vkCreateSamplerYcbcrConversion = extern(Windows) VkResult function(VkDevice device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion) nothrow;
alias PFN_vkCreateSamplerYcbcrConversionKHR = extern(Windows) VkResult function(VkDevice device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion) nothrow;
alias PFN_vkCreateSemaphore = extern(Windows) VkResult function(VkDevice device, VkSemaphoreCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore) nothrow;
alias PFN_vkCreateShaderModule = extern(Windows) VkResult function(VkDevice device, VkShaderModuleCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule) nothrow;
alias PFN_vkCreateShadersEXT = extern(Windows) VkResult function(VkDevice device, uint32_t createInfoCount, VkShaderCreateInfoEXT* pCreateInfos, VkAllocationCallbacks* pAllocator, VkShaderEXT* pShaders) nothrow;
alias PFN_vkCreateSharedSwapchainsKHR = extern(Windows) VkResult function(VkDevice device, uint32_t swapchainCount, VkSwapchainCreateInfoKHR* pCreateInfos, VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchains) nothrow;
alias PFN_vkCreateSwapchainKHR = extern(Windows) VkResult function(VkDevice device, VkSwapchainCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchain) nothrow;
alias PFN_vkCreateValidationCacheEXT = extern(Windows) VkResult function(VkDevice device, VkValidationCacheCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkValidationCacheEXT* pValidationCache) nothrow;
alias PFN_vkCreateVideoSessionKHR = extern(Windows) VkResult function(VkDevice device, VkVideoSessionCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkVideoSessionKHR* pVideoSession) nothrow;
alias PFN_vkCreateVideoSessionParametersKHR = extern(Windows) VkResult function(VkDevice device, VkVideoSessionParametersCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkVideoSessionParametersKHR* pVideoSessionParameters) nothrow;
alias PFN_vkCreateWin32SurfaceKHR = extern(Windows) VkResult function(VkInstance instance, VkWin32SurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) nothrow;
alias PFN_vkDebugMarkerSetObjectNameEXT = extern(Windows) VkResult function(VkDevice device, VkDebugMarkerObjectNameInfoEXT* pNameInfo) nothrow;
alias PFN_vkDebugMarkerSetObjectTagEXT = extern(Windows) VkResult function(VkDevice device, VkDebugMarkerObjectTagInfoEXT* pTagInfo) nothrow;
alias PFN_vkDebugReportCallbackEXT = extern(Windows) VkBool32 function(VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, immutable(char)* pLayerPrefix, immutable(char)* pMessage, void* pUserData) nothrow;
alias PFN_vkDebugReportMessageEXT = extern(Windows) void function(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, immutable(char)* pLayerPrefix, immutable(char)* pMessage) nothrow;
alias PFN_vkDebugUtilsMessengerCallbackEXT = extern(Windows) VkBool32 function(VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, VkDebugUtilsMessengerCallbackDataEXT* pCallbackData, void* pUserData) nothrow;
alias PFN_vkDeferredOperationJoinKHR = extern(Windows) VkResult function(VkDevice device, VkDeferredOperationKHR operation) nothrow;
alias PFN_vkDestroyAccelerationStructureKHR = extern(Windows) void function(VkDevice device, VkAccelerationStructureKHR accelerationStructure, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyAccelerationStructureNV = extern(Windows) void function(VkDevice device, VkAccelerationStructureNV accelerationStructure, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyBuffer = extern(Windows) void function(VkDevice device, VkBuffer buffer, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyBufferView = extern(Windows) void function(VkDevice device, VkBufferView bufferView, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyCommandPool = extern(Windows) void function(VkDevice device, VkCommandPool commandPool, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyCuFunctionNVX = extern(Windows) void function(VkDevice device, VkCuFunctionNVX function_, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyCuModuleNVX = extern(Windows) void function(VkDevice device, VkCuModuleNVX module_, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyCudaFunctionNV = extern(Windows) void function(VkDevice device, VkCudaFunctionNV function_, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyCudaModuleNV = extern(Windows) void function(VkDevice device, VkCudaModuleNV module_, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyDebugReportCallbackEXT = extern(Windows) void function(VkInstance instance, VkDebugReportCallbackEXT callback, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyDebugUtilsMessengerEXT = extern(Windows) void function(VkInstance instance, VkDebugUtilsMessengerEXT messenger, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyDeferredOperationKHR = extern(Windows) void function(VkDevice device, VkDeferredOperationKHR operation, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyDescriptorPool = extern(Windows) void function(VkDevice device, VkDescriptorPool descriptorPool, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyDescriptorSetLayout = extern(Windows) void function(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyDescriptorUpdateTemplate = extern(Windows) void function(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyDescriptorUpdateTemplateKHR = extern(Windows) void function(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyDevice = extern(Windows) void function(VkDevice device, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyEvent = extern(Windows) void function(VkDevice device, VkEvent event, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyFence = extern(Windows) void function(VkDevice device, VkFence fence, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyFramebuffer = extern(Windows) void function(VkDevice device, VkFramebuffer framebuffer, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyImage = extern(Windows) void function(VkDevice device, VkImage image, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyImageView = extern(Windows) void function(VkDevice device, VkImageView imageView, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyIndirectCommandsLayoutEXT = extern(Windows) void function(VkDevice device, VkIndirectCommandsLayoutEXT indirectCommandsLayout, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyIndirectCommandsLayoutNV = extern(Windows) void function(VkDevice device, VkIndirectCommandsLayoutNV indirectCommandsLayout, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyIndirectExecutionSetEXT = extern(Windows) void function(VkDevice device, VkIndirectExecutionSetEXT indirectExecutionSet, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyInstance = extern(Windows) void function(VkInstance instance, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyMicromapEXT = extern(Windows) void function(VkDevice device, VkMicromapEXT micromap, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyOpticalFlowSessionNV = extern(Windows) void function(VkDevice device, VkOpticalFlowSessionNV session, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyPipeline = extern(Windows) void function(VkDevice device, VkPipeline pipeline, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyPipelineBinaryKHR = extern(Windows) void function(VkDevice device, VkPipelineBinaryKHR pipelineBinary, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyPipelineCache = extern(Windows) void function(VkDevice device, VkPipelineCache pipelineCache, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyPipelineLayout = extern(Windows) void function(VkDevice device, VkPipelineLayout pipelineLayout, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyPrivateDataSlot = extern(Windows) void function(VkDevice device, VkPrivateDataSlot privateDataSlot, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyPrivateDataSlotEXT = extern(Windows) void function(VkDevice device, VkPrivateDataSlot privateDataSlot, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyQueryPool = extern(Windows) void function(VkDevice device, VkQueryPool queryPool, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyRenderPass = extern(Windows) void function(VkDevice device, VkRenderPass renderPass, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroySampler = extern(Windows) void function(VkDevice device, VkSampler sampler, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroySamplerYcbcrConversion = extern(Windows) void function(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroySamplerYcbcrConversionKHR = extern(Windows) void function(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroySemaphore = extern(Windows) void function(VkDevice device, VkSemaphore semaphore, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyShaderEXT = extern(Windows) void function(VkDevice device, VkShaderEXT shader, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyShaderModule = extern(Windows) void function(VkDevice device, VkShaderModule shaderModule, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroySurfaceKHR = extern(Windows) void function(VkInstance instance, VkSurfaceKHR surface, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroySwapchainKHR = extern(Windows) void function(VkDevice device, VkSwapchainKHR swapchain, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyValidationCacheEXT = extern(Windows) void function(VkDevice device, VkValidationCacheEXT validationCache, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyVideoSessionKHR = extern(Windows) void function(VkDevice device, VkVideoSessionKHR videoSession, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDestroyVideoSessionParametersKHR = extern(Windows) void function(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkDeviceMemoryReportCallbackEXT = extern(Windows) void function(VkDeviceMemoryReportCallbackDataEXT* pCallbackData, void* pUserData) nothrow;
alias PFN_vkDeviceWaitIdle = extern(Windows) VkResult function(VkDevice device) nothrow;
alias PFN_vkDisplayPowerControlEXT = extern(Windows) VkResult function(VkDevice device, VkDisplayKHR display, VkDisplayPowerInfoEXT* pDisplayPowerInfo) nothrow;
alias PFN_vkEndCommandBuffer = extern(Windows) VkResult function(VkCommandBuffer commandBuffer) nothrow;
alias PFN_vkEnumerateDeviceExtensionProperties = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, immutable(char)* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties) nothrow;
alias PFN_vkEnumerateDeviceLayerProperties = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkLayerProperties* pProperties) nothrow;
alias PFN_vkEnumerateInstanceExtensionProperties = extern(Windows) VkResult function(immutable(char)* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties) nothrow;
alias PFN_vkEnumerateInstanceLayerProperties = extern(Windows) VkResult function(uint32_t* pPropertyCount, VkLayerProperties* pProperties) nothrow;
alias PFN_vkEnumerateInstanceVersion = extern(Windows) VkResult function(uint32_t* pApiVersion) nothrow;
alias PFN_vkEnumeratePhysicalDeviceGroups = extern(Windows) VkResult function(VkInstance instance, uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties) nothrow;
alias PFN_vkEnumeratePhysicalDeviceGroupsKHR = extern(Windows) VkResult function(VkInstance instance, uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties) nothrow;
alias PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, uint32_t* pCounterCount, VkPerformanceCounterKHR* pCounters, VkPerformanceCounterDescriptionKHR* pCounterDescriptions) nothrow;
alias PFN_vkEnumeratePhysicalDevices = extern(Windows) VkResult function(VkInstance instance, uint32_t* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices) nothrow;
alias PFN_vkFlushMappedMemoryRanges = extern(Windows) VkResult function(VkDevice device, uint32_t memoryRangeCount, VkMappedMemoryRange* pMemoryRanges) nothrow;
alias PFN_vkFreeCommandBuffers = extern(Windows) void function(VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount, VkCommandBuffer* pCommandBuffers) nothrow;
alias PFN_vkFreeDescriptorSets = extern(Windows) VkResult function(VkDevice device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, VkDescriptorSet* pDescriptorSets) nothrow;
alias PFN_vkFreeFunction = extern(Windows) void function(void* pUserData, void* pMemory) nothrow;
alias PFN_vkFreeMemory = extern(Windows) void function(VkDevice device, VkDeviceMemory memory, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkGetAccelerationStructureBuildSizesKHR = extern(Windows) void function(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, VkAccelerationStructureBuildGeometryInfoKHR* pBuildInfo, uint32_t* pMaxPrimitiveCounts, VkAccelerationStructureBuildSizesInfoKHR* pSizeInfo) nothrow;
alias PFN_vkGetAccelerationStructureDeviceAddressKHR = extern(Windows) VkDeviceAddress function(VkDevice device, VkAccelerationStructureDeviceAddressInfoKHR* pInfo) nothrow;
alias PFN_vkGetAccelerationStructureHandleNV = extern(Windows) VkResult function(VkDevice device, VkAccelerationStructureNV accelerationStructure, size_t dataSize, void* pData) nothrow;
alias PFN_vkGetAccelerationStructureMemoryRequirementsNV = extern(Windows) void function(VkDevice device, VkAccelerationStructureMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements) nothrow;
alias PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = extern(Windows) VkResult function(VkDevice device, VkAccelerationStructureCaptureDescriptorDataInfoEXT* pInfo, void* pData) nothrow;
alias PFN_vkGetBufferDeviceAddress = extern(Windows) VkDeviceAddress function(VkDevice device, VkBufferDeviceAddressInfo* pInfo) nothrow;
alias PFN_vkGetBufferDeviceAddressEXT = extern(Windows) VkDeviceAddress function(VkDevice device, VkBufferDeviceAddressInfo* pInfo) nothrow;
alias PFN_vkGetBufferDeviceAddressKHR = extern(Windows) VkDeviceAddress function(VkDevice device, VkBufferDeviceAddressInfo* pInfo) nothrow;
alias PFN_vkGetBufferMemoryRequirements = extern(Windows) void function(VkDevice device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements) nothrow;
alias PFN_vkGetBufferMemoryRequirements2 = extern(Windows) void function(VkDevice device, VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements) nothrow;
alias PFN_vkGetBufferMemoryRequirements2KHR = extern(Windows) void function(VkDevice device, VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements) nothrow;
alias PFN_vkGetBufferOpaqueCaptureAddress = extern(Windows) uint64_t function(VkDevice device, VkBufferDeviceAddressInfo* pInfo) nothrow;
alias PFN_vkGetBufferOpaqueCaptureAddressKHR = extern(Windows) uint64_t function(VkDevice device, VkBufferDeviceAddressInfo* pInfo) nothrow;
alias PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT = extern(Windows) VkResult function(VkDevice device, VkBufferCaptureDescriptorDataInfoEXT* pInfo, void* pData) nothrow;
alias PFN_vkGetCalibratedTimestampsEXT = extern(Windows) VkResult function(VkDevice device, uint32_t timestampCount, VkCalibratedTimestampInfoKHR* pTimestampInfos, uint64_t* pTimestamps, uint64_t* pMaxDeviation) nothrow;
alias PFN_vkGetCalibratedTimestampsKHR = extern(Windows) VkResult function(VkDevice device, uint32_t timestampCount, VkCalibratedTimestampInfoKHR* pTimestampInfos, uint64_t* pTimestamps, uint64_t* pMaxDeviation) nothrow;
alias PFN_vkGetClusterAccelerationStructureBuildSizesNV = extern(Windows) void function(VkDevice device, VkClusterAccelerationStructureInputInfoNV* pInfo, VkAccelerationStructureBuildSizesInfoKHR* pSizeInfo) nothrow;
alias PFN_vkGetCudaModuleCacheNV = extern(Windows) VkResult function(VkDevice device, VkCudaModuleNV module_, size_t* pCacheSize, void* pCacheData) nothrow;
alias PFN_vkGetDeferredOperationMaxConcurrencyKHR = extern(Windows) uint32_t function(VkDevice device, VkDeferredOperationKHR operation) nothrow;
alias PFN_vkGetDeferredOperationResultKHR = extern(Windows) VkResult function(VkDevice device, VkDeferredOperationKHR operation) nothrow;
alias PFN_vkGetDescriptorEXT = extern(Windows) void function(VkDevice device, VkDescriptorGetInfoEXT* pDescriptorInfo, size_t dataSize, void* pDescriptor) nothrow;
alias PFN_vkGetDescriptorSetHostMappingVALVE = extern(Windows) void function(VkDevice device, VkDescriptorSet descriptorSet, void** ppData) nothrow;
alias PFN_vkGetDescriptorSetLayoutBindingOffsetEXT = extern(Windows) void function(VkDevice device, VkDescriptorSetLayout layout, uint32_t binding, VkDeviceSize* pOffset) nothrow;
alias PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE = extern(Windows) void function(VkDevice device, VkDescriptorSetBindingReferenceVALVE* pBindingReference, VkDescriptorSetLayoutHostMappingInfoVALVE* pHostMapping) nothrow;
alias PFN_vkGetDescriptorSetLayoutSizeEXT = extern(Windows) void function(VkDevice device, VkDescriptorSetLayout layout, VkDeviceSize* pLayoutSizeInBytes) nothrow;
alias PFN_vkGetDescriptorSetLayoutSupport = extern(Windows) void function(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport) nothrow;
alias PFN_vkGetDescriptorSetLayoutSupportKHR = extern(Windows) void function(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport) nothrow;
alias PFN_vkGetDeviceAccelerationStructureCompatibilityKHR = extern(Windows) void function(VkDevice device, VkAccelerationStructureVersionInfoKHR* pVersionInfo, VkAccelerationStructureCompatibilityKHR* pCompatibility) nothrow;
alias PFN_vkGetDeviceBufferMemoryRequirements = extern(Windows) void function(VkDevice device, VkDeviceBufferMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements) nothrow;
alias PFN_vkGetDeviceBufferMemoryRequirementsKHR = extern(Windows) void function(VkDevice device, VkDeviceBufferMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements) nothrow;
alias PFN_vkGetDeviceFaultInfoEXT = extern(Windows) VkResult function(VkDevice device, VkDeviceFaultCountsEXT* pFaultCounts, VkDeviceFaultInfoEXT* pFaultInfo) nothrow;
alias PFN_vkGetDeviceGroupPeerMemoryFeatures = extern(Windows) void function(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures) nothrow;
alias PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR = extern(Windows) void function(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures) nothrow;
alias PFN_vkGetDeviceGroupPresentCapabilitiesKHR = extern(Windows) VkResult function(VkDevice device, VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities) nothrow;
alias PFN_vkGetDeviceGroupSurfacePresentModes2EXT = extern(Windows) VkResult function(VkDevice device, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkDeviceGroupPresentModeFlagsKHR* pModes) nothrow;
alias PFN_vkGetDeviceGroupSurfacePresentModesKHR = extern(Windows) VkResult function(VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR* pModes) nothrow;
alias PFN_vkGetDeviceImageMemoryRequirements = extern(Windows) void function(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements) nothrow;
alias PFN_vkGetDeviceImageMemoryRequirementsKHR = extern(Windows) void function(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements) nothrow;
alias PFN_vkGetDeviceImageSparseMemoryRequirements = extern(Windows) void function(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements) nothrow;
alias PFN_vkGetDeviceImageSparseMemoryRequirementsKHR = extern(Windows) void function(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements) nothrow;
alias PFN_vkGetDeviceImageSubresourceLayout = extern(Windows) void function(VkDevice device, VkDeviceImageSubresourceInfo* pInfo, VkSubresourceLayout2* pLayout) nothrow;
alias PFN_vkGetDeviceImageSubresourceLayoutKHR = extern(Windows) void function(VkDevice device, VkDeviceImageSubresourceInfo* pInfo, VkSubresourceLayout2* pLayout) nothrow;
alias PFN_vkGetDeviceMemoryCommitment = extern(Windows) void function(VkDevice device, VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes) nothrow;
alias PFN_vkGetDeviceMemoryOpaqueCaptureAddress = extern(Windows) uint64_t function(VkDevice device, VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo) nothrow;
alias PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR = extern(Windows) uint64_t function(VkDevice device, VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo) nothrow;
alias PFN_vkGetDeviceMicromapCompatibilityEXT = extern(Windows) void function(VkDevice device, VkMicromapVersionInfoEXT* pVersionInfo, VkAccelerationStructureCompatibilityKHR* pCompatibility) nothrow;
alias PFN_vkGetDeviceProcAddr = extern(Windows) PFN_vkVoidFunction function(VkDevice device, immutable(char)* pName) nothrow;
alias PFN_vkGetDeviceQueue = extern(Windows) void function(VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue* pQueue) nothrow;
alias PFN_vkGetDeviceQueue2 = extern(Windows) void function(VkDevice device, VkDeviceQueueInfo2* pQueueInfo, VkQueue* pQueue) nothrow;
alias PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = extern(Windows) VkResult function(VkDevice device, VkRenderPass renderpass, VkExtent2D* pMaxWorkgroupSize) nothrow;
alias PFN_vkGetDisplayModeProperties2KHR = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModeProperties2KHR* pProperties) nothrow;
alias PFN_vkGetDisplayModePropertiesKHR = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModePropertiesKHR* pProperties) nothrow;
alias PFN_vkGetDisplayPlaneCapabilities2KHR = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR* pCapabilities) nothrow;
alias PFN_vkGetDisplayPlaneCapabilitiesKHR = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32_t planeIndex, VkDisplayPlaneCapabilitiesKHR* pCapabilities) nothrow;
alias PFN_vkGetDisplayPlaneSupportedDisplaysKHR = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, uint32_t planeIndex, uint32_t* pDisplayCount, VkDisplayKHR* pDisplays) nothrow;
alias PFN_vkGetDrmDisplayEXT = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, int32_t drmFd, uint32_t connectorId, VkDisplayKHR* display) nothrow;
alias PFN_vkGetDynamicRenderingTilePropertiesQCOM = extern(Windows) VkResult function(VkDevice device, VkRenderingInfo* pRenderingInfo, VkTilePropertiesQCOM* pProperties) nothrow;
alias PFN_vkGetEncodedVideoSessionParametersKHR = extern(Windows) VkResult function(VkDevice device, VkVideoEncodeSessionParametersGetInfoKHR* pVideoSessionParametersInfo, VkVideoEncodeSessionParametersFeedbackInfoKHR* pFeedbackInfo, size_t* pDataSize, void* pData) nothrow;
alias PFN_vkGetEventStatus = extern(Windows) VkResult function(VkDevice device, VkEvent event) nothrow;
alias PFN_vkGetFenceFdKHR = extern(Windows) VkResult function(VkDevice device, VkFenceGetFdInfoKHR* pGetFdInfo, int* pFd) nothrow;
alias PFN_vkGetFenceStatus = extern(Windows) VkResult function(VkDevice device, VkFence fence) nothrow;
alias PFN_vkGetFenceWin32HandleKHR = extern(Windows) VkResult function(VkDevice device, VkFenceGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle) nothrow;
alias PFN_vkGetFramebufferTilePropertiesQCOM = extern(Windows) VkResult function(VkDevice device, VkFramebuffer framebuffer, uint32_t* pPropertiesCount, VkTilePropertiesQCOM* pProperties) nothrow;
alias PFN_vkGetGeneratedCommandsMemoryRequirementsEXT = extern(Windows) void function(VkDevice device, VkGeneratedCommandsMemoryRequirementsInfoEXT* pInfo, VkMemoryRequirements2* pMemoryRequirements) nothrow;
alias PFN_vkGetGeneratedCommandsMemoryRequirementsNV = extern(Windows) void function(VkDevice device, VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2* pMemoryRequirements) nothrow;
alias PFN_vkGetImageDrmFormatModifierPropertiesEXT = extern(Windows) VkResult function(VkDevice device, VkImage image, VkImageDrmFormatModifierPropertiesEXT* pProperties) nothrow;
alias PFN_vkGetImageMemoryRequirements = extern(Windows) void function(VkDevice device, VkImage image, VkMemoryRequirements* pMemoryRequirements) nothrow;
alias PFN_vkGetImageMemoryRequirements2 = extern(Windows) void function(VkDevice device, VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements) nothrow;
alias PFN_vkGetImageMemoryRequirements2KHR = extern(Windows) void function(VkDevice device, VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements) nothrow;
alias PFN_vkGetImageOpaqueCaptureDescriptorDataEXT = extern(Windows) VkResult function(VkDevice device, VkImageCaptureDescriptorDataInfoEXT* pInfo, void* pData) nothrow;
alias PFN_vkGetImageSparseMemoryRequirements = extern(Windows) void function(VkDevice device, VkImage image, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements) nothrow;
alias PFN_vkGetImageSparseMemoryRequirements2 = extern(Windows) void function(VkDevice device, VkImageSparseMemoryRequirementsInfo2* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements) nothrow;
alias PFN_vkGetImageSparseMemoryRequirements2KHR = extern(Windows) void function(VkDevice device, VkImageSparseMemoryRequirementsInfo2* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements) nothrow;
alias PFN_vkGetImageSubresourceLayout = extern(Windows) void function(VkDevice device, VkImage image, VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout) nothrow;
alias PFN_vkGetImageSubresourceLayout2 = extern(Windows) void function(VkDevice device, VkImage image, VkImageSubresource2* pSubresource, VkSubresourceLayout2* pLayout) nothrow;
alias PFN_vkGetImageSubresourceLayout2EXT = extern(Windows) void function(VkDevice device, VkImage image, VkImageSubresource2* pSubresource, VkSubresourceLayout2* pLayout) nothrow;
alias PFN_vkGetImageSubresourceLayout2KHR = extern(Windows) void function(VkDevice device, VkImage image, VkImageSubresource2* pSubresource, VkSubresourceLayout2* pLayout) nothrow;
alias PFN_vkGetImageViewAddressNVX = extern(Windows) VkResult function(VkDevice device, VkImageView imageView, VkImageViewAddressPropertiesNVX* pProperties) nothrow;
alias PFN_vkGetImageViewHandle64NVX = extern(Windows) uint64_t function(VkDevice device, VkImageViewHandleInfoNVX* pInfo) nothrow;
alias PFN_vkGetImageViewHandleNVX = extern(Windows) uint32_t function(VkDevice device, VkImageViewHandleInfoNVX* pInfo) nothrow;
alias PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT = extern(Windows) VkResult function(VkDevice device, VkImageViewCaptureDescriptorDataInfoEXT* pInfo, void* pData) nothrow;
alias PFN_vkGetInstanceProcAddr = extern(Windows) PFN_vkVoidFunction function(VkInstance instance, immutable(char)* pName) nothrow;
alias PFN_vkGetInstanceProcAddrLUNARG = extern(Windows) PFN_vkVoidFunction function(VkInstance instance, immutable(char)* pName) nothrow;
alias PFN_vkGetLatencyTimingsNV = extern(Windows) void function(VkDevice device, VkSwapchainKHR swapchain, VkGetLatencyMarkerInfoNV* pLatencyMarkerInfo) nothrow;
alias PFN_vkGetMemoryFdKHR = extern(Windows) VkResult function(VkDevice device, VkMemoryGetFdInfoKHR* pGetFdInfo, int* pFd) nothrow;
alias PFN_vkGetMemoryFdPropertiesKHR = extern(Windows) VkResult function(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, int fd, VkMemoryFdPropertiesKHR* pMemoryFdProperties) nothrow;
alias PFN_vkGetMemoryHostPointerPropertiesEXT = extern(Windows) VkResult function(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, void* pHostPointer, VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties) nothrow;
alias PFN_vkGetMemoryRemoteAddressNV = extern(Windows) VkResult function(VkDevice device, VkMemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo, VkRemoteAddressNV* pAddress) nothrow;
alias PFN_vkGetMemoryWin32HandleKHR = extern(Windows) VkResult function(VkDevice device, VkMemoryGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle) nothrow;
alias PFN_vkGetMemoryWin32HandleNV = extern(Windows) VkResult function(VkDevice device, VkDeviceMemory memory, VkExternalMemoryHandleTypeFlagsNV handleType, HANDLE* pHandle) nothrow;
alias PFN_vkGetMemoryWin32HandlePropertiesKHR = extern(Windows) VkResult function(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, HANDLE handle, VkMemoryWin32HandlePropertiesKHR* pMemoryWin32HandleProperties) nothrow;
alias PFN_vkGetMicromapBuildSizesEXT = extern(Windows) void function(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, VkMicromapBuildInfoEXT* pBuildInfo, VkMicromapBuildSizesInfoEXT* pSizeInfo) nothrow;
alias PFN_vkGetPartitionedAccelerationStructuresBuildSizesNV = extern(Windows) void function(VkDevice device, VkPartitionedAccelerationStructureInstancesInputNV* pInfo, VkAccelerationStructureBuildSizesInfoKHR* pSizeInfo) nothrow;
alias PFN_vkGetPastPresentationTimingGOOGLE = extern(Windows) VkResult function(VkDevice device, VkSwapchainKHR swapchain, uint32_t* pPresentationTimingCount, VkPastPresentationTimingGOOGLE* pPresentationTimings) nothrow;
alias PFN_vkGetPerformanceParameterINTEL = extern(Windows) VkResult function(VkDevice device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL* pValue) nothrow;
alias PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pTimeDomainCount, VkTimeDomainKHR* pTimeDomains) nothrow;
alias PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pTimeDomainCount, VkTimeDomainKHR* pTimeDomains) nothrow;
alias PFN_vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkCooperativeMatrixFlexibleDimensionsPropertiesNV* pProperties) nothrow;
alias PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkCooperativeMatrixPropertiesKHR* pProperties) nothrow;
alias PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkCooperativeMatrixPropertiesNV* pProperties) nothrow;
alias PFN_vkGetPhysicalDeviceCooperativeVectorPropertiesNV = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkCooperativeVectorPropertiesNV* pProperties) nothrow;
alias PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlaneProperties2KHR* pProperties) nothrow;
alias PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties) nothrow;
alias PFN_vkGetPhysicalDeviceDisplayProperties2KHR = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayProperties2KHR* pProperties) nothrow;
alias PFN_vkGetPhysicalDeviceDisplayPropertiesKHR = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPropertiesKHR* pProperties) nothrow;
alias PFN_vkGetPhysicalDeviceExternalBufferProperties = extern(Windows) void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties) nothrow;
alias PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR = extern(Windows) void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties) nothrow;
alias PFN_vkGetPhysicalDeviceExternalFenceProperties = extern(Windows) void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties) nothrow;
alias PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR = extern(Windows) void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties) nothrow;
alias PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties) nothrow;
alias PFN_vkGetPhysicalDeviceExternalSemaphoreProperties = extern(Windows) void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties) nothrow;
alias PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = extern(Windows) void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties) nothrow;
alias PFN_vkGetPhysicalDeviceFeatures = extern(Windows) void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* pFeatures) nothrow;
alias PFN_vkGetPhysicalDeviceFeatures2 = extern(Windows) void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures) nothrow;
alias PFN_vkGetPhysicalDeviceFeatures2KHR = extern(Windows) void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures) nothrow;
alias PFN_vkGetPhysicalDeviceFormatProperties = extern(Windows) void function(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties) nothrow;
alias PFN_vkGetPhysicalDeviceFormatProperties2 = extern(Windows) void function(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties) nothrow;
alias PFN_vkGetPhysicalDeviceFormatProperties2KHR = extern(Windows) void function(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties) nothrow;
alias PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates) nothrow;
alias PFN_vkGetPhysicalDeviceImageFormatProperties = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties) nothrow;
alias PFN_vkGetPhysicalDeviceImageFormatProperties2 = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties) nothrow;
alias PFN_vkGetPhysicalDeviceImageFormatProperties2KHR = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties) nothrow;
alias PFN_vkGetPhysicalDeviceMemoryProperties = extern(Windows) void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties) nothrow;
alias PFN_vkGetPhysicalDeviceMemoryProperties2 = extern(Windows) void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties) nothrow;
alias PFN_vkGetPhysicalDeviceMemoryProperties2KHR = extern(Windows) void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties) nothrow;
alias PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT = extern(Windows) void function(VkPhysicalDevice physicalDevice, VkSampleCountFlagBits samples, VkMultisamplePropertiesEXT* pMultisampleProperties) nothrow;
alias PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, VkOpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo, uint32_t* pFormatCount, VkOpticalFlowImageFormatPropertiesNV* pImageFormatProperties) nothrow;
alias PFN_vkGetPhysicalDevicePresentRectanglesKHR = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pRectCount, VkRect2D* pRects) nothrow;
alias PFN_vkGetPhysicalDeviceProperties = extern(Windows) void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* pProperties) nothrow;
alias PFN_vkGetPhysicalDeviceProperties2 = extern(Windows) void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties) nothrow;
alias PFN_vkGetPhysicalDeviceProperties2KHR = extern(Windows) void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties) nothrow;
alias PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = extern(Windows) void function(VkPhysicalDevice physicalDevice, VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo, uint32_t* pNumPasses) nothrow;
alias PFN_vkGetPhysicalDeviceQueueFamilyProperties = extern(Windows) void function(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties) nothrow;
alias PFN_vkGetPhysicalDeviceQueueFamilyProperties2 = extern(Windows) void function(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties) nothrow;
alias PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR = extern(Windows) void function(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties) nothrow;
alias PFN_vkGetPhysicalDeviceSparseImageFormatProperties = extern(Windows) void function(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t* pPropertyCount, VkSparseImageFormatProperties* pProperties) nothrow;
alias PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 = extern(Windows) void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2* pProperties) nothrow;
alias PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = extern(Windows) void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2* pProperties) nothrow;
alias PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pCombinationCount, VkFramebufferMixedSamplesCombinationNV* pCombinations) nothrow;
alias PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT* pSurfaceCapabilities) nothrow;
alias PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkSurfaceCapabilities2KHR* pSurfaceCapabilities) nothrow;
alias PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities) nothrow;
alias PFN_vkGetPhysicalDeviceSurfaceFormats2KHR = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint32_t* pSurfaceFormatCount, VkSurfaceFormat2KHR* pSurfaceFormats) nothrow;
alias PFN_vkGetPhysicalDeviceSurfaceFormatsKHR = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats) nothrow;
alias PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint32_t* pPresentModeCount, VkPresentModeKHR* pPresentModes) nothrow;
alias PFN_vkGetPhysicalDeviceSurfacePresentModesKHR = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pPresentModeCount, VkPresentModeKHR* pPresentModes) nothrow;
alias PFN_vkGetPhysicalDeviceSurfaceSupportKHR = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32* pSupported) nothrow;
alias PFN_vkGetPhysicalDeviceToolProperties = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pToolCount, VkPhysicalDeviceToolProperties* pToolProperties) nothrow;
alias PFN_vkGetPhysicalDeviceToolPropertiesEXT = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pToolCount, VkPhysicalDeviceToolProperties* pToolProperties) nothrow;
alias PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, VkVideoProfileInfoKHR* pVideoProfile, VkVideoCapabilitiesKHR* pCapabilities) nothrow;
alias PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR* pQualityLevelInfo, VkVideoEncodeQualityLevelPropertiesKHR* pQualityLevelProperties) nothrow;
alias PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo, uint32_t* pVideoFormatPropertyCount, VkVideoFormatPropertiesKHR* pVideoFormatProperties) nothrow;
alias PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR = extern(Windows) VkBool32 function(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex) nothrow;
alias PFN_vkGetPipelineBinaryDataKHR = extern(Windows) VkResult function(VkDevice device, VkPipelineBinaryDataInfoKHR* pInfo, VkPipelineBinaryKeyKHR* pPipelineBinaryKey, size_t* pPipelineBinaryDataSize, void* pPipelineBinaryData) nothrow;
alias PFN_vkGetPipelineCacheData = extern(Windows) VkResult function(VkDevice device, VkPipelineCache pipelineCache, size_t* pDataSize, void* pData) nothrow;
alias PFN_vkGetPipelineExecutableInternalRepresentationsKHR = extern(Windows) VkResult function(VkDevice device, VkPipelineExecutableInfoKHR* pExecutableInfo, uint32_t* pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations) nothrow;
alias PFN_vkGetPipelineExecutablePropertiesKHR = extern(Windows) VkResult function(VkDevice device, VkPipelineInfoKHR* pPipelineInfo, uint32_t* pExecutableCount, VkPipelineExecutablePropertiesKHR* pProperties) nothrow;
alias PFN_vkGetPipelineExecutableStatisticsKHR = extern(Windows) VkResult function(VkDevice device, VkPipelineExecutableInfoKHR* pExecutableInfo, uint32_t* pStatisticCount, VkPipelineExecutableStatisticKHR* pStatistics) nothrow;
alias PFN_vkGetPipelineIndirectDeviceAddressNV = extern(Windows) VkDeviceAddress function(VkDevice device, VkPipelineIndirectDeviceAddressInfoNV* pInfo) nothrow;
alias PFN_vkGetPipelineIndirectMemoryRequirementsNV = extern(Windows) void function(VkDevice device, VkComputePipelineCreateInfo* pCreateInfo, VkMemoryRequirements2* pMemoryRequirements) nothrow;
alias PFN_vkGetPipelineKeyKHR = extern(Windows) VkResult function(VkDevice device, VkPipelineCreateInfoKHR* pPipelineCreateInfo, VkPipelineBinaryKeyKHR* pPipelineKey) nothrow;
alias PFN_vkGetPipelinePropertiesEXT = extern(Windows) VkResult function(VkDevice device, VkPipelineInfoEXT* pPipelineInfo, VkBaseOutStructure* pPipelineProperties) nothrow;
alias PFN_vkGetPrivateData = extern(Windows) void function(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t* pData) nothrow;
alias PFN_vkGetPrivateDataEXT = extern(Windows) void function(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t* pData) nothrow;
alias PFN_vkGetQueryPoolResults = extern(Windows) VkResult function(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags) nothrow;
alias PFN_vkGetQueueCheckpointData2NV = extern(Windows) void function(VkQueue queue, uint32_t* pCheckpointDataCount, VkCheckpointData2NV* pCheckpointData) nothrow;
alias PFN_vkGetQueueCheckpointDataNV = extern(Windows) void function(VkQueue queue, uint32_t* pCheckpointDataCount, VkCheckpointDataNV* pCheckpointData) nothrow;
alias PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = extern(Windows) VkResult function(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData) nothrow;
alias PFN_vkGetRayTracingShaderGroupHandlesKHR = extern(Windows) VkResult function(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData) nothrow;
alias PFN_vkGetRayTracingShaderGroupHandlesNV = extern(Windows) VkResult function(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData) nothrow;
alias PFN_vkGetRayTracingShaderGroupStackSizeKHR = extern(Windows) VkDeviceSize function(VkDevice device, VkPipeline pipeline, uint32_t group, VkShaderGroupShaderKHR groupShader) nothrow;
alias PFN_vkGetRefreshCycleDurationGOOGLE = extern(Windows) VkResult function(VkDevice device, VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties) nothrow;
alias PFN_vkGetRenderAreaGranularity = extern(Windows) void function(VkDevice device, VkRenderPass renderPass, VkExtent2D* pGranularity) nothrow;
alias PFN_vkGetRenderingAreaGranularity = extern(Windows) void function(VkDevice device, VkRenderingAreaInfo* pRenderingAreaInfo, VkExtent2D* pGranularity) nothrow;
alias PFN_vkGetRenderingAreaGranularityKHR = extern(Windows) void function(VkDevice device, VkRenderingAreaInfo* pRenderingAreaInfo, VkExtent2D* pGranularity) nothrow;
alias PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT = extern(Windows) VkResult function(VkDevice device, VkSamplerCaptureDescriptorDataInfoEXT* pInfo, void* pData) nothrow;
alias PFN_vkGetSemaphoreCounterValue = extern(Windows) VkResult function(VkDevice device, VkSemaphore semaphore, uint64_t* pValue) nothrow;
alias PFN_vkGetSemaphoreCounterValueKHR = extern(Windows) VkResult function(VkDevice device, VkSemaphore semaphore, uint64_t* pValue) nothrow;
alias PFN_vkGetSemaphoreFdKHR = extern(Windows) VkResult function(VkDevice device, VkSemaphoreGetFdInfoKHR* pGetFdInfo, int* pFd) nothrow;
alias PFN_vkGetSemaphoreWin32HandleKHR = extern(Windows) VkResult function(VkDevice device, VkSemaphoreGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle) nothrow;
alias PFN_vkGetShaderBinaryDataEXT = extern(Windows) VkResult function(VkDevice device, VkShaderEXT shader, size_t* pDataSize, void* pData) nothrow;
alias PFN_vkGetShaderInfoAMD = extern(Windows) VkResult function(VkDevice device, VkPipeline pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, size_t* pInfoSize, void* pInfo) nothrow;
alias PFN_vkGetShaderModuleCreateInfoIdentifierEXT = extern(Windows) void function(VkDevice device, VkShaderModuleCreateInfo* pCreateInfo, VkShaderModuleIdentifierEXT* pIdentifier) nothrow;
alias PFN_vkGetShaderModuleIdentifierEXT = extern(Windows) void function(VkDevice device, VkShaderModule shaderModule, VkShaderModuleIdentifierEXT* pIdentifier) nothrow;
alias PFN_vkGetSwapchainCounterEXT = extern(Windows) VkResult function(VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagBitsEXT counter, uint64_t* pCounterValue) nothrow;
alias PFN_vkGetSwapchainImagesKHR = extern(Windows) VkResult function(VkDevice device, VkSwapchainKHR swapchain, uint32_t* pSwapchainImageCount, VkImage* pSwapchainImages) nothrow;
alias PFN_vkGetSwapchainStatusKHR = extern(Windows) VkResult function(VkDevice device, VkSwapchainKHR swapchain) nothrow;
alias PFN_vkGetValidationCacheDataEXT = extern(Windows) VkResult function(VkDevice device, VkValidationCacheEXT validationCache, size_t* pDataSize, void* pData) nothrow;
alias PFN_vkGetVideoSessionMemoryRequirementsKHR = extern(Windows) VkResult function(VkDevice device, VkVideoSessionKHR videoSession, uint32_t* pMemoryRequirementsCount, VkVideoSessionMemoryRequirementsKHR* pMemoryRequirements) nothrow;
alias PFN_vkGetWinrtDisplayNV = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, uint32_t deviceRelativeId, VkDisplayKHR* pDisplay) nothrow;
alias PFN_vkImportFenceFdKHR = extern(Windows) VkResult function(VkDevice device, VkImportFenceFdInfoKHR* pImportFenceFdInfo) nothrow;
alias PFN_vkImportFenceWin32HandleKHR = extern(Windows) VkResult function(VkDevice device, VkImportFenceWin32HandleInfoKHR* pImportFenceWin32HandleInfo) nothrow;
alias PFN_vkImportSemaphoreFdKHR = extern(Windows) VkResult function(VkDevice device, VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo) nothrow;
alias PFN_vkImportSemaphoreWin32HandleKHR = extern(Windows) VkResult function(VkDevice device, VkImportSemaphoreWin32HandleInfoKHR* pImportSemaphoreWin32HandleInfo) nothrow;
alias PFN_vkInitializePerformanceApiINTEL = extern(Windows) VkResult function(VkDevice device, VkInitializePerformanceApiInfoINTEL* pInitializeInfo) nothrow;
alias PFN_vkInternalAllocationNotification = extern(Windows) void function(void* pUserData, size_t size, VkInternalAllocationType allocationType, VkSystemAllocationScope allocationScope) nothrow;
alias PFN_vkInternalFreeNotification = extern(Windows) void function(void* pUserData, size_t size, VkInternalAllocationType allocationType, VkSystemAllocationScope allocationScope) nothrow;
alias PFN_vkInvalidateMappedMemoryRanges = extern(Windows) VkResult function(VkDevice device, uint32_t memoryRangeCount, VkMappedMemoryRange* pMemoryRanges) nothrow;
alias PFN_vkLatencySleepNV = extern(Windows) VkResult function(VkDevice device, VkSwapchainKHR swapchain, VkLatencySleepInfoNV* pSleepInfo) nothrow;
alias PFN_vkMapMemory = extern(Windows) VkResult function(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData) nothrow;
alias PFN_vkMapMemory2 = extern(Windows) VkResult function(VkDevice device, VkMemoryMapInfo* pMemoryMapInfo, void** ppData) nothrow;
alias PFN_vkMapMemory2KHR = extern(Windows) VkResult function(VkDevice device, VkMemoryMapInfo* pMemoryMapInfo, void** ppData) nothrow;
alias PFN_vkMergePipelineCaches = extern(Windows) VkResult function(VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount, VkPipelineCache* pSrcCaches) nothrow;
alias PFN_vkMergeValidationCachesEXT = extern(Windows) VkResult function(VkDevice device, VkValidationCacheEXT dstCache, uint32_t srcCacheCount, VkValidationCacheEXT* pSrcCaches) nothrow;
alias PFN_vkQueueBeginDebugUtilsLabelEXT = extern(Windows) void function(VkQueue queue, VkDebugUtilsLabelEXT* pLabelInfo) nothrow;
alias PFN_vkQueueBindSparse = extern(Windows) VkResult function(VkQueue queue, uint32_t bindInfoCount, VkBindSparseInfo* pBindInfo, VkFence fence) nothrow;
alias PFN_vkQueueEndDebugUtilsLabelEXT = extern(Windows) void function(VkQueue queue) nothrow;
alias PFN_vkQueueInsertDebugUtilsLabelEXT = extern(Windows) void function(VkQueue queue, VkDebugUtilsLabelEXT* pLabelInfo) nothrow;
alias PFN_vkQueueNotifyOutOfBandNV = extern(Windows) void function(VkQueue queue, VkOutOfBandQueueTypeInfoNV* pQueueTypeInfo) nothrow;
alias PFN_vkQueuePresentKHR = extern(Windows) VkResult function(VkQueue queue, VkPresentInfoKHR* pPresentInfo) nothrow;
alias PFN_vkQueueSetPerformanceConfigurationINTEL = extern(Windows) VkResult function(VkQueue queue, VkPerformanceConfigurationINTEL configuration) nothrow;
alias PFN_vkQueueSubmit = extern(Windows) VkResult function(VkQueue queue, uint32_t submitCount, VkSubmitInfo* pSubmits, VkFence fence) nothrow;
alias PFN_vkQueueSubmit2 = extern(Windows) VkResult function(VkQueue queue, uint32_t submitCount, VkSubmitInfo2* pSubmits, VkFence fence) nothrow;
alias PFN_vkQueueSubmit2KHR = extern(Windows) VkResult function(VkQueue queue, uint32_t submitCount, VkSubmitInfo2* pSubmits, VkFence fence) nothrow;
alias PFN_vkQueueWaitIdle = extern(Windows) VkResult function(VkQueue queue) nothrow;
alias PFN_vkReallocationFunction = extern(Windows) void* function(void* pUserData, void* pOriginal, size_t size, size_t alignment, VkSystemAllocationScope allocationScope) nothrow;
alias PFN_vkRegisterDeviceEventEXT = extern(Windows) VkResult function(VkDevice device, VkDeviceEventInfoEXT* pDeviceEventInfo, VkAllocationCallbacks* pAllocator, VkFence* pFence) nothrow;
alias PFN_vkRegisterDisplayEventEXT = extern(Windows) VkResult function(VkDevice device, VkDisplayKHR display, VkDisplayEventInfoEXT* pDisplayEventInfo, VkAllocationCallbacks* pAllocator, VkFence* pFence) nothrow;
alias PFN_vkReleaseCapturedPipelineDataKHR = extern(Windows) VkResult function(VkDevice device, VkReleaseCapturedPipelineDataInfoKHR* pInfo, VkAllocationCallbacks* pAllocator) nothrow;
alias PFN_vkReleaseDisplayEXT = extern(Windows) VkResult function(VkPhysicalDevice physicalDevice, VkDisplayKHR display) nothrow;
alias PFN_vkReleaseFullScreenExclusiveModeEXT = extern(Windows) VkResult function(VkDevice device, VkSwapchainKHR swapchain) nothrow;
alias PFN_vkReleasePerformanceConfigurationINTEL = extern(Windows) VkResult function(VkDevice device, VkPerformanceConfigurationINTEL configuration) nothrow;
alias PFN_vkReleaseProfilingLockKHR = extern(Windows) void function(VkDevice device) nothrow;
alias PFN_vkReleaseSwapchainImagesEXT = extern(Windows) VkResult function(VkDevice device, VkReleaseSwapchainImagesInfoEXT* pReleaseInfo) nothrow;
alias PFN_vkResetCommandBuffer = extern(Windows) VkResult function(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags) nothrow;
alias PFN_vkResetCommandPool = extern(Windows) VkResult function(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags) nothrow;
alias PFN_vkResetDescriptorPool = extern(Windows) VkResult function(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags) nothrow;
alias PFN_vkResetEvent = extern(Windows) VkResult function(VkDevice device, VkEvent event) nothrow;
alias PFN_vkResetFences = extern(Windows) VkResult function(VkDevice device, uint32_t fenceCount, VkFence* pFences) nothrow;
alias PFN_vkResetQueryPool = extern(Windows) void function(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) nothrow;
alias PFN_vkResetQueryPoolEXT = extern(Windows) void function(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) nothrow;
alias PFN_vkSetDebugUtilsObjectNameEXT = extern(Windows) VkResult function(VkDevice device, VkDebugUtilsObjectNameInfoEXT* pNameInfo) nothrow;
alias PFN_vkSetDebugUtilsObjectTagEXT = extern(Windows) VkResult function(VkDevice device, VkDebugUtilsObjectTagInfoEXT* pTagInfo) nothrow;
alias PFN_vkSetDeviceMemoryPriorityEXT = extern(Windows) void function(VkDevice device, VkDeviceMemory memory, float priority) nothrow;
alias PFN_vkSetEvent = extern(Windows) VkResult function(VkDevice device, VkEvent event) nothrow;
alias PFN_vkSetHdrMetadataEXT = extern(Windows) void function(VkDevice device, uint32_t swapchainCount, VkSwapchainKHR* pSwapchains, VkHdrMetadataEXT* pMetadata) nothrow;
alias PFN_vkSetLatencyMarkerNV = extern(Windows) void function(VkDevice device, VkSwapchainKHR swapchain, VkSetLatencyMarkerInfoNV* pLatencyMarkerInfo) nothrow;
alias PFN_vkSetLatencySleepModeNV = extern(Windows) VkResult function(VkDevice device, VkSwapchainKHR swapchain, VkLatencySleepModeInfoNV* pSleepModeInfo) nothrow;
alias PFN_vkSetLocalDimmingAMD = extern(Windows) void function(VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable) nothrow;
alias PFN_vkSetPrivateData = extern(Windows) VkResult function(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data) nothrow;
alias PFN_vkSetPrivateDataEXT = extern(Windows) VkResult function(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data) nothrow;
alias PFN_vkSignalSemaphore = extern(Windows) VkResult function(VkDevice device, VkSemaphoreSignalInfo* pSignalInfo) nothrow;
alias PFN_vkSignalSemaphoreKHR = extern(Windows) VkResult function(VkDevice device, VkSemaphoreSignalInfo* pSignalInfo) nothrow;
alias PFN_vkSubmitDebugUtilsMessageEXT = extern(Windows) void function(VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, VkDebugUtilsMessengerCallbackDataEXT* pCallbackData) nothrow;
alias PFN_vkTransitionImageLayout = extern(Windows) VkResult function(VkDevice device, uint32_t transitionCount, VkHostImageLayoutTransitionInfo* pTransitions) nothrow;
alias PFN_vkTransitionImageLayoutEXT = extern(Windows) VkResult function(VkDevice device, uint32_t transitionCount, VkHostImageLayoutTransitionInfo* pTransitions) nothrow;
alias PFN_vkTrimCommandPool = extern(Windows) void function(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags) nothrow;
alias PFN_vkTrimCommandPoolKHR = extern(Windows) void function(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags) nothrow;
alias PFN_vkUninitializePerformanceApiINTEL = extern(Windows) void function(VkDevice device) nothrow;
alias PFN_vkUnmapMemory = extern(Windows) void function(VkDevice device, VkDeviceMemory memory) nothrow;
alias PFN_vkUnmapMemory2 = extern(Windows) VkResult function(VkDevice device, VkMemoryUnmapInfo* pMemoryUnmapInfo) nothrow;
alias PFN_vkUnmapMemory2KHR = extern(Windows) VkResult function(VkDevice device, VkMemoryUnmapInfo* pMemoryUnmapInfo) nothrow;
alias PFN_vkUpdateDescriptorSetWithTemplate = extern(Windows) void function(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, void* pData) nothrow;
alias PFN_vkUpdateDescriptorSetWithTemplateKHR = extern(Windows) void function(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, void* pData) nothrow;
alias PFN_vkUpdateDescriptorSets = extern(Windows) void function(VkDevice device, uint32_t descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites, uint32_t descriptorCopyCount, VkCopyDescriptorSet* pDescriptorCopies) nothrow;
alias PFN_vkUpdateIndirectExecutionSetPipelineEXT = extern(Windows) void function(VkDevice device, VkIndirectExecutionSetEXT indirectExecutionSet, uint32_t executionSetWriteCount, VkWriteIndirectExecutionSetPipelineEXT* pExecutionSetWrites) nothrow;
alias PFN_vkUpdateIndirectExecutionSetShaderEXT = extern(Windows) void function(VkDevice device, VkIndirectExecutionSetEXT indirectExecutionSet, uint32_t executionSetWriteCount, VkWriteIndirectExecutionSetShaderEXT* pExecutionSetWrites) nothrow;
alias PFN_vkUpdateVideoSessionParametersKHR = extern(Windows) VkResult function(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, VkVideoSessionParametersUpdateInfoKHR* pUpdateInfo) nothrow;
alias PFN_vkWaitForFences = extern(Windows) VkResult function(VkDevice device, uint32_t fenceCount, VkFence* pFences, VkBool32 waitAll, uint64_t timeout) nothrow;
alias PFN_vkWaitForPresentKHR = extern(Windows) VkResult function(VkDevice device, VkSwapchainKHR swapchain, uint64_t presentId, uint64_t timeout) nothrow;
alias PFN_vkWaitSemaphores = extern(Windows) VkResult function(VkDevice device, VkSemaphoreWaitInfo* pWaitInfo, uint64_t timeout) nothrow;
alias PFN_vkWaitSemaphoresKHR = extern(Windows) VkResult function(VkDevice device, VkSemaphoreWaitInfo* pWaitInfo, uint64_t timeout) nothrow;
alias PFN_vkWriteAccelerationStructuresPropertiesKHR = extern(Windows) VkResult function(VkDevice device, uint32_t accelerationStructureCount, VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType queryType, size_t dataSize, void* pData, size_t stride) nothrow;
alias PFN_vkWriteMicromapsPropertiesEXT = extern(Windows) VkResult function(VkDevice device, uint32_t micromapCount, VkMicromapEXT* pMicromaps, VkQueryType queryType, size_t dataSize, void* pData, size_t stride) nothrow;

// Enums
enum VK_TRUE = 1;
enum VK_FALSE = 0;
enum VK_REMAINING_ARRAY_LAYERS = (~0U);
enum VK_REMAINING_MIP_LEVELS = (~0U);
enum VK_SUBPASS_EXTERNAL = (~0U);
enum VK_WHOLE_SIZE = (~0UL);
enum VK_NULL_HANDLE = null;
enum VK_SHADER_UNUSED_KHR = (~0U);
enum VK_QUEUE_FAMILY_IGNORED = (~0U);

enum StdVideoAV1ChromaSamplePosition {
	STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_UNKNOWN = 0,
	STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_VERTICAL = 1,
	STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_COLOCATED = 2,
	STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_RESERVED = 3,
	STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_INVALID = 0x7FFFFFFF,
	STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoAV1ChromaSamplePosition {
	STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_UNKNOWN = StdVideoAV1ChromaSamplePosition.STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_UNKNOWN,
	STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_VERTICAL = StdVideoAV1ChromaSamplePosition.STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_VERTICAL,
	STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_COLOCATED = StdVideoAV1ChromaSamplePosition.STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_COLOCATED,
	STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_RESERVED = StdVideoAV1ChromaSamplePosition.STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_RESERVED,
	STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_INVALID = StdVideoAV1ChromaSamplePosition.STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_INVALID,
	STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_MAX_ENUM = StdVideoAV1ChromaSamplePosition.STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_MAX_ENUM,
}
enum StdVideoAV1ColorPrimaries {
	STD_VIDEO_AV1_COLOR_PRIMARIES_BT_709 = 1,
	STD_VIDEO_AV1_COLOR_PRIMARIES_UNSPECIFIED = 2,
	STD_VIDEO_AV1_COLOR_PRIMARIES_BT_470_M = 4,
	STD_VIDEO_AV1_COLOR_PRIMARIES_BT_470_B_G = 5,
	STD_VIDEO_AV1_COLOR_PRIMARIES_BT_601 = 6,
	STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_240 = 7,
	STD_VIDEO_AV1_COLOR_PRIMARIES_GENERIC_FILM = 8,
	STD_VIDEO_AV1_COLOR_PRIMARIES_BT_2020 = 9,
	STD_VIDEO_AV1_COLOR_PRIMARIES_XYZ = 10,
	STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_431 = 11,
	STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_432 = 12,
	STD_VIDEO_AV1_COLOR_PRIMARIES_EBU_3213 = 22,
	STD_VIDEO_AV1_COLOR_PRIMARIES_INVALID = 0x7FFFFFFF,
	STD_VIDEO_AV1_COLOR_PRIMARIES_BT_UNSPECIFIED = STD_VIDEO_AV1_COLOR_PRIMARIES_UNSPECIFIED,
	STD_VIDEO_AV1_COLOR_PRIMARIES_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoAV1ColorPrimaries {
	STD_VIDEO_AV1_COLOR_PRIMARIES_BT_709 = StdVideoAV1ColorPrimaries.STD_VIDEO_AV1_COLOR_PRIMARIES_BT_709,
	STD_VIDEO_AV1_COLOR_PRIMARIES_UNSPECIFIED = StdVideoAV1ColorPrimaries.STD_VIDEO_AV1_COLOR_PRIMARIES_UNSPECIFIED,
	STD_VIDEO_AV1_COLOR_PRIMARIES_BT_470_M = StdVideoAV1ColorPrimaries.STD_VIDEO_AV1_COLOR_PRIMARIES_BT_470_M,
	STD_VIDEO_AV1_COLOR_PRIMARIES_BT_470_B_G = StdVideoAV1ColorPrimaries.STD_VIDEO_AV1_COLOR_PRIMARIES_BT_470_B_G,
	STD_VIDEO_AV1_COLOR_PRIMARIES_BT_601 = StdVideoAV1ColorPrimaries.STD_VIDEO_AV1_COLOR_PRIMARIES_BT_601,
	STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_240 = StdVideoAV1ColorPrimaries.STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_240,
	STD_VIDEO_AV1_COLOR_PRIMARIES_GENERIC_FILM = StdVideoAV1ColorPrimaries.STD_VIDEO_AV1_COLOR_PRIMARIES_GENERIC_FILM,
	STD_VIDEO_AV1_COLOR_PRIMARIES_BT_2020 = StdVideoAV1ColorPrimaries.STD_VIDEO_AV1_COLOR_PRIMARIES_BT_2020,
	STD_VIDEO_AV1_COLOR_PRIMARIES_XYZ = StdVideoAV1ColorPrimaries.STD_VIDEO_AV1_COLOR_PRIMARIES_XYZ,
	STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_431 = StdVideoAV1ColorPrimaries.STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_431,
	STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_432 = StdVideoAV1ColorPrimaries.STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_432,
	STD_VIDEO_AV1_COLOR_PRIMARIES_EBU_3213 = StdVideoAV1ColorPrimaries.STD_VIDEO_AV1_COLOR_PRIMARIES_EBU_3213,
	STD_VIDEO_AV1_COLOR_PRIMARIES_INVALID = StdVideoAV1ColorPrimaries.STD_VIDEO_AV1_COLOR_PRIMARIES_INVALID,
	STD_VIDEO_AV1_COLOR_PRIMARIES_BT_UNSPECIFIED = StdVideoAV1ColorPrimaries.STD_VIDEO_AV1_COLOR_PRIMARIES_BT_UNSPECIFIED,
	STD_VIDEO_AV1_COLOR_PRIMARIES_MAX_ENUM = StdVideoAV1ColorPrimaries.STD_VIDEO_AV1_COLOR_PRIMARIES_MAX_ENUM,
}
enum StdVideoAV1FrameRestorationType {
	STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_NONE = 0,
	STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_WIENER = 1,
	STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_SGRPROJ = 2,
	STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_SWITCHABLE = 3,
	STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_INVALID = 0x7FFFFFFF,
	STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoAV1FrameRestorationType {
	STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_NONE = StdVideoAV1FrameRestorationType.STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_NONE,
	STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_WIENER = StdVideoAV1FrameRestorationType.STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_WIENER,
	STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_SGRPROJ = StdVideoAV1FrameRestorationType.STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_SGRPROJ,
	STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_SWITCHABLE = StdVideoAV1FrameRestorationType.STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_SWITCHABLE,
	STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_INVALID = StdVideoAV1FrameRestorationType.STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_INVALID,
	STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_MAX_ENUM = StdVideoAV1FrameRestorationType.STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_MAX_ENUM,
}
enum StdVideoAV1FrameType {
	STD_VIDEO_AV1_FRAME_TYPE_KEY = 0,
	STD_VIDEO_AV1_FRAME_TYPE_INTER = 1,
	STD_VIDEO_AV1_FRAME_TYPE_INTRA_ONLY = 2,
	STD_VIDEO_AV1_FRAME_TYPE_SWITCH = 3,
	STD_VIDEO_AV1_FRAME_TYPE_INVALID = 0x7FFFFFFF,
	STD_VIDEO_AV1_FRAME_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoAV1FrameType {
	STD_VIDEO_AV1_FRAME_TYPE_KEY = StdVideoAV1FrameType.STD_VIDEO_AV1_FRAME_TYPE_KEY,
	STD_VIDEO_AV1_FRAME_TYPE_INTER = StdVideoAV1FrameType.STD_VIDEO_AV1_FRAME_TYPE_INTER,
	STD_VIDEO_AV1_FRAME_TYPE_INTRA_ONLY = StdVideoAV1FrameType.STD_VIDEO_AV1_FRAME_TYPE_INTRA_ONLY,
	STD_VIDEO_AV1_FRAME_TYPE_SWITCH = StdVideoAV1FrameType.STD_VIDEO_AV1_FRAME_TYPE_SWITCH,
	STD_VIDEO_AV1_FRAME_TYPE_INVALID = StdVideoAV1FrameType.STD_VIDEO_AV1_FRAME_TYPE_INVALID,
	STD_VIDEO_AV1_FRAME_TYPE_MAX_ENUM = StdVideoAV1FrameType.STD_VIDEO_AV1_FRAME_TYPE_MAX_ENUM,
}
enum StdVideoAV1InterpolationFilter {
	STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP = 0,
	STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP_SMOOTH = 1,
	STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP_SHARP = 2,
	STD_VIDEO_AV1_INTERPOLATION_FILTER_BILINEAR = 3,
	STD_VIDEO_AV1_INTERPOLATION_FILTER_SWITCHABLE = 4,
	STD_VIDEO_AV1_INTERPOLATION_FILTER_INVALID = 0x7FFFFFFF,
	STD_VIDEO_AV1_INTERPOLATION_FILTER_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoAV1InterpolationFilter {
	STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP = StdVideoAV1InterpolationFilter.STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP,
	STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP_SMOOTH = StdVideoAV1InterpolationFilter.STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP_SMOOTH,
	STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP_SHARP = StdVideoAV1InterpolationFilter.STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP_SHARP,
	STD_VIDEO_AV1_INTERPOLATION_FILTER_BILINEAR = StdVideoAV1InterpolationFilter.STD_VIDEO_AV1_INTERPOLATION_FILTER_BILINEAR,
	STD_VIDEO_AV1_INTERPOLATION_FILTER_SWITCHABLE = StdVideoAV1InterpolationFilter.STD_VIDEO_AV1_INTERPOLATION_FILTER_SWITCHABLE,
	STD_VIDEO_AV1_INTERPOLATION_FILTER_INVALID = StdVideoAV1InterpolationFilter.STD_VIDEO_AV1_INTERPOLATION_FILTER_INVALID,
	STD_VIDEO_AV1_INTERPOLATION_FILTER_MAX_ENUM = StdVideoAV1InterpolationFilter.STD_VIDEO_AV1_INTERPOLATION_FILTER_MAX_ENUM,
}
enum StdVideoAV1Level {
	STD_VIDEO_AV1_LEVEL_2_0 = 0,
	STD_VIDEO_AV1_LEVEL_2_1 = 1,
	STD_VIDEO_AV1_LEVEL_2_2 = 2,
	STD_VIDEO_AV1_LEVEL_2_3 = 3,
	STD_VIDEO_AV1_LEVEL_3_0 = 4,
	STD_VIDEO_AV1_LEVEL_3_1 = 5,
	STD_VIDEO_AV1_LEVEL_3_2 = 6,
	STD_VIDEO_AV1_LEVEL_3_3 = 7,
	STD_VIDEO_AV1_LEVEL_4_0 = 8,
	STD_VIDEO_AV1_LEVEL_4_1 = 9,
	STD_VIDEO_AV1_LEVEL_4_2 = 10,
	STD_VIDEO_AV1_LEVEL_4_3 = 11,
	STD_VIDEO_AV1_LEVEL_5_0 = 12,
	STD_VIDEO_AV1_LEVEL_5_1 = 13,
	STD_VIDEO_AV1_LEVEL_5_2 = 14,
	STD_VIDEO_AV1_LEVEL_5_3 = 15,
	STD_VIDEO_AV1_LEVEL_6_0 = 16,
	STD_VIDEO_AV1_LEVEL_6_1 = 17,
	STD_VIDEO_AV1_LEVEL_6_2 = 18,
	STD_VIDEO_AV1_LEVEL_6_3 = 19,
	STD_VIDEO_AV1_LEVEL_7_0 = 20,
	STD_VIDEO_AV1_LEVEL_7_1 = 21,
	STD_VIDEO_AV1_LEVEL_7_2 = 22,
	STD_VIDEO_AV1_LEVEL_7_3 = 23,
	STD_VIDEO_AV1_LEVEL_INVALID = 0x7FFFFFFF,
	STD_VIDEO_AV1_LEVEL_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoAV1Level {
	STD_VIDEO_AV1_LEVEL_2_0 = StdVideoAV1Level.STD_VIDEO_AV1_LEVEL_2_0,
	STD_VIDEO_AV1_LEVEL_2_1 = StdVideoAV1Level.STD_VIDEO_AV1_LEVEL_2_1,
	STD_VIDEO_AV1_LEVEL_2_2 = StdVideoAV1Level.STD_VIDEO_AV1_LEVEL_2_2,
	STD_VIDEO_AV1_LEVEL_2_3 = StdVideoAV1Level.STD_VIDEO_AV1_LEVEL_2_3,
	STD_VIDEO_AV1_LEVEL_3_0 = StdVideoAV1Level.STD_VIDEO_AV1_LEVEL_3_0,
	STD_VIDEO_AV1_LEVEL_3_1 = StdVideoAV1Level.STD_VIDEO_AV1_LEVEL_3_1,
	STD_VIDEO_AV1_LEVEL_3_2 = StdVideoAV1Level.STD_VIDEO_AV1_LEVEL_3_2,
	STD_VIDEO_AV1_LEVEL_3_3 = StdVideoAV1Level.STD_VIDEO_AV1_LEVEL_3_3,
	STD_VIDEO_AV1_LEVEL_4_0 = StdVideoAV1Level.STD_VIDEO_AV1_LEVEL_4_0,
	STD_VIDEO_AV1_LEVEL_4_1 = StdVideoAV1Level.STD_VIDEO_AV1_LEVEL_4_1,
	STD_VIDEO_AV1_LEVEL_4_2 = StdVideoAV1Level.STD_VIDEO_AV1_LEVEL_4_2,
	STD_VIDEO_AV1_LEVEL_4_3 = StdVideoAV1Level.STD_VIDEO_AV1_LEVEL_4_3,
	STD_VIDEO_AV1_LEVEL_5_0 = StdVideoAV1Level.STD_VIDEO_AV1_LEVEL_5_0,
	STD_VIDEO_AV1_LEVEL_5_1 = StdVideoAV1Level.STD_VIDEO_AV1_LEVEL_5_1,
	STD_VIDEO_AV1_LEVEL_5_2 = StdVideoAV1Level.STD_VIDEO_AV1_LEVEL_5_2,
	STD_VIDEO_AV1_LEVEL_5_3 = StdVideoAV1Level.STD_VIDEO_AV1_LEVEL_5_3,
	STD_VIDEO_AV1_LEVEL_6_0 = StdVideoAV1Level.STD_VIDEO_AV1_LEVEL_6_0,
	STD_VIDEO_AV1_LEVEL_6_1 = StdVideoAV1Level.STD_VIDEO_AV1_LEVEL_6_1,
	STD_VIDEO_AV1_LEVEL_6_2 = StdVideoAV1Level.STD_VIDEO_AV1_LEVEL_6_2,
	STD_VIDEO_AV1_LEVEL_6_3 = StdVideoAV1Level.STD_VIDEO_AV1_LEVEL_6_3,
	STD_VIDEO_AV1_LEVEL_7_0 = StdVideoAV1Level.STD_VIDEO_AV1_LEVEL_7_0,
	STD_VIDEO_AV1_LEVEL_7_1 = StdVideoAV1Level.STD_VIDEO_AV1_LEVEL_7_1,
	STD_VIDEO_AV1_LEVEL_7_2 = StdVideoAV1Level.STD_VIDEO_AV1_LEVEL_7_2,
	STD_VIDEO_AV1_LEVEL_7_3 = StdVideoAV1Level.STD_VIDEO_AV1_LEVEL_7_3,
	STD_VIDEO_AV1_LEVEL_INVALID = StdVideoAV1Level.STD_VIDEO_AV1_LEVEL_INVALID,
	STD_VIDEO_AV1_LEVEL_MAX_ENUM = StdVideoAV1Level.STD_VIDEO_AV1_LEVEL_MAX_ENUM,
}
enum StdVideoAV1MatrixCoefficients {
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_IDENTITY = 0,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_709 = 1,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_UNSPECIFIED = 2,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_RESERVED_3 = 3,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_FCC = 4,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_470_B_G = 5,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_601 = 6,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_240 = 7,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_YCGCO = 8,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_2020_NCL = 9,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_2020_CL = 10,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_2085 = 11,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_CHROMAT_NCL = 12,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_CHROMAT_CL = 13,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_ICTCP = 14,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_INVALID = 0x7FFFFFFF,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoAV1MatrixCoefficients {
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_IDENTITY = StdVideoAV1MatrixCoefficients.STD_VIDEO_AV1_MATRIX_COEFFICIENTS_IDENTITY,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_709 = StdVideoAV1MatrixCoefficients.STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_709,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_UNSPECIFIED = StdVideoAV1MatrixCoefficients.STD_VIDEO_AV1_MATRIX_COEFFICIENTS_UNSPECIFIED,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_RESERVED_3 = StdVideoAV1MatrixCoefficients.STD_VIDEO_AV1_MATRIX_COEFFICIENTS_RESERVED_3,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_FCC = StdVideoAV1MatrixCoefficients.STD_VIDEO_AV1_MATRIX_COEFFICIENTS_FCC,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_470_B_G = StdVideoAV1MatrixCoefficients.STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_470_B_G,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_601 = StdVideoAV1MatrixCoefficients.STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_601,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_240 = StdVideoAV1MatrixCoefficients.STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_240,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_YCGCO = StdVideoAV1MatrixCoefficients.STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_YCGCO,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_2020_NCL = StdVideoAV1MatrixCoefficients.STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_2020_NCL,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_2020_CL = StdVideoAV1MatrixCoefficients.STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_2020_CL,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_2085 = StdVideoAV1MatrixCoefficients.STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_2085,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_CHROMAT_NCL = StdVideoAV1MatrixCoefficients.STD_VIDEO_AV1_MATRIX_COEFFICIENTS_CHROMAT_NCL,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_CHROMAT_CL = StdVideoAV1MatrixCoefficients.STD_VIDEO_AV1_MATRIX_COEFFICIENTS_CHROMAT_CL,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_ICTCP = StdVideoAV1MatrixCoefficients.STD_VIDEO_AV1_MATRIX_COEFFICIENTS_ICTCP,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_INVALID = StdVideoAV1MatrixCoefficients.STD_VIDEO_AV1_MATRIX_COEFFICIENTS_INVALID,
	STD_VIDEO_AV1_MATRIX_COEFFICIENTS_MAX_ENUM = StdVideoAV1MatrixCoefficients.STD_VIDEO_AV1_MATRIX_COEFFICIENTS_MAX_ENUM,
}
enum StdVideoAV1Profile {
	STD_VIDEO_AV1_PROFILE_MAIN = 0,
	STD_VIDEO_AV1_PROFILE_HIGH = 1,
	STD_VIDEO_AV1_PROFILE_PROFESSIONAL = 2,
	STD_VIDEO_AV1_PROFILE_INVALID = 0x7FFFFFFF,
	STD_VIDEO_AV1_PROFILE_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoAV1Profile {
	STD_VIDEO_AV1_PROFILE_MAIN = StdVideoAV1Profile.STD_VIDEO_AV1_PROFILE_MAIN,
	STD_VIDEO_AV1_PROFILE_HIGH = StdVideoAV1Profile.STD_VIDEO_AV1_PROFILE_HIGH,
	STD_VIDEO_AV1_PROFILE_PROFESSIONAL = StdVideoAV1Profile.STD_VIDEO_AV1_PROFILE_PROFESSIONAL,
	STD_VIDEO_AV1_PROFILE_INVALID = StdVideoAV1Profile.STD_VIDEO_AV1_PROFILE_INVALID,
	STD_VIDEO_AV1_PROFILE_MAX_ENUM = StdVideoAV1Profile.STD_VIDEO_AV1_PROFILE_MAX_ENUM,
}
enum StdVideoAV1ReferenceName {
	STD_VIDEO_AV1_REFERENCE_NAME_INTRA_FRAME = 0,
	STD_VIDEO_AV1_REFERENCE_NAME_LAST_FRAME = 1,
	STD_VIDEO_AV1_REFERENCE_NAME_LAST2_FRAME = 2,
	STD_VIDEO_AV1_REFERENCE_NAME_LAST3_FRAME = 3,
	STD_VIDEO_AV1_REFERENCE_NAME_GOLDEN_FRAME = 4,
	STD_VIDEO_AV1_REFERENCE_NAME_BWDREF_FRAME = 5,
	STD_VIDEO_AV1_REFERENCE_NAME_ALTREF2_FRAME = 6,
	STD_VIDEO_AV1_REFERENCE_NAME_ALTREF_FRAME = 7,
	STD_VIDEO_AV1_REFERENCE_NAME_INVALID = 0x7FFFFFFF,
	STD_VIDEO_AV1_REFERENCE_NAME_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoAV1ReferenceName {
	STD_VIDEO_AV1_REFERENCE_NAME_INTRA_FRAME = StdVideoAV1ReferenceName.STD_VIDEO_AV1_REFERENCE_NAME_INTRA_FRAME,
	STD_VIDEO_AV1_REFERENCE_NAME_LAST_FRAME = StdVideoAV1ReferenceName.STD_VIDEO_AV1_REFERENCE_NAME_LAST_FRAME,
	STD_VIDEO_AV1_REFERENCE_NAME_LAST2_FRAME = StdVideoAV1ReferenceName.STD_VIDEO_AV1_REFERENCE_NAME_LAST2_FRAME,
	STD_VIDEO_AV1_REFERENCE_NAME_LAST3_FRAME = StdVideoAV1ReferenceName.STD_VIDEO_AV1_REFERENCE_NAME_LAST3_FRAME,
	STD_VIDEO_AV1_REFERENCE_NAME_GOLDEN_FRAME = StdVideoAV1ReferenceName.STD_VIDEO_AV1_REFERENCE_NAME_GOLDEN_FRAME,
	STD_VIDEO_AV1_REFERENCE_NAME_BWDREF_FRAME = StdVideoAV1ReferenceName.STD_VIDEO_AV1_REFERENCE_NAME_BWDREF_FRAME,
	STD_VIDEO_AV1_REFERENCE_NAME_ALTREF2_FRAME = StdVideoAV1ReferenceName.STD_VIDEO_AV1_REFERENCE_NAME_ALTREF2_FRAME,
	STD_VIDEO_AV1_REFERENCE_NAME_ALTREF_FRAME = StdVideoAV1ReferenceName.STD_VIDEO_AV1_REFERENCE_NAME_ALTREF_FRAME,
	STD_VIDEO_AV1_REFERENCE_NAME_INVALID = StdVideoAV1ReferenceName.STD_VIDEO_AV1_REFERENCE_NAME_INVALID,
	STD_VIDEO_AV1_REFERENCE_NAME_MAX_ENUM = StdVideoAV1ReferenceName.STD_VIDEO_AV1_REFERENCE_NAME_MAX_ENUM,
}
enum StdVideoAV1TransferCharacteristics {
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_RESERVED_0 = 0,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_709 = 1,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_UNSPECIFIED = 2,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_RESERVED_3 = 3,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_470_M = 4,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_470_B_G = 5,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_601 = 6,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_240 = 7,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LINEAR = 8,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LOG_100 = 9,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LOG_100_SQRT10 = 10,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_IEC_61966 = 11,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_1361 = 12,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SRGB = 13,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_2020_10_BIT = 14,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_2020_12_BIT = 15,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_2084 = 16,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_428 = 17,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_HLG = 18,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_INVALID = 0x7FFFFFFF,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoAV1TransferCharacteristics {
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_RESERVED_0 = StdVideoAV1TransferCharacteristics.STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_RESERVED_0,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_709 = StdVideoAV1TransferCharacteristics.STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_709,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_UNSPECIFIED = StdVideoAV1TransferCharacteristics.STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_UNSPECIFIED,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_RESERVED_3 = StdVideoAV1TransferCharacteristics.STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_RESERVED_3,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_470_M = StdVideoAV1TransferCharacteristics.STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_470_M,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_470_B_G = StdVideoAV1TransferCharacteristics.STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_470_B_G,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_601 = StdVideoAV1TransferCharacteristics.STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_601,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_240 = StdVideoAV1TransferCharacteristics.STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_240,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LINEAR = StdVideoAV1TransferCharacteristics.STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LINEAR,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LOG_100 = StdVideoAV1TransferCharacteristics.STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LOG_100,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LOG_100_SQRT10 = StdVideoAV1TransferCharacteristics.STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LOG_100_SQRT10,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_IEC_61966 = StdVideoAV1TransferCharacteristics.STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_IEC_61966,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_1361 = StdVideoAV1TransferCharacteristics.STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_1361,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SRGB = StdVideoAV1TransferCharacteristics.STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SRGB,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_2020_10_BIT = StdVideoAV1TransferCharacteristics.STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_2020_10_BIT,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_2020_12_BIT = StdVideoAV1TransferCharacteristics.STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_2020_12_BIT,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_2084 = StdVideoAV1TransferCharacteristics.STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_2084,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_428 = StdVideoAV1TransferCharacteristics.STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_428,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_HLG = StdVideoAV1TransferCharacteristics.STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_HLG,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_INVALID = StdVideoAV1TransferCharacteristics.STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_INVALID,
	STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_MAX_ENUM = StdVideoAV1TransferCharacteristics.STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_MAX_ENUM,
}
enum StdVideoAV1TxMode {
	STD_VIDEO_AV1_TX_MODE_ONLY_4X4 = 0,
	STD_VIDEO_AV1_TX_MODE_LARGEST = 1,
	STD_VIDEO_AV1_TX_MODE_SELECT = 2,
	STD_VIDEO_AV1_TX_MODE_INVALID = 0x7FFFFFFF,
	STD_VIDEO_AV1_TX_MODE_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoAV1TxMode {
	STD_VIDEO_AV1_TX_MODE_ONLY_4X4 = StdVideoAV1TxMode.STD_VIDEO_AV1_TX_MODE_ONLY_4X4,
	STD_VIDEO_AV1_TX_MODE_LARGEST = StdVideoAV1TxMode.STD_VIDEO_AV1_TX_MODE_LARGEST,
	STD_VIDEO_AV1_TX_MODE_SELECT = StdVideoAV1TxMode.STD_VIDEO_AV1_TX_MODE_SELECT,
	STD_VIDEO_AV1_TX_MODE_INVALID = StdVideoAV1TxMode.STD_VIDEO_AV1_TX_MODE_INVALID,
	STD_VIDEO_AV1_TX_MODE_MAX_ENUM = StdVideoAV1TxMode.STD_VIDEO_AV1_TX_MODE_MAX_ENUM,
}
enum StdVideoDecodeH264FieldOrderCount {
	STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_TOP = 0,
	STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_BOTTOM = 1,
	STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_INVALID = 0x7FFFFFFF,
	STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoDecodeH264FieldOrderCount {
	STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_TOP = StdVideoDecodeH264FieldOrderCount.STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_TOP,
	STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_BOTTOM = StdVideoDecodeH264FieldOrderCount.STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_BOTTOM,
	STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_INVALID = StdVideoDecodeH264FieldOrderCount.STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_INVALID,
	STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_MAX_ENUM = StdVideoDecodeH264FieldOrderCount.STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_MAX_ENUM,
}
enum StdVideoH264AspectRatioIdc {
	STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED = 0,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE = 1,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11 = 2,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11 = 3,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11 = 4,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33 = 5,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11 = 6,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11 = 7,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11 = 8,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33 = 9,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11 = 10,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11 = 11,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33 = 12,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99 = 13,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3 = 14,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2 = 15,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1 = 16,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR = 255,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoH264AspectRatioIdc {
	STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_MAX_ENUM = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_MAX_ENUM,
}
enum StdVideoH264CabacInitIdc {
	STD_VIDEO_H264_CABAC_INIT_IDC_0 = 0,
	STD_VIDEO_H264_CABAC_INIT_IDC_1 = 1,
	STD_VIDEO_H264_CABAC_INIT_IDC_2 = 2,
	STD_VIDEO_H264_CABAC_INIT_IDC_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H264_CABAC_INIT_IDC_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoH264CabacInitIdc {
	STD_VIDEO_H264_CABAC_INIT_IDC_0 = StdVideoH264CabacInitIdc.STD_VIDEO_H264_CABAC_INIT_IDC_0,
	STD_VIDEO_H264_CABAC_INIT_IDC_1 = StdVideoH264CabacInitIdc.STD_VIDEO_H264_CABAC_INIT_IDC_1,
	STD_VIDEO_H264_CABAC_INIT_IDC_2 = StdVideoH264CabacInitIdc.STD_VIDEO_H264_CABAC_INIT_IDC_2,
	STD_VIDEO_H264_CABAC_INIT_IDC_INVALID = StdVideoH264CabacInitIdc.STD_VIDEO_H264_CABAC_INIT_IDC_INVALID,
	STD_VIDEO_H264_CABAC_INIT_IDC_MAX_ENUM = StdVideoH264CabacInitIdc.STD_VIDEO_H264_CABAC_INIT_IDC_MAX_ENUM,
}
enum StdVideoH264ChromaFormatIdc {
	STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME = 0,
	STD_VIDEO_H264_CHROMA_FORMAT_IDC_420 = 1,
	STD_VIDEO_H264_CHROMA_FORMAT_IDC_422 = 2,
	STD_VIDEO_H264_CHROMA_FORMAT_IDC_444 = 3,
	STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H264_CHROMA_FORMAT_IDC_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoH264ChromaFormatIdc {
	STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME = StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME,
	STD_VIDEO_H264_CHROMA_FORMAT_IDC_420 = StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_420,
	STD_VIDEO_H264_CHROMA_FORMAT_IDC_422 = StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_422,
	STD_VIDEO_H264_CHROMA_FORMAT_IDC_444 = StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_444,
	STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID = StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID,
	STD_VIDEO_H264_CHROMA_FORMAT_IDC_MAX_ENUM = StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_MAX_ENUM,
}
enum StdVideoH264DisableDeblockingFilterIdc {
	STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED = 0,
	STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED = 1,
	STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL = 2,
	STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoH264DisableDeblockingFilterIdc {
	STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED = StdVideoH264DisableDeblockingFilterIdc.STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED,
	STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED = StdVideoH264DisableDeblockingFilterIdc.STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED,
	STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL = StdVideoH264DisableDeblockingFilterIdc.STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL,
	STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID = StdVideoH264DisableDeblockingFilterIdc.STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID,
	STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_MAX_ENUM = StdVideoH264DisableDeblockingFilterIdc.STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_MAX_ENUM,
}
enum StdVideoH264LevelIdc {
	STD_VIDEO_H264_LEVEL_IDC_1_0 = 0,
	STD_VIDEO_H264_LEVEL_IDC_1_1 = 1,
	STD_VIDEO_H264_LEVEL_IDC_1_2 = 2,
	STD_VIDEO_H264_LEVEL_IDC_1_3 = 3,
	STD_VIDEO_H264_LEVEL_IDC_2_0 = 4,
	STD_VIDEO_H264_LEVEL_IDC_2_1 = 5,
	STD_VIDEO_H264_LEVEL_IDC_2_2 = 6,
	STD_VIDEO_H264_LEVEL_IDC_3_0 = 7,
	STD_VIDEO_H264_LEVEL_IDC_3_1 = 8,
	STD_VIDEO_H264_LEVEL_IDC_3_2 = 9,
	STD_VIDEO_H264_LEVEL_IDC_4_0 = 10,
	STD_VIDEO_H264_LEVEL_IDC_4_1 = 11,
	STD_VIDEO_H264_LEVEL_IDC_4_2 = 12,
	STD_VIDEO_H264_LEVEL_IDC_5_0 = 13,
	STD_VIDEO_H264_LEVEL_IDC_5_1 = 14,
	STD_VIDEO_H264_LEVEL_IDC_5_2 = 15,
	STD_VIDEO_H264_LEVEL_IDC_6_0 = 16,
	STD_VIDEO_H264_LEVEL_IDC_6_1 = 17,
	STD_VIDEO_H264_LEVEL_IDC_6_2 = 18,
	STD_VIDEO_H264_LEVEL_IDC_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H264_LEVEL_IDC_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoH264LevelIdc {
	STD_VIDEO_H264_LEVEL_IDC_1_0 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_1_0,
	STD_VIDEO_H264_LEVEL_IDC_1_1 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_1_1,
	STD_VIDEO_H264_LEVEL_IDC_1_2 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_1_2,
	STD_VIDEO_H264_LEVEL_IDC_1_3 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_1_3,
	STD_VIDEO_H264_LEVEL_IDC_2_0 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_2_0,
	STD_VIDEO_H264_LEVEL_IDC_2_1 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_2_1,
	STD_VIDEO_H264_LEVEL_IDC_2_2 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_2_2,
	STD_VIDEO_H264_LEVEL_IDC_3_0 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_3_0,
	STD_VIDEO_H264_LEVEL_IDC_3_1 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_3_1,
	STD_VIDEO_H264_LEVEL_IDC_3_2 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_3_2,
	STD_VIDEO_H264_LEVEL_IDC_4_0 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_4_0,
	STD_VIDEO_H264_LEVEL_IDC_4_1 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_4_1,
	STD_VIDEO_H264_LEVEL_IDC_4_2 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_4_2,
	STD_VIDEO_H264_LEVEL_IDC_5_0 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_5_0,
	STD_VIDEO_H264_LEVEL_IDC_5_1 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_5_1,
	STD_VIDEO_H264_LEVEL_IDC_5_2 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_5_2,
	STD_VIDEO_H264_LEVEL_IDC_6_0 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_6_0,
	STD_VIDEO_H264_LEVEL_IDC_6_1 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_6_1,
	STD_VIDEO_H264_LEVEL_IDC_6_2 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_6_2,
	STD_VIDEO_H264_LEVEL_IDC_INVALID = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_INVALID,
	STD_VIDEO_H264_LEVEL_IDC_MAX_ENUM = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_MAX_ENUM,
}
enum StdVideoH264MemMgmtControlOp {
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END = 0,
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM = 1,
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM = 2,
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM = 3,
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX = 4,
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL = 5,
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM = 6,
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoH264MemMgmtControlOp {
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END = StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END,
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM = StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM,
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM = StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM,
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM = StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM,
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX = StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX,
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL = StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL,
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM = StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM,
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID = StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID,
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MAX_ENUM = StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MAX_ENUM,
}
enum StdVideoH264ModificationOfPicNumsIdc {
	STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT = 0,
	STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD = 1,
	STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM = 2,
	STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END = 3,
	STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoH264ModificationOfPicNumsIdc {
	STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT = StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT,
	STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD = StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD,
	STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM = StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM,
	STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END = StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END,
	STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID = StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID,
	STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_MAX_ENUM = StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_MAX_ENUM,
}
enum StdVideoH264NonVclNaluType {
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_SPS = 0,
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_PPS = 1,
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_AUD = 2,
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_PREFIX = 3,
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_SEQUENCE = 4,
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_STREAM = 5,
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_PRECODED = 6,
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoH264NonVclNaluType {
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_SPS = StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_SPS,
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_PPS = StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_PPS,
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_AUD = StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_AUD,
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_PREFIX = StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_PREFIX,
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_SEQUENCE = StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_SEQUENCE,
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_STREAM = StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_STREAM,
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_PRECODED = StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_PRECODED,
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_INVALID = StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_INVALID,
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_MAX_ENUM = StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_MAX_ENUM,
}
enum StdVideoH264PictureType {
	STD_VIDEO_H264_PICTURE_TYPE_P = 0,
	STD_VIDEO_H264_PICTURE_TYPE_B = 1,
	STD_VIDEO_H264_PICTURE_TYPE_I = 2,
	STD_VIDEO_H264_PICTURE_TYPE_IDR = 5,
	STD_VIDEO_H264_PICTURE_TYPE_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H264_PICTURE_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoH264PictureType {
	STD_VIDEO_H264_PICTURE_TYPE_P = StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_P,
	STD_VIDEO_H264_PICTURE_TYPE_B = StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_B,
	STD_VIDEO_H264_PICTURE_TYPE_I = StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_I,
	STD_VIDEO_H264_PICTURE_TYPE_IDR = StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_IDR,
	STD_VIDEO_H264_PICTURE_TYPE_INVALID = StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_INVALID,
	STD_VIDEO_H264_PICTURE_TYPE_MAX_ENUM = StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_MAX_ENUM,
}
enum StdVideoH264PocType {
	STD_VIDEO_H264_POC_TYPE_0 = 0,
	STD_VIDEO_H264_POC_TYPE_1 = 1,
	STD_VIDEO_H264_POC_TYPE_2 = 2,
	STD_VIDEO_H264_POC_TYPE_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H264_POC_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoH264PocType {
	STD_VIDEO_H264_POC_TYPE_0 = StdVideoH264PocType.STD_VIDEO_H264_POC_TYPE_0,
	STD_VIDEO_H264_POC_TYPE_1 = StdVideoH264PocType.STD_VIDEO_H264_POC_TYPE_1,
	STD_VIDEO_H264_POC_TYPE_2 = StdVideoH264PocType.STD_VIDEO_H264_POC_TYPE_2,
	STD_VIDEO_H264_POC_TYPE_INVALID = StdVideoH264PocType.STD_VIDEO_H264_POC_TYPE_INVALID,
	STD_VIDEO_H264_POC_TYPE_MAX_ENUM = StdVideoH264PocType.STD_VIDEO_H264_POC_TYPE_MAX_ENUM,
}
enum StdVideoH264ProfileIdc {
	STD_VIDEO_H264_PROFILE_IDC_BASELINE = 66,
	STD_VIDEO_H264_PROFILE_IDC_MAIN = 77,
	STD_VIDEO_H264_PROFILE_IDC_HIGH = 100,
	STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE = 244,
	STD_VIDEO_H264_PROFILE_IDC_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H264_PROFILE_IDC_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoH264ProfileIdc {
	STD_VIDEO_H264_PROFILE_IDC_BASELINE = StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_BASELINE,
	STD_VIDEO_H264_PROFILE_IDC_MAIN = StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_MAIN,
	STD_VIDEO_H264_PROFILE_IDC_HIGH = StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_HIGH,
	STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE = StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE,
	STD_VIDEO_H264_PROFILE_IDC_INVALID = StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_INVALID,
	STD_VIDEO_H264_PROFILE_IDC_MAX_ENUM = StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_MAX_ENUM,
}
enum StdVideoH264SliceType {
	STD_VIDEO_H264_SLICE_TYPE_P = 0,
	STD_VIDEO_H264_SLICE_TYPE_B = 1,
	STD_VIDEO_H264_SLICE_TYPE_I = 2,
	STD_VIDEO_H264_SLICE_TYPE_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H264_SLICE_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoH264SliceType {
	STD_VIDEO_H264_SLICE_TYPE_P = StdVideoH264SliceType.STD_VIDEO_H264_SLICE_TYPE_P,
	STD_VIDEO_H264_SLICE_TYPE_B = StdVideoH264SliceType.STD_VIDEO_H264_SLICE_TYPE_B,
	STD_VIDEO_H264_SLICE_TYPE_I = StdVideoH264SliceType.STD_VIDEO_H264_SLICE_TYPE_I,
	STD_VIDEO_H264_SLICE_TYPE_INVALID = StdVideoH264SliceType.STD_VIDEO_H264_SLICE_TYPE_INVALID,
	STD_VIDEO_H264_SLICE_TYPE_MAX_ENUM = StdVideoH264SliceType.STD_VIDEO_H264_SLICE_TYPE_MAX_ENUM,
}
enum StdVideoH264WeightedBipredIdc {
	STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT = 0,
	STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT = 1,
	STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT = 2,
	STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoH264WeightedBipredIdc {
	STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT = StdVideoH264WeightedBipredIdc.STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT,
	STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT = StdVideoH264WeightedBipredIdc.STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT,
	STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT = StdVideoH264WeightedBipredIdc.STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT,
	STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID = StdVideoH264WeightedBipredIdc.STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID,
	STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_MAX_ENUM = StdVideoH264WeightedBipredIdc.STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_MAX_ENUM,
}
enum StdVideoH265AspectRatioIdc {
	STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED = 0,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE = 1,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11 = 2,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11 = 3,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11 = 4,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33 = 5,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11 = 6,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11 = 7,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11 = 8,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33 = 9,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11 = 10,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11 = 11,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33 = 12,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99 = 13,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3 = 14,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2 = 15,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1 = 16,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR = 255,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoH265AspectRatioIdc {
	STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_MAX_ENUM = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_MAX_ENUM,
}
enum StdVideoH265ChromaFormatIdc {
	STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME = 0,
	STD_VIDEO_H265_CHROMA_FORMAT_IDC_420 = 1,
	STD_VIDEO_H265_CHROMA_FORMAT_IDC_422 = 2,
	STD_VIDEO_H265_CHROMA_FORMAT_IDC_444 = 3,
	STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H265_CHROMA_FORMAT_IDC_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoH265ChromaFormatIdc {
	STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME = StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME,
	STD_VIDEO_H265_CHROMA_FORMAT_IDC_420 = StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_420,
	STD_VIDEO_H265_CHROMA_FORMAT_IDC_422 = StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_422,
	STD_VIDEO_H265_CHROMA_FORMAT_IDC_444 = StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_444,
	STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID = StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID,
	STD_VIDEO_H265_CHROMA_FORMAT_IDC_MAX_ENUM = StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_MAX_ENUM,
}
enum StdVideoH265LevelIdc {
	STD_VIDEO_H265_LEVEL_IDC_1_0 = 0,
	STD_VIDEO_H265_LEVEL_IDC_2_0 = 1,
	STD_VIDEO_H265_LEVEL_IDC_2_1 = 2,
	STD_VIDEO_H265_LEVEL_IDC_3_0 = 3,
	STD_VIDEO_H265_LEVEL_IDC_3_1 = 4,
	STD_VIDEO_H265_LEVEL_IDC_4_0 = 5,
	STD_VIDEO_H265_LEVEL_IDC_4_1 = 6,
	STD_VIDEO_H265_LEVEL_IDC_5_0 = 7,
	STD_VIDEO_H265_LEVEL_IDC_5_1 = 8,
	STD_VIDEO_H265_LEVEL_IDC_5_2 = 9,
	STD_VIDEO_H265_LEVEL_IDC_6_0 = 10,
	STD_VIDEO_H265_LEVEL_IDC_6_1 = 11,
	STD_VIDEO_H265_LEVEL_IDC_6_2 = 12,
	STD_VIDEO_H265_LEVEL_IDC_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H265_LEVEL_IDC_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoH265LevelIdc {
	STD_VIDEO_H265_LEVEL_IDC_1_0 = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_1_0,
	STD_VIDEO_H265_LEVEL_IDC_2_0 = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_2_0,
	STD_VIDEO_H265_LEVEL_IDC_2_1 = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_2_1,
	STD_VIDEO_H265_LEVEL_IDC_3_0 = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_3_0,
	STD_VIDEO_H265_LEVEL_IDC_3_1 = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_3_1,
	STD_VIDEO_H265_LEVEL_IDC_4_0 = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_4_0,
	STD_VIDEO_H265_LEVEL_IDC_4_1 = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_4_1,
	STD_VIDEO_H265_LEVEL_IDC_5_0 = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_5_0,
	STD_VIDEO_H265_LEVEL_IDC_5_1 = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_5_1,
	STD_VIDEO_H265_LEVEL_IDC_5_2 = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_5_2,
	STD_VIDEO_H265_LEVEL_IDC_6_0 = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_6_0,
	STD_VIDEO_H265_LEVEL_IDC_6_1 = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_6_1,
	STD_VIDEO_H265_LEVEL_IDC_6_2 = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_6_2,
	STD_VIDEO_H265_LEVEL_IDC_INVALID = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_INVALID,
	STD_VIDEO_H265_LEVEL_IDC_MAX_ENUM = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_MAX_ENUM,
}
enum StdVideoH265PictureType {
	STD_VIDEO_H265_PICTURE_TYPE_P = 0,
	STD_VIDEO_H265_PICTURE_TYPE_B = 1,
	STD_VIDEO_H265_PICTURE_TYPE_I = 2,
	STD_VIDEO_H265_PICTURE_TYPE_IDR = 3,
	STD_VIDEO_H265_PICTURE_TYPE_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H265_PICTURE_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoH265PictureType {
	STD_VIDEO_H265_PICTURE_TYPE_P = StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_P,
	STD_VIDEO_H265_PICTURE_TYPE_B = StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_B,
	STD_VIDEO_H265_PICTURE_TYPE_I = StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_I,
	STD_VIDEO_H265_PICTURE_TYPE_IDR = StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_IDR,
	STD_VIDEO_H265_PICTURE_TYPE_INVALID = StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_INVALID,
	STD_VIDEO_H265_PICTURE_TYPE_MAX_ENUM = StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_MAX_ENUM,
}
enum StdVideoH265ProfileIdc {
	STD_VIDEO_H265_PROFILE_IDC_MAIN = 1,
	STD_VIDEO_H265_PROFILE_IDC_MAIN_10 = 2,
	STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE = 3,
	STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS = 4,
	STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS = 9,
	STD_VIDEO_H265_PROFILE_IDC_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H265_PROFILE_IDC_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoH265ProfileIdc {
	STD_VIDEO_H265_PROFILE_IDC_MAIN = StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_MAIN,
	STD_VIDEO_H265_PROFILE_IDC_MAIN_10 = StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_MAIN_10,
	STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE = StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE,
	STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS = StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS,
	STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS = StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS,
	STD_VIDEO_H265_PROFILE_IDC_INVALID = StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_INVALID,
	STD_VIDEO_H265_PROFILE_IDC_MAX_ENUM = StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_MAX_ENUM,
}
enum StdVideoH265SliceType {
	STD_VIDEO_H265_SLICE_TYPE_B = 0,
	STD_VIDEO_H265_SLICE_TYPE_P = 1,
	STD_VIDEO_H265_SLICE_TYPE_I = 2,
	STD_VIDEO_H265_SLICE_TYPE_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H265_SLICE_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
enum : StdVideoH265SliceType {
	STD_VIDEO_H265_SLICE_TYPE_B = StdVideoH265SliceType.STD_VIDEO_H265_SLICE_TYPE_B,
	STD_VIDEO_H265_SLICE_TYPE_P = StdVideoH265SliceType.STD_VIDEO_H265_SLICE_TYPE_P,
	STD_VIDEO_H265_SLICE_TYPE_I = StdVideoH265SliceType.STD_VIDEO_H265_SLICE_TYPE_I,
	STD_VIDEO_H265_SLICE_TYPE_INVALID = StdVideoH265SliceType.STD_VIDEO_H265_SLICE_TYPE_INVALID,
	STD_VIDEO_H265_SLICE_TYPE_MAX_ENUM = StdVideoH265SliceType.STD_VIDEO_H265_SLICE_TYPE_MAX_ENUM,
}
enum VkAccelerationStructureBuildTypeKHR {
	VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0,
	VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1,
	VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2,
	VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkAccelerationStructureBuildTypeKHR {
	VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = VkAccelerationStructureBuildTypeKHR.VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR,
	VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = VkAccelerationStructureBuildTypeKHR.VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR,
	VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = VkAccelerationStructureBuildTypeKHR.VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR,
	VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR = VkAccelerationStructureBuildTypeKHR.VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR,
}
enum VkAccelerationStructureCompatibilityKHR {
	VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR = 0,
	VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR = 1,
	VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkAccelerationStructureCompatibilityKHR {
	VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR = VkAccelerationStructureCompatibilityKHR.VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR,
	VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR = VkAccelerationStructureCompatibilityKHR.VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR,
	VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR = VkAccelerationStructureCompatibilityKHR.VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR,
}
enum VkAccelerationStructureCreateFlagBitsKHR {
	VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 0x00000001,
	VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 0x00000008,
	VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV = 0x00000004,
	VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkAccelerationStructureCreateFlagBitsKHR {
	VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VkAccelerationStructureCreateFlagBitsKHR.VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR,
	VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = VkAccelerationStructureCreateFlagBitsKHR.VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT,
	VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV = VkAccelerationStructureCreateFlagBitsKHR.VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV,
	VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR = VkAccelerationStructureCreateFlagBitsKHR.VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkAccelerationStructureMemoryRequirementsTypeNV {
	VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0,
	VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1,
	VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2,
	VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkAccelerationStructureMemoryRequirementsTypeNV {
	VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = VkAccelerationStructureMemoryRequirementsTypeNV.VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV,
	VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = VkAccelerationStructureMemoryRequirementsTypeNV.VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV,
	VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = VkAccelerationStructureMemoryRequirementsTypeNV.VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV,
	VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV = VkAccelerationStructureMemoryRequirementsTypeNV.VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV,
}
enum VkAccelerationStructureMotionInstanceTypeNV {
	VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV = 0,
	VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV = 1,
	VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV = 2,
	VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkAccelerationStructureMotionInstanceTypeNV {
	VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV = VkAccelerationStructureMotionInstanceTypeNV.VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV,
	VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV = VkAccelerationStructureMotionInstanceTypeNV.VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV,
	VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV = VkAccelerationStructureMotionInstanceTypeNV.VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV,
	VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV = VkAccelerationStructureMotionInstanceTypeNV.VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV,
}
enum VkAccelerationStructureTypeKHR {
	VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0,
	VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1,
	VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = 2,
	VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR,
	VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR,
	VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkAccelerationStructureTypeKHR {
	VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR,
	VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR,
	VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR,
	VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV,
	VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV,
	VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR = VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR,
}
enum VkAccessFlagBits {
	VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 0x00000001,
	VK_ACCESS_INDEX_READ_BIT = 0x00000002,
	VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 0x00000004,
	VK_ACCESS_UNIFORM_READ_BIT = 0x00000008,
	VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 0x00000010,
	VK_ACCESS_SHADER_READ_BIT = 0x00000020,
	VK_ACCESS_SHADER_WRITE_BIT = 0x00000040,
	VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 0x00000080,
	VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 0x00000100,
	VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 0x00000200,
	VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 0x00000400,
	VK_ACCESS_TRANSFER_READ_BIT = 0x00000800,
	VK_ACCESS_TRANSFER_WRITE_BIT = 0x00001000,
	VK_ACCESS_HOST_READ_BIT = 0x00002000,
	VK_ACCESS_HOST_WRITE_BIT = 0x00004000,
	VK_ACCESS_MEMORY_READ_BIT = 0x00008000,
	VK_ACCESS_MEMORY_WRITE_BIT = 0x00010000,
	VK_ACCESS_NONE = 0,
	VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 0x02000000,
	VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 0x04000000,
	VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 0x08000000,
	VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 0x00100000,
	VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 0x00080000,
	VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 0x00200000,
	VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 0x00400000,
	VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 0x01000000,
	VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 0x00800000,
	VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 0x00020000,
	VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 0x00040000,
	VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR,
	VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR,
	VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR,
	VK_ACCESS_NONE_KHR = VK_ACCESS_NONE,
	VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_EXT = VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV,
	VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_EXT = VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV,
	VK_ACCESS_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkAccessFlagBits {
	VK_ACCESS_INDIRECT_COMMAND_READ_BIT = VkAccessFlagBits.VK_ACCESS_INDIRECT_COMMAND_READ_BIT,
	VK_ACCESS_INDEX_READ_BIT = VkAccessFlagBits.VK_ACCESS_INDEX_READ_BIT,
	VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = VkAccessFlagBits.VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT,
	VK_ACCESS_UNIFORM_READ_BIT = VkAccessFlagBits.VK_ACCESS_UNIFORM_READ_BIT,
	VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = VkAccessFlagBits.VK_ACCESS_INPUT_ATTACHMENT_READ_BIT,
	VK_ACCESS_SHADER_READ_BIT = VkAccessFlagBits.VK_ACCESS_SHADER_READ_BIT,
	VK_ACCESS_SHADER_WRITE_BIT = VkAccessFlagBits.VK_ACCESS_SHADER_WRITE_BIT,
	VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = VkAccessFlagBits.VK_ACCESS_COLOR_ATTACHMENT_READ_BIT,
	VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = VkAccessFlagBits.VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT,
	VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = VkAccessFlagBits.VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT,
	VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = VkAccessFlagBits.VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT,
	VK_ACCESS_TRANSFER_READ_BIT = VkAccessFlagBits.VK_ACCESS_TRANSFER_READ_BIT,
	VK_ACCESS_TRANSFER_WRITE_BIT = VkAccessFlagBits.VK_ACCESS_TRANSFER_WRITE_BIT,
	VK_ACCESS_HOST_READ_BIT = VkAccessFlagBits.VK_ACCESS_HOST_READ_BIT,
	VK_ACCESS_HOST_WRITE_BIT = VkAccessFlagBits.VK_ACCESS_HOST_WRITE_BIT,
	VK_ACCESS_MEMORY_READ_BIT = VkAccessFlagBits.VK_ACCESS_MEMORY_READ_BIT,
	VK_ACCESS_MEMORY_WRITE_BIT = VkAccessFlagBits.VK_ACCESS_MEMORY_WRITE_BIT,
	VK_ACCESS_NONE = VkAccessFlagBits.VK_ACCESS_NONE,
	VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = VkAccessFlagBits.VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT,
	VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = VkAccessFlagBits.VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT,
	VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = VkAccessFlagBits.VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT,
	VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = VkAccessFlagBits.VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT,
	VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = VkAccessFlagBits.VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT,
	VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = VkAccessFlagBits.VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR,
	VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = VkAccessFlagBits.VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR,
	VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = VkAccessFlagBits.VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT,
	VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = VkAccessFlagBits.VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR,
	VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = VkAccessFlagBits.VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV,
	VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = VkAccessFlagBits.VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV,
	VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = VkAccessFlagBits.VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV,
	VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = VkAccessFlagBits.VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV,
	VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = VkAccessFlagBits.VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV,
	VK_ACCESS_NONE_KHR = VkAccessFlagBits.VK_ACCESS_NONE_KHR,
	VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_EXT = VkAccessFlagBits.VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_EXT,
	VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_EXT = VkAccessFlagBits.VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_EXT,
	VK_ACCESS_FLAG_BITS_MAX_ENUM = VkAccessFlagBits.VK_ACCESS_FLAG_BITS_MAX_ENUM,
}
enum VkAccessFlagBits2 {
	VK_ACCESS_2_NONE = 0UL,
	VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT = 0x00000001UL,
	VK_ACCESS_2_INDEX_READ_BIT = 0x00000002UL,
	VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT = 0x00000004UL,
	VK_ACCESS_2_UNIFORM_READ_BIT = 0x00000008UL,
	VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT = 0x00000010UL,
	VK_ACCESS_2_SHADER_READ_BIT = 0x00000020UL,
	VK_ACCESS_2_SHADER_WRITE_BIT = 0x00000040UL,
	VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT = 0x00000080UL,
	VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT = 0x00000100UL,
	VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 0x00000200UL,
	VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 0x00000400UL,
	VK_ACCESS_2_TRANSFER_READ_BIT = 0x00000800UL,
	VK_ACCESS_2_TRANSFER_WRITE_BIT = 0x00001000UL,
	VK_ACCESS_2_HOST_READ_BIT = 0x00002000UL,
	VK_ACCESS_2_HOST_WRITE_BIT = 0x00004000UL,
	VK_ACCESS_2_MEMORY_READ_BIT = 0x00008000UL,
	VK_ACCESS_2_MEMORY_WRITE_BIT = 0x00010000UL,
	VK_ACCESS_2_SHADER_SAMPLED_READ_BIT = 0x100000000UL,
	VK_ACCESS_2_SHADER_STORAGE_READ_BIT = 0x200000000UL,
	VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT = 0x400000000UL,
	VK_ACCESS_2_VIDEO_DECODE_READ_BIT_KHR = 0x800000000UL,
	VK_ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR = 0x1000000000UL,
	VK_ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR = 0x2000000000UL,
	VK_ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR = 0x4000000000UL,
	VK_ACCESS_2_NONE_KHR = 0UL,
	VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR = 0x00000001UL,
	VK_ACCESS_2_INDEX_READ_BIT_KHR = 0x00000002UL,
	VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR = 0x00000004UL,
	VK_ACCESS_2_UNIFORM_READ_BIT_KHR = 0x00000008UL,
	VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR = 0x00000010UL,
	VK_ACCESS_2_SHADER_READ_BIT_KHR = 0x00000020UL,
	VK_ACCESS_2_SHADER_WRITE_BIT_KHR = 0x00000040UL,
	VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR = 0x00000080UL,
	VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR = 0x00000100UL,
	VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR = 0x00000200UL,
	VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR = 0x00000400UL,
	VK_ACCESS_2_TRANSFER_READ_BIT_KHR = 0x00000800UL,
	VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR = 0x00001000UL,
	VK_ACCESS_2_HOST_READ_BIT_KHR = 0x00002000UL,
	VK_ACCESS_2_HOST_WRITE_BIT_KHR = 0x00004000UL,
	VK_ACCESS_2_MEMORY_READ_BIT_KHR = 0x00008000UL,
	VK_ACCESS_2_MEMORY_WRITE_BIT_KHR = 0x00010000UL,
	VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR = 0x100000000UL,
	VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR = 0x200000000UL,
	VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR = 0x400000000UL,
	VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 0x02000000UL,
	VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 0x04000000UL,
	VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 0x08000000UL,
	VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT = 0x00100000UL,
	VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV = 0x00020000UL,
	VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV = 0x00040000UL,
	VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_EXT = 0x00020000UL,
	VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_EXT = 0x00040000UL,
	VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 0x00800000UL,
	VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV = 0x00800000UL,
	VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR = 0x00200000UL,
	VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 0x00400000UL,
	VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV = 0x00200000UL,
	VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV = 0x00400000UL,
	VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 0x01000000UL,
	VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 0x00080000UL,
	VK_ACCESS_2_DESCRIPTOR_BUFFER_READ_BIT_EXT = 0x20000000000UL,
	VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI = 0x8000000000UL,
	VK_ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR = 0x10000000000UL,
	VK_ACCESS_2_MICROMAP_READ_BIT_EXT = 0x100000000000UL,
	VK_ACCESS_2_MICROMAP_WRITE_BIT_EXT = 0x200000000000UL,
	VK_ACCESS_2_OPTICAL_FLOW_READ_BIT_NV = 0x40000000000UL,
	VK_ACCESS_2_OPTICAL_FLOW_WRITE_BIT_NV = 0x80000000000UL,
}
enum : VkAccessFlagBits2 {
	VK_ACCESS_2_NONE = VkAccessFlagBits2.VK_ACCESS_2_NONE,
	VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT = VkAccessFlagBits2.VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT,
	VK_ACCESS_2_INDEX_READ_BIT = VkAccessFlagBits2.VK_ACCESS_2_INDEX_READ_BIT,
	VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT = VkAccessFlagBits2.VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT,
	VK_ACCESS_2_UNIFORM_READ_BIT = VkAccessFlagBits2.VK_ACCESS_2_UNIFORM_READ_BIT,
	VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT = VkAccessFlagBits2.VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT,
	VK_ACCESS_2_SHADER_READ_BIT = VkAccessFlagBits2.VK_ACCESS_2_SHADER_READ_BIT,
	VK_ACCESS_2_SHADER_WRITE_BIT = VkAccessFlagBits2.VK_ACCESS_2_SHADER_WRITE_BIT,
	VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT = VkAccessFlagBits2.VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT,
	VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT = VkAccessFlagBits2.VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT,
	VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT = VkAccessFlagBits2.VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT,
	VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = VkAccessFlagBits2.VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT,
	VK_ACCESS_2_TRANSFER_READ_BIT = VkAccessFlagBits2.VK_ACCESS_2_TRANSFER_READ_BIT,
	VK_ACCESS_2_TRANSFER_WRITE_BIT = VkAccessFlagBits2.VK_ACCESS_2_TRANSFER_WRITE_BIT,
	VK_ACCESS_2_HOST_READ_BIT = VkAccessFlagBits2.VK_ACCESS_2_HOST_READ_BIT,
	VK_ACCESS_2_HOST_WRITE_BIT = VkAccessFlagBits2.VK_ACCESS_2_HOST_WRITE_BIT,
	VK_ACCESS_2_MEMORY_READ_BIT = VkAccessFlagBits2.VK_ACCESS_2_MEMORY_READ_BIT,
	VK_ACCESS_2_MEMORY_WRITE_BIT = VkAccessFlagBits2.VK_ACCESS_2_MEMORY_WRITE_BIT,
	VK_ACCESS_2_SHADER_SAMPLED_READ_BIT = VkAccessFlagBits2.VK_ACCESS_2_SHADER_SAMPLED_READ_BIT,
	VK_ACCESS_2_SHADER_STORAGE_READ_BIT = VkAccessFlagBits2.VK_ACCESS_2_SHADER_STORAGE_READ_BIT,
	VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT = VkAccessFlagBits2.VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT,
	VK_ACCESS_2_VIDEO_DECODE_READ_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_VIDEO_DECODE_READ_BIT_KHR,
	VK_ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR,
	VK_ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR,
	VK_ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR,
	VK_ACCESS_2_NONE_KHR = VkAccessFlagBits2.VK_ACCESS_2_NONE_KHR,
	VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR,
	VK_ACCESS_2_INDEX_READ_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_INDEX_READ_BIT_KHR,
	VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR,
	VK_ACCESS_2_UNIFORM_READ_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_UNIFORM_READ_BIT_KHR,
	VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR,
	VK_ACCESS_2_SHADER_READ_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_SHADER_READ_BIT_KHR,
	VK_ACCESS_2_SHADER_WRITE_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_SHADER_WRITE_BIT_KHR,
	VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR,
	VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR,
	VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR,
	VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR,
	VK_ACCESS_2_TRANSFER_READ_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_TRANSFER_READ_BIT_KHR,
	VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR,
	VK_ACCESS_2_HOST_READ_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_HOST_READ_BIT_KHR,
	VK_ACCESS_2_HOST_WRITE_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_HOST_WRITE_BIT_KHR,
	VK_ACCESS_2_MEMORY_READ_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_MEMORY_READ_BIT_KHR,
	VK_ACCESS_2_MEMORY_WRITE_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_MEMORY_WRITE_BIT_KHR,
	VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR,
	VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR,
	VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR,
	VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = VkAccessFlagBits2.VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT,
	VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = VkAccessFlagBits2.VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT,
	VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = VkAccessFlagBits2.VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT,
	VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT = VkAccessFlagBits2.VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT,
	VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV = VkAccessFlagBits2.VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV,
	VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV = VkAccessFlagBits2.VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV,
	VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_EXT = VkAccessFlagBits2.VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_EXT,
	VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_EXT = VkAccessFlagBits2.VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_EXT,
	VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR,
	VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV = VkAccessFlagBits2.VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV,
	VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR,
	VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR,
	VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV = VkAccessFlagBits2.VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV,
	VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV = VkAccessFlagBits2.VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV,
	VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = VkAccessFlagBits2.VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT,
	VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = VkAccessFlagBits2.VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT,
	VK_ACCESS_2_DESCRIPTOR_BUFFER_READ_BIT_EXT = VkAccessFlagBits2.VK_ACCESS_2_DESCRIPTOR_BUFFER_READ_BIT_EXT,
	VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI = VkAccessFlagBits2.VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI,
	VK_ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR = VkAccessFlagBits2.VK_ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR,
	VK_ACCESS_2_MICROMAP_READ_BIT_EXT = VkAccessFlagBits2.VK_ACCESS_2_MICROMAP_READ_BIT_EXT,
	VK_ACCESS_2_MICROMAP_WRITE_BIT_EXT = VkAccessFlagBits2.VK_ACCESS_2_MICROMAP_WRITE_BIT_EXT,
	VK_ACCESS_2_OPTICAL_FLOW_READ_BIT_NV = VkAccessFlagBits2.VK_ACCESS_2_OPTICAL_FLOW_READ_BIT_NV,
	VK_ACCESS_2_OPTICAL_FLOW_WRITE_BIT_NV = VkAccessFlagBits2.VK_ACCESS_2_OPTICAL_FLOW_WRITE_BIT_NV,
}
enum VkAccessFlagBits3KHR {
	VK_ACCESS_3_NONE_KHR = 0UL,
}
enum : VkAccessFlagBits3KHR {
	VK_ACCESS_3_NONE_KHR = VkAccessFlagBits3KHR.VK_ACCESS_3_NONE_KHR,
}
enum VkAcquireProfilingLockFlagBitsKHR {
	VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkAcquireProfilingLockFlagBitsKHR {
	VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR = VkAcquireProfilingLockFlagBitsKHR.VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkAntiLagModeAMD {
	VK_ANTI_LAG_MODE_DRIVER_CONTROL_AMD = 0,
	VK_ANTI_LAG_MODE_ON_AMD = 1,
	VK_ANTI_LAG_MODE_OFF_AMD = 2,
	VK_ANTI_LAG_MODE_MAX_ENUM_AMD = 0x7FFFFFFF,
}
enum : VkAntiLagModeAMD {
	VK_ANTI_LAG_MODE_DRIVER_CONTROL_AMD = VkAntiLagModeAMD.VK_ANTI_LAG_MODE_DRIVER_CONTROL_AMD,
	VK_ANTI_LAG_MODE_ON_AMD = VkAntiLagModeAMD.VK_ANTI_LAG_MODE_ON_AMD,
	VK_ANTI_LAG_MODE_OFF_AMD = VkAntiLagModeAMD.VK_ANTI_LAG_MODE_OFF_AMD,
	VK_ANTI_LAG_MODE_MAX_ENUM_AMD = VkAntiLagModeAMD.VK_ANTI_LAG_MODE_MAX_ENUM_AMD,
}
enum VkAntiLagStageAMD {
	VK_ANTI_LAG_STAGE_INPUT_AMD = 0,
	VK_ANTI_LAG_STAGE_PRESENT_AMD = 1,
	VK_ANTI_LAG_STAGE_MAX_ENUM_AMD = 0x7FFFFFFF,
}
enum : VkAntiLagStageAMD {
	VK_ANTI_LAG_STAGE_INPUT_AMD = VkAntiLagStageAMD.VK_ANTI_LAG_STAGE_INPUT_AMD,
	VK_ANTI_LAG_STAGE_PRESENT_AMD = VkAntiLagStageAMD.VK_ANTI_LAG_STAGE_PRESENT_AMD,
	VK_ANTI_LAG_STAGE_MAX_ENUM_AMD = VkAntiLagStageAMD.VK_ANTI_LAG_STAGE_MAX_ENUM_AMD,
}
enum VkAttachmentDescriptionFlagBits {
	VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 0x00000001,
	VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkAttachmentDescriptionFlagBits {
	VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = VkAttachmentDescriptionFlagBits.VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT,
	VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = VkAttachmentDescriptionFlagBits.VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM,
}
enum VkAttachmentLoadOp {
	VK_ATTACHMENT_LOAD_OP_LOAD = 0,
	VK_ATTACHMENT_LOAD_OP_CLEAR = 1,
	VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,
	VK_ATTACHMENT_LOAD_OP_NONE = 1000400000,
	VK_ATTACHMENT_LOAD_OP_NONE_EXT = VK_ATTACHMENT_LOAD_OP_NONE,
	VK_ATTACHMENT_LOAD_OP_NONE_KHR = VK_ATTACHMENT_LOAD_OP_NONE,
	VK_ATTACHMENT_LOAD_OP_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkAttachmentLoadOp {
	VK_ATTACHMENT_LOAD_OP_LOAD = VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_LOAD,
	VK_ATTACHMENT_LOAD_OP_CLEAR = VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_CLEAR,
	VK_ATTACHMENT_LOAD_OP_DONT_CARE = VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_DONT_CARE,
	VK_ATTACHMENT_LOAD_OP_NONE = VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_NONE,
	VK_ATTACHMENT_LOAD_OP_NONE_EXT = VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_NONE_EXT,
	VK_ATTACHMENT_LOAD_OP_NONE_KHR = VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_NONE_KHR,
	VK_ATTACHMENT_LOAD_OP_MAX_ENUM = VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_MAX_ENUM,
}
enum VkAttachmentStoreOp {
	VK_ATTACHMENT_STORE_OP_STORE = 0,
	VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,
	VK_ATTACHMENT_STORE_OP_NONE = 1000301000,
	VK_ATTACHMENT_STORE_OP_NONE_KHR = VK_ATTACHMENT_STORE_OP_NONE,
	VK_ATTACHMENT_STORE_OP_NONE_QCOM = VK_ATTACHMENT_STORE_OP_NONE,
	VK_ATTACHMENT_STORE_OP_NONE_EXT = VK_ATTACHMENT_STORE_OP_NONE,
	VK_ATTACHMENT_STORE_OP_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkAttachmentStoreOp {
	VK_ATTACHMENT_STORE_OP_STORE = VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_STORE,
	VK_ATTACHMENT_STORE_OP_DONT_CARE = VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_DONT_CARE,
	VK_ATTACHMENT_STORE_OP_NONE = VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_NONE,
	VK_ATTACHMENT_STORE_OP_NONE_KHR = VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_NONE_KHR,
	VK_ATTACHMENT_STORE_OP_NONE_QCOM = VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_NONE_QCOM,
	VK_ATTACHMENT_STORE_OP_NONE_EXT = VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_NONE_EXT,
	VK_ATTACHMENT_STORE_OP_MAX_ENUM = VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_MAX_ENUM,
}
enum VkBlendFactor {
	VK_BLEND_FACTOR_ZERO = 0,
	VK_BLEND_FACTOR_ONE = 1,
	VK_BLEND_FACTOR_SRC_COLOR = 2,
	VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
	VK_BLEND_FACTOR_DST_COLOR = 4,
	VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
	VK_BLEND_FACTOR_SRC_ALPHA = 6,
	VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
	VK_BLEND_FACTOR_DST_ALPHA = 8,
	VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
	VK_BLEND_FACTOR_CONSTANT_COLOR = 10,
	VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
	VK_BLEND_FACTOR_CONSTANT_ALPHA = 12,
	VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
	VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
	VK_BLEND_FACTOR_SRC1_COLOR = 15,
	VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
	VK_BLEND_FACTOR_SRC1_ALPHA = 17,
	VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18,
	VK_BLEND_FACTOR_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkBlendFactor {
	VK_BLEND_FACTOR_ZERO = VkBlendFactor.VK_BLEND_FACTOR_ZERO,
	VK_BLEND_FACTOR_ONE = VkBlendFactor.VK_BLEND_FACTOR_ONE,
	VK_BLEND_FACTOR_SRC_COLOR = VkBlendFactor.VK_BLEND_FACTOR_SRC_COLOR,
	VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR,
	VK_BLEND_FACTOR_DST_COLOR = VkBlendFactor.VK_BLEND_FACTOR_DST_COLOR,
	VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR,
	VK_BLEND_FACTOR_SRC_ALPHA = VkBlendFactor.VK_BLEND_FACTOR_SRC_ALPHA,
	VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA,
	VK_BLEND_FACTOR_DST_ALPHA = VkBlendFactor.VK_BLEND_FACTOR_DST_ALPHA,
	VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA,
	VK_BLEND_FACTOR_CONSTANT_COLOR = VkBlendFactor.VK_BLEND_FACTOR_CONSTANT_COLOR,
	VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR,
	VK_BLEND_FACTOR_CONSTANT_ALPHA = VkBlendFactor.VK_BLEND_FACTOR_CONSTANT_ALPHA,
	VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA,
	VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = VkBlendFactor.VK_BLEND_FACTOR_SRC_ALPHA_SATURATE,
	VK_BLEND_FACTOR_SRC1_COLOR = VkBlendFactor.VK_BLEND_FACTOR_SRC1_COLOR,
	VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR,
	VK_BLEND_FACTOR_SRC1_ALPHA = VkBlendFactor.VK_BLEND_FACTOR_SRC1_ALPHA,
	VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA,
	VK_BLEND_FACTOR_MAX_ENUM = VkBlendFactor.VK_BLEND_FACTOR_MAX_ENUM,
}
enum VkBlendOp {
	VK_BLEND_OP_ADD = 0,
	VK_BLEND_OP_SUBTRACT = 1,
	VK_BLEND_OP_REVERSE_SUBTRACT = 2,
	VK_BLEND_OP_MIN = 3,
	VK_BLEND_OP_MAX = 4,
	VK_BLEND_OP_ZERO_EXT = 1000148000,
	VK_BLEND_OP_SRC_EXT = 1000148001,
	VK_BLEND_OP_DST_EXT = 1000148002,
	VK_BLEND_OP_SRC_OVER_EXT = 1000148003,
	VK_BLEND_OP_DST_OVER_EXT = 1000148004,
	VK_BLEND_OP_SRC_IN_EXT = 1000148005,
	VK_BLEND_OP_DST_IN_EXT = 1000148006,
	VK_BLEND_OP_SRC_OUT_EXT = 1000148007,
	VK_BLEND_OP_DST_OUT_EXT = 1000148008,
	VK_BLEND_OP_SRC_ATOP_EXT = 1000148009,
	VK_BLEND_OP_DST_ATOP_EXT = 1000148010,
	VK_BLEND_OP_XOR_EXT = 1000148011,
	VK_BLEND_OP_MULTIPLY_EXT = 1000148012,
	VK_BLEND_OP_SCREEN_EXT = 1000148013,
	VK_BLEND_OP_OVERLAY_EXT = 1000148014,
	VK_BLEND_OP_DARKEN_EXT = 1000148015,
	VK_BLEND_OP_LIGHTEN_EXT = 1000148016,
	VK_BLEND_OP_COLORDODGE_EXT = 1000148017,
	VK_BLEND_OP_COLORBURN_EXT = 1000148018,
	VK_BLEND_OP_HARDLIGHT_EXT = 1000148019,
	VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020,
	VK_BLEND_OP_DIFFERENCE_EXT = 1000148021,
	VK_BLEND_OP_EXCLUSION_EXT = 1000148022,
	VK_BLEND_OP_INVERT_EXT = 1000148023,
	VK_BLEND_OP_INVERT_RGB_EXT = 1000148024,
	VK_BLEND_OP_LINEARDODGE_EXT = 1000148025,
	VK_BLEND_OP_LINEARBURN_EXT = 1000148026,
	VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027,
	VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028,
	VK_BLEND_OP_PINLIGHT_EXT = 1000148029,
	VK_BLEND_OP_HARDMIX_EXT = 1000148030,
	VK_BLEND_OP_HSL_HUE_EXT = 1000148031,
	VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032,
	VK_BLEND_OP_HSL_COLOR_EXT = 1000148033,
	VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034,
	VK_BLEND_OP_PLUS_EXT = 1000148035,
	VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036,
	VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037,
	VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038,
	VK_BLEND_OP_MINUS_EXT = 1000148039,
	VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040,
	VK_BLEND_OP_CONTRAST_EXT = 1000148041,
	VK_BLEND_OP_INVERT_OVG_EXT = 1000148042,
	VK_BLEND_OP_RED_EXT = 1000148043,
	VK_BLEND_OP_GREEN_EXT = 1000148044,
	VK_BLEND_OP_BLUE_EXT = 1000148045,
	VK_BLEND_OP_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkBlendOp {
	VK_BLEND_OP_ADD = VkBlendOp.VK_BLEND_OP_ADD,
	VK_BLEND_OP_SUBTRACT = VkBlendOp.VK_BLEND_OP_SUBTRACT,
	VK_BLEND_OP_REVERSE_SUBTRACT = VkBlendOp.VK_BLEND_OP_REVERSE_SUBTRACT,
	VK_BLEND_OP_MIN = VkBlendOp.VK_BLEND_OP_MIN,
	VK_BLEND_OP_MAX = VkBlendOp.VK_BLEND_OP_MAX,
	VK_BLEND_OP_ZERO_EXT = VkBlendOp.VK_BLEND_OP_ZERO_EXT,
	VK_BLEND_OP_SRC_EXT = VkBlendOp.VK_BLEND_OP_SRC_EXT,
	VK_BLEND_OP_DST_EXT = VkBlendOp.VK_BLEND_OP_DST_EXT,
	VK_BLEND_OP_SRC_OVER_EXT = VkBlendOp.VK_BLEND_OP_SRC_OVER_EXT,
	VK_BLEND_OP_DST_OVER_EXT = VkBlendOp.VK_BLEND_OP_DST_OVER_EXT,
	VK_BLEND_OP_SRC_IN_EXT = VkBlendOp.VK_BLEND_OP_SRC_IN_EXT,
	VK_BLEND_OP_DST_IN_EXT = VkBlendOp.VK_BLEND_OP_DST_IN_EXT,
	VK_BLEND_OP_SRC_OUT_EXT = VkBlendOp.VK_BLEND_OP_SRC_OUT_EXT,
	VK_BLEND_OP_DST_OUT_EXT = VkBlendOp.VK_BLEND_OP_DST_OUT_EXT,
	VK_BLEND_OP_SRC_ATOP_EXT = VkBlendOp.VK_BLEND_OP_SRC_ATOP_EXT,
	VK_BLEND_OP_DST_ATOP_EXT = VkBlendOp.VK_BLEND_OP_DST_ATOP_EXT,
	VK_BLEND_OP_XOR_EXT = VkBlendOp.VK_BLEND_OP_XOR_EXT,
	VK_BLEND_OP_MULTIPLY_EXT = VkBlendOp.VK_BLEND_OP_MULTIPLY_EXT,
	VK_BLEND_OP_SCREEN_EXT = VkBlendOp.VK_BLEND_OP_SCREEN_EXT,
	VK_BLEND_OP_OVERLAY_EXT = VkBlendOp.VK_BLEND_OP_OVERLAY_EXT,
	VK_BLEND_OP_DARKEN_EXT = VkBlendOp.VK_BLEND_OP_DARKEN_EXT,
	VK_BLEND_OP_LIGHTEN_EXT = VkBlendOp.VK_BLEND_OP_LIGHTEN_EXT,
	VK_BLEND_OP_COLORDODGE_EXT = VkBlendOp.VK_BLEND_OP_COLORDODGE_EXT,
	VK_BLEND_OP_COLORBURN_EXT = VkBlendOp.VK_BLEND_OP_COLORBURN_EXT,
	VK_BLEND_OP_HARDLIGHT_EXT = VkBlendOp.VK_BLEND_OP_HARDLIGHT_EXT,
	VK_BLEND_OP_SOFTLIGHT_EXT = VkBlendOp.VK_BLEND_OP_SOFTLIGHT_EXT,
	VK_BLEND_OP_DIFFERENCE_EXT = VkBlendOp.VK_BLEND_OP_DIFFERENCE_EXT,
	VK_BLEND_OP_EXCLUSION_EXT = VkBlendOp.VK_BLEND_OP_EXCLUSION_EXT,
	VK_BLEND_OP_INVERT_EXT = VkBlendOp.VK_BLEND_OP_INVERT_EXT,
	VK_BLEND_OP_INVERT_RGB_EXT = VkBlendOp.VK_BLEND_OP_INVERT_RGB_EXT,
	VK_BLEND_OP_LINEARDODGE_EXT = VkBlendOp.VK_BLEND_OP_LINEARDODGE_EXT,
	VK_BLEND_OP_LINEARBURN_EXT = VkBlendOp.VK_BLEND_OP_LINEARBURN_EXT,
	VK_BLEND_OP_VIVIDLIGHT_EXT = VkBlendOp.VK_BLEND_OP_VIVIDLIGHT_EXT,
	VK_BLEND_OP_LINEARLIGHT_EXT = VkBlendOp.VK_BLEND_OP_LINEARLIGHT_EXT,
	VK_BLEND_OP_PINLIGHT_EXT = VkBlendOp.VK_BLEND_OP_PINLIGHT_EXT,
	VK_BLEND_OP_HARDMIX_EXT = VkBlendOp.VK_BLEND_OP_HARDMIX_EXT,
	VK_BLEND_OP_HSL_HUE_EXT = VkBlendOp.VK_BLEND_OP_HSL_HUE_EXT,
	VK_BLEND_OP_HSL_SATURATION_EXT = VkBlendOp.VK_BLEND_OP_HSL_SATURATION_EXT,
	VK_BLEND_OP_HSL_COLOR_EXT = VkBlendOp.VK_BLEND_OP_HSL_COLOR_EXT,
	VK_BLEND_OP_HSL_LUMINOSITY_EXT = VkBlendOp.VK_BLEND_OP_HSL_LUMINOSITY_EXT,
	VK_BLEND_OP_PLUS_EXT = VkBlendOp.VK_BLEND_OP_PLUS_EXT,
	VK_BLEND_OP_PLUS_CLAMPED_EXT = VkBlendOp.VK_BLEND_OP_PLUS_CLAMPED_EXT,
	VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = VkBlendOp.VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT,
	VK_BLEND_OP_PLUS_DARKER_EXT = VkBlendOp.VK_BLEND_OP_PLUS_DARKER_EXT,
	VK_BLEND_OP_MINUS_EXT = VkBlendOp.VK_BLEND_OP_MINUS_EXT,
	VK_BLEND_OP_MINUS_CLAMPED_EXT = VkBlendOp.VK_BLEND_OP_MINUS_CLAMPED_EXT,
	VK_BLEND_OP_CONTRAST_EXT = VkBlendOp.VK_BLEND_OP_CONTRAST_EXT,
	VK_BLEND_OP_INVERT_OVG_EXT = VkBlendOp.VK_BLEND_OP_INVERT_OVG_EXT,
	VK_BLEND_OP_RED_EXT = VkBlendOp.VK_BLEND_OP_RED_EXT,
	VK_BLEND_OP_GREEN_EXT = VkBlendOp.VK_BLEND_OP_GREEN_EXT,
	VK_BLEND_OP_BLUE_EXT = VkBlendOp.VK_BLEND_OP_BLUE_EXT,
	VK_BLEND_OP_MAX_ENUM = VkBlendOp.VK_BLEND_OP_MAX_ENUM,
}
enum VkBlendOverlapEXT {
	VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0,
	VK_BLEND_OVERLAP_DISJOINT_EXT = 1,
	VK_BLEND_OVERLAP_CONJOINT_EXT = 2,
	VK_BLEND_OVERLAP_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkBlendOverlapEXT {
	VK_BLEND_OVERLAP_UNCORRELATED_EXT = VkBlendOverlapEXT.VK_BLEND_OVERLAP_UNCORRELATED_EXT,
	VK_BLEND_OVERLAP_DISJOINT_EXT = VkBlendOverlapEXT.VK_BLEND_OVERLAP_DISJOINT_EXT,
	VK_BLEND_OVERLAP_CONJOINT_EXT = VkBlendOverlapEXT.VK_BLEND_OVERLAP_CONJOINT_EXT,
	VK_BLEND_OVERLAP_MAX_ENUM_EXT = VkBlendOverlapEXT.VK_BLEND_OVERLAP_MAX_ENUM_EXT,
}
enum VkBlockMatchWindowCompareModeQCOM {
	VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MIN_QCOM = 0,
	VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_QCOM = 1,
	VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_ENUM_QCOM = 0x7FFFFFFF,
}
enum : VkBlockMatchWindowCompareModeQCOM {
	VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MIN_QCOM = VkBlockMatchWindowCompareModeQCOM.VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MIN_QCOM,
	VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_QCOM = VkBlockMatchWindowCompareModeQCOM.VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_QCOM,
	VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_ENUM_QCOM = VkBlockMatchWindowCompareModeQCOM.VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_ENUM_QCOM,
}
enum VkBorderColor {
	VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
	VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
	VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
	VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3,
	VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
	VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5,
	VK_BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003,
	VK_BORDER_COLOR_INT_CUSTOM_EXT = 1000287004,
	VK_BORDER_COLOR_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkBorderColor {
	VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = VkBorderColor.VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK,
	VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = VkBorderColor.VK_BORDER_COLOR_INT_TRANSPARENT_BLACK,
	VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = VkBorderColor.VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK,
	VK_BORDER_COLOR_INT_OPAQUE_BLACK = VkBorderColor.VK_BORDER_COLOR_INT_OPAQUE_BLACK,
	VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = VkBorderColor.VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE,
	VK_BORDER_COLOR_INT_OPAQUE_WHITE = VkBorderColor.VK_BORDER_COLOR_INT_OPAQUE_WHITE,
	VK_BORDER_COLOR_FLOAT_CUSTOM_EXT = VkBorderColor.VK_BORDER_COLOR_FLOAT_CUSTOM_EXT,
	VK_BORDER_COLOR_INT_CUSTOM_EXT = VkBorderColor.VK_BORDER_COLOR_INT_CUSTOM_EXT,
	VK_BORDER_COLOR_MAX_ENUM = VkBorderColor.VK_BORDER_COLOR_MAX_ENUM,
}
enum VkBufferCreateFlagBits {
	VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 0x00000001,
	VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002,
	VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 0x00000004,
	VK_BUFFER_CREATE_PROTECTED_BIT = 0x00000008,
	VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 0x00000010,
	VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 0x00000020,
	VK_BUFFER_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR = 0x00000040,
	VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
	VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
	VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkBufferCreateFlagBits {
	VK_BUFFER_CREATE_SPARSE_BINDING_BIT = VkBufferCreateFlagBits.VK_BUFFER_CREATE_SPARSE_BINDING_BIT,
	VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = VkBufferCreateFlagBits.VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT,
	VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = VkBufferCreateFlagBits.VK_BUFFER_CREATE_SPARSE_ALIASED_BIT,
	VK_BUFFER_CREATE_PROTECTED_BIT = VkBufferCreateFlagBits.VK_BUFFER_CREATE_PROTECTED_BIT,
	VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = VkBufferCreateFlagBits.VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
	VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = VkBufferCreateFlagBits.VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT,
	VK_BUFFER_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR = VkBufferCreateFlagBits.VK_BUFFER_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR,
	VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = VkBufferCreateFlagBits.VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT,
	VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VkBufferCreateFlagBits.VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR,
	VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = VkBufferCreateFlagBits.VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM,
}
enum VkBufferUsageFlagBits {
	VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 0x00000001,
	VK_BUFFER_USAGE_TRANSFER_DST_BIT = 0x00000002,
	VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000004,
	VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 0x00000008,
	VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 0x00000010,
	VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 0x00000020,
	VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 0x00000040,
	VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 0x00000080,
	VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 0x00000100,
	VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 0x00020000,
	VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 0x00002000,
	VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR = 0x00004000,
	VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 0x00000800,
	VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 0x00001000,
	VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 0x00000200,
	VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 0x00080000,
	VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 0x00100000,
	VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = 0x00000400,
	VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR = 0x00008000,
	VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = 0x00010000,
	VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT = 0x00200000,
	VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT = 0x00400000,
	VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT = 0x04000000,
	VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT = 0x00800000,
	VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT = 0x01000000,
	VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR,
	VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT,
	VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT,
	VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkBufferUsageFlagBits {
	VK_BUFFER_USAGE_TRANSFER_SRC_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_TRANSFER_SRC_BIT,
	VK_BUFFER_USAGE_TRANSFER_DST_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_TRANSFER_DST_BIT,
	VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT,
	VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT,
	VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT,
	VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_STORAGE_BUFFER_BIT,
	VK_BUFFER_USAGE_INDEX_BUFFER_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_INDEX_BUFFER_BIT,
	VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_VERTEX_BUFFER_BIT,
	VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT,
	VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT,
	VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR = VkBufferUsageFlagBits.VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR,
	VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR = VkBufferUsageFlagBits.VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR,
	VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT,
	VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT,
	VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT,
	VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = VkBufferUsageFlagBits.VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR,
	VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = VkBufferUsageFlagBits.VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR,
	VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = VkBufferUsageFlagBits.VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR,
	VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR = VkBufferUsageFlagBits.VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR,
	VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = VkBufferUsageFlagBits.VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR,
	VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT,
	VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT,
	VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT,
	VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT,
	VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT,
	VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = VkBufferUsageFlagBits.VK_BUFFER_USAGE_RAY_TRACING_BIT_NV,
	VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT,
	VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = VkBufferUsageFlagBits.VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR,
	VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = VkBufferUsageFlagBits.VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM,
}
enum VkBufferUsageFlagBits2 {
	VK_BUFFER_USAGE_2_TRANSFER_SRC_BIT = 0x00000001UL,
	VK_BUFFER_USAGE_2_TRANSFER_DST_BIT = 0x00000002UL,
	VK_BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT = 0x00000004UL,
	VK_BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT = 0x00000008UL,
	VK_BUFFER_USAGE_2_UNIFORM_BUFFER_BIT = 0x00000010UL,
	VK_BUFFER_USAGE_2_STORAGE_BUFFER_BIT = 0x00000020UL,
	VK_BUFFER_USAGE_2_INDEX_BUFFER_BIT = 0x00000040UL,
	VK_BUFFER_USAGE_2_VERTEX_BUFFER_BIT = 0x00000080UL,
	VK_BUFFER_USAGE_2_INDIRECT_BUFFER_BIT = 0x00000100UL,
	VK_BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT = 0x00020000UL,
	VK_BUFFER_USAGE_2_TRANSFER_SRC_BIT_KHR = 0x00000001UL,
	VK_BUFFER_USAGE_2_TRANSFER_DST_BIT_KHR = 0x00000002UL,
	VK_BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR = 0x00000004UL,
	VK_BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT_KHR = 0x00000008UL,
	VK_BUFFER_USAGE_2_UNIFORM_BUFFER_BIT_KHR = 0x00000010UL,
	VK_BUFFER_USAGE_2_STORAGE_BUFFER_BIT_KHR = 0x00000020UL,
	VK_BUFFER_USAGE_2_INDEX_BUFFER_BIT_KHR = 0x00000040UL,
	VK_BUFFER_USAGE_2_VERTEX_BUFFER_BIT_KHR = 0x00000080UL,
	VK_BUFFER_USAGE_2_INDIRECT_BUFFER_BIT_KHR = 0x00000100UL,
	VK_BUFFER_USAGE_2_CONDITIONAL_RENDERING_BIT_EXT = 0x00000200UL,
	VK_BUFFER_USAGE_2_SHADER_BINDING_TABLE_BIT_KHR = 0x00000400UL,
	VK_BUFFER_USAGE_2_RAY_TRACING_BIT_NV = 0x00000400UL,
	VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 0x00000800UL,
	VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 0x00001000UL,
	VK_BUFFER_USAGE_2_VIDEO_DECODE_SRC_BIT_KHR = 0x00002000UL,
	VK_BUFFER_USAGE_2_VIDEO_DECODE_DST_BIT_KHR = 0x00004000UL,
	VK_BUFFER_USAGE_2_VIDEO_ENCODE_DST_BIT_KHR = 0x00008000UL,
	VK_BUFFER_USAGE_2_VIDEO_ENCODE_SRC_BIT_KHR = 0x00010000UL,
	VK_BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT_KHR = 0x00020000UL,
	VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 0x00080000UL,
	VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 0x00100000UL,
	VK_BUFFER_USAGE_2_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT = 0x00200000UL,
	VK_BUFFER_USAGE_2_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT = 0x00400000UL,
	VK_BUFFER_USAGE_2_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT = 0x04000000UL,
	VK_BUFFER_USAGE_2_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT = 0x00800000UL,
	VK_BUFFER_USAGE_2_MICROMAP_STORAGE_BIT_EXT = 0x01000000UL,
	VK_BUFFER_USAGE_2_PREPROCESS_BUFFER_BIT_EXT = 0x80000000UL,
}
enum : VkBufferUsageFlagBits2 {
	VK_BUFFER_USAGE_2_TRANSFER_SRC_BIT = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_TRANSFER_SRC_BIT,
	VK_BUFFER_USAGE_2_TRANSFER_DST_BIT = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_TRANSFER_DST_BIT,
	VK_BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT,
	VK_BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT,
	VK_BUFFER_USAGE_2_UNIFORM_BUFFER_BIT = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_UNIFORM_BUFFER_BIT,
	VK_BUFFER_USAGE_2_STORAGE_BUFFER_BIT = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_STORAGE_BUFFER_BIT,
	VK_BUFFER_USAGE_2_INDEX_BUFFER_BIT = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_INDEX_BUFFER_BIT,
	VK_BUFFER_USAGE_2_VERTEX_BUFFER_BIT = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_VERTEX_BUFFER_BIT,
	VK_BUFFER_USAGE_2_INDIRECT_BUFFER_BIT = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_INDIRECT_BUFFER_BIT,
	VK_BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT,
	VK_BUFFER_USAGE_2_TRANSFER_SRC_BIT_KHR = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_TRANSFER_SRC_BIT_KHR,
	VK_BUFFER_USAGE_2_TRANSFER_DST_BIT_KHR = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_TRANSFER_DST_BIT_KHR,
	VK_BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR,
	VK_BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT_KHR = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT_KHR,
	VK_BUFFER_USAGE_2_UNIFORM_BUFFER_BIT_KHR = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_UNIFORM_BUFFER_BIT_KHR,
	VK_BUFFER_USAGE_2_STORAGE_BUFFER_BIT_KHR = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_STORAGE_BUFFER_BIT_KHR,
	VK_BUFFER_USAGE_2_INDEX_BUFFER_BIT_KHR = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_INDEX_BUFFER_BIT_KHR,
	VK_BUFFER_USAGE_2_VERTEX_BUFFER_BIT_KHR = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_VERTEX_BUFFER_BIT_KHR,
	VK_BUFFER_USAGE_2_INDIRECT_BUFFER_BIT_KHR = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_INDIRECT_BUFFER_BIT_KHR,
	VK_BUFFER_USAGE_2_CONDITIONAL_RENDERING_BIT_EXT = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_CONDITIONAL_RENDERING_BIT_EXT,
	VK_BUFFER_USAGE_2_SHADER_BINDING_TABLE_BIT_KHR = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_SHADER_BINDING_TABLE_BIT_KHR,
	VK_BUFFER_USAGE_2_RAY_TRACING_BIT_NV = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_RAY_TRACING_BIT_NV,
	VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT,
	VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT,
	VK_BUFFER_USAGE_2_VIDEO_DECODE_SRC_BIT_KHR = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_VIDEO_DECODE_SRC_BIT_KHR,
	VK_BUFFER_USAGE_2_VIDEO_DECODE_DST_BIT_KHR = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_VIDEO_DECODE_DST_BIT_KHR,
	VK_BUFFER_USAGE_2_VIDEO_ENCODE_DST_BIT_KHR = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_VIDEO_ENCODE_DST_BIT_KHR,
	VK_BUFFER_USAGE_2_VIDEO_ENCODE_SRC_BIT_KHR = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_VIDEO_ENCODE_SRC_BIT_KHR,
	VK_BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT_KHR = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT_KHR,
	VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR,
	VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR,
	VK_BUFFER_USAGE_2_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT,
	VK_BUFFER_USAGE_2_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT,
	VK_BUFFER_USAGE_2_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT,
	VK_BUFFER_USAGE_2_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT,
	VK_BUFFER_USAGE_2_MICROMAP_STORAGE_BIT_EXT = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_MICROMAP_STORAGE_BIT_EXT,
	VK_BUFFER_USAGE_2_PREPROCESS_BUFFER_BIT_EXT = VkBufferUsageFlagBits2.VK_BUFFER_USAGE_2_PREPROCESS_BUFFER_BIT_EXT,
}
enum VkBuildAccelerationStructureFlagBitsKHR {
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 0x00000001,
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 0x00000002,
	VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 0x00000004,
	VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 0x00000008,
	VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 0x00000010,
	VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV = 0x00000020,
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT = 0x00000040,
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT = 0x00000080,
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT = 0x00000100,
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR = 0x00000800,
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR,
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR,
	VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR,
	VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR,
	VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR,
	VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkBuildAccelerationStructureFlagBitsKHR {
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR,
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR,
	VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR,
	VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR,
	VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR,
	VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV,
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT,
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT,
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT,
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR,
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV,
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV,
	VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV,
	VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV,
	VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV,
	VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkBuildAccelerationStructureModeKHR {
	VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR = 0,
	VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR = 1,
	VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkBuildAccelerationStructureModeKHR {
	VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR = VkBuildAccelerationStructureModeKHR.VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR,
	VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR = VkBuildAccelerationStructureModeKHR.VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR,
	VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = VkBuildAccelerationStructureModeKHR.VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR,
}
enum VkBuildMicromapFlagBitsEXT {
	VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT = 0x00000001,
	VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT = 0x00000002,
	VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT = 0x00000004,
	VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkBuildMicromapFlagBitsEXT {
	VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT = VkBuildMicromapFlagBitsEXT.VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT,
	VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT = VkBuildMicromapFlagBitsEXT.VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT,
	VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT = VkBuildMicromapFlagBitsEXT.VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT,
	VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT = VkBuildMicromapFlagBitsEXT.VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT,
}
enum VkBuildMicromapModeEXT {
	VK_BUILD_MICROMAP_MODE_BUILD_EXT = 0,
	VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkBuildMicromapModeEXT {
	VK_BUILD_MICROMAP_MODE_BUILD_EXT = VkBuildMicromapModeEXT.VK_BUILD_MICROMAP_MODE_BUILD_EXT,
	VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT = VkBuildMicromapModeEXT.VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT,
}
enum VkChromaLocation {
	VK_CHROMA_LOCATION_COSITED_EVEN = 0,
	VK_CHROMA_LOCATION_MIDPOINT = 1,
	VK_CHROMA_LOCATION_COSITED_EVEN_KHR = VK_CHROMA_LOCATION_COSITED_EVEN,
	VK_CHROMA_LOCATION_MIDPOINT_KHR = VK_CHROMA_LOCATION_MIDPOINT,
	VK_CHROMA_LOCATION_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkChromaLocation {
	VK_CHROMA_LOCATION_COSITED_EVEN = VkChromaLocation.VK_CHROMA_LOCATION_COSITED_EVEN,
	VK_CHROMA_LOCATION_MIDPOINT = VkChromaLocation.VK_CHROMA_LOCATION_MIDPOINT,
	VK_CHROMA_LOCATION_COSITED_EVEN_KHR = VkChromaLocation.VK_CHROMA_LOCATION_COSITED_EVEN_KHR,
	VK_CHROMA_LOCATION_MIDPOINT_KHR = VkChromaLocation.VK_CHROMA_LOCATION_MIDPOINT_KHR,
	VK_CHROMA_LOCATION_MAX_ENUM = VkChromaLocation.VK_CHROMA_LOCATION_MAX_ENUM,
}
enum VkClusterAccelerationStructureAddressResolutionFlagBitsNV {
	VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_IMPLICIT_DATA_BIT_NV = 0x00000001,
	VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SCRATCH_DATA_BIT_NV = 0x00000002,
	VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_ADDRESS_ARRAY_BIT_NV = 0x00000004,
	VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_SIZES_ARRAY_BIT_NV = 0x00000008,
	VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SRC_INFOS_ARRAY_BIT_NV = 0x00000010,
	VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SRC_INFOS_COUNT_BIT_NV = 0x00000020,
	VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkClusterAccelerationStructureAddressResolutionFlagBitsNV {
	VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_IMPLICIT_DATA_BIT_NV = VkClusterAccelerationStructureAddressResolutionFlagBitsNV.VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_IMPLICIT_DATA_BIT_NV,
	VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SCRATCH_DATA_BIT_NV = VkClusterAccelerationStructureAddressResolutionFlagBitsNV.VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SCRATCH_DATA_BIT_NV,
	VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_ADDRESS_ARRAY_BIT_NV = VkClusterAccelerationStructureAddressResolutionFlagBitsNV.VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_ADDRESS_ARRAY_BIT_NV,
	VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_SIZES_ARRAY_BIT_NV = VkClusterAccelerationStructureAddressResolutionFlagBitsNV.VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_SIZES_ARRAY_BIT_NV,
	VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SRC_INFOS_ARRAY_BIT_NV = VkClusterAccelerationStructureAddressResolutionFlagBitsNV.VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SRC_INFOS_ARRAY_BIT_NV,
	VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SRC_INFOS_COUNT_BIT_NV = VkClusterAccelerationStructureAddressResolutionFlagBitsNV.VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SRC_INFOS_COUNT_BIT_NV,
	VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_FLAG_BITS_MAX_ENUM_NV = VkClusterAccelerationStructureAddressResolutionFlagBitsNV.VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_FLAG_BITS_MAX_ENUM_NV,
}
enum VkClusterAccelerationStructureClusterFlagBitsNV {
	VK_CLUSTER_ACCELERATION_STRUCTURE_CLUSTER_ALLOW_DISABLE_OPACITY_MICROMAPS_NV = 0x00000001,
	VK_CLUSTER_ACCELERATION_STRUCTURE_CLUSTER_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkClusterAccelerationStructureClusterFlagBitsNV {
	VK_CLUSTER_ACCELERATION_STRUCTURE_CLUSTER_ALLOW_DISABLE_OPACITY_MICROMAPS_NV = VkClusterAccelerationStructureClusterFlagBitsNV.VK_CLUSTER_ACCELERATION_STRUCTURE_CLUSTER_ALLOW_DISABLE_OPACITY_MICROMAPS_NV,
	VK_CLUSTER_ACCELERATION_STRUCTURE_CLUSTER_FLAG_BITS_MAX_ENUM_NV = VkClusterAccelerationStructureClusterFlagBitsNV.VK_CLUSTER_ACCELERATION_STRUCTURE_CLUSTER_FLAG_BITS_MAX_ENUM_NV,
}
enum VkClusterAccelerationStructureGeometryFlagBitsNV {
	VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_CULL_DISABLE_BIT_NV = 0x00000001,
	VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_NO_DUPLICATE_ANYHIT_INVOCATION_BIT_NV = 0x00000002,
	VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_OPAQUE_BIT_NV = 0x00000004,
	VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkClusterAccelerationStructureGeometryFlagBitsNV {
	VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_CULL_DISABLE_BIT_NV = VkClusterAccelerationStructureGeometryFlagBitsNV.VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_CULL_DISABLE_BIT_NV,
	VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_NO_DUPLICATE_ANYHIT_INVOCATION_BIT_NV = VkClusterAccelerationStructureGeometryFlagBitsNV.VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_NO_DUPLICATE_ANYHIT_INVOCATION_BIT_NV,
	VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_OPAQUE_BIT_NV = VkClusterAccelerationStructureGeometryFlagBitsNV.VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_OPAQUE_BIT_NV,
	VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_FLAG_BITS_MAX_ENUM_NV = VkClusterAccelerationStructureGeometryFlagBitsNV.VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_FLAG_BITS_MAX_ENUM_NV,
}
enum VkClusterAccelerationStructureIndexFormatFlagBitsNV {
	VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_8BIT_NV = 0x00000001,
	VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_16BIT_NV = 0x00000002,
	VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_32BIT_NV = 0x00000004,
	VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkClusterAccelerationStructureIndexFormatFlagBitsNV {
	VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_8BIT_NV = VkClusterAccelerationStructureIndexFormatFlagBitsNV.VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_8BIT_NV,
	VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_16BIT_NV = VkClusterAccelerationStructureIndexFormatFlagBitsNV.VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_16BIT_NV,
	VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_32BIT_NV = VkClusterAccelerationStructureIndexFormatFlagBitsNV.VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_32BIT_NV,
	VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_FLAG_BITS_MAX_ENUM_NV = VkClusterAccelerationStructureIndexFormatFlagBitsNV.VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_FLAG_BITS_MAX_ENUM_NV,
}
enum VkClusterAccelerationStructureOpModeNV {
	VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_IMPLICIT_DESTINATIONS_NV = 0,
	VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_EXPLICIT_DESTINATIONS_NV = 1,
	VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_COMPUTE_SIZES_NV = 2,
	VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkClusterAccelerationStructureOpModeNV {
	VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_IMPLICIT_DESTINATIONS_NV = VkClusterAccelerationStructureOpModeNV.VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_IMPLICIT_DESTINATIONS_NV,
	VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_EXPLICIT_DESTINATIONS_NV = VkClusterAccelerationStructureOpModeNV.VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_EXPLICIT_DESTINATIONS_NV,
	VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_COMPUTE_SIZES_NV = VkClusterAccelerationStructureOpModeNV.VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_COMPUTE_SIZES_NV,
	VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_MAX_ENUM_NV = VkClusterAccelerationStructureOpModeNV.VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_MAX_ENUM_NV,
}
enum VkClusterAccelerationStructureOpTypeNV {
	VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_MOVE_OBJECTS_NV = 0,
	VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_CLUSTERS_BOTTOM_LEVEL_NV = 1,
	VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_TRIANGLE_CLUSTER_NV = 2,
	VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_TRIANGLE_CLUSTER_TEMPLATE_NV = 3,
	VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_INSTANTIATE_TRIANGLE_CLUSTER_NV = 4,
	VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkClusterAccelerationStructureOpTypeNV {
	VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_MOVE_OBJECTS_NV = VkClusterAccelerationStructureOpTypeNV.VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_MOVE_OBJECTS_NV,
	VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_CLUSTERS_BOTTOM_LEVEL_NV = VkClusterAccelerationStructureOpTypeNV.VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_CLUSTERS_BOTTOM_LEVEL_NV,
	VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_TRIANGLE_CLUSTER_NV = VkClusterAccelerationStructureOpTypeNV.VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_TRIANGLE_CLUSTER_NV,
	VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_TRIANGLE_CLUSTER_TEMPLATE_NV = VkClusterAccelerationStructureOpTypeNV.VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_TRIANGLE_CLUSTER_TEMPLATE_NV,
	VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_INSTANTIATE_TRIANGLE_CLUSTER_NV = VkClusterAccelerationStructureOpTypeNV.VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_INSTANTIATE_TRIANGLE_CLUSTER_NV,
	VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_MAX_ENUM_NV = VkClusterAccelerationStructureOpTypeNV.VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_MAX_ENUM_NV,
}
enum VkClusterAccelerationStructureTypeNV {
	VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_CLUSTERS_BOTTOM_LEVEL_NV = 0,
	VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_TRIANGLE_CLUSTER_NV = 1,
	VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_TRIANGLE_CLUSTER_TEMPLATE_NV = 2,
	VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkClusterAccelerationStructureTypeNV {
	VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_CLUSTERS_BOTTOM_LEVEL_NV = VkClusterAccelerationStructureTypeNV.VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_CLUSTERS_BOTTOM_LEVEL_NV,
	VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_TRIANGLE_CLUSTER_NV = VkClusterAccelerationStructureTypeNV.VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_TRIANGLE_CLUSTER_NV,
	VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_TRIANGLE_CLUSTER_TEMPLATE_NV = VkClusterAccelerationStructureTypeNV.VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_TRIANGLE_CLUSTER_TEMPLATE_NV,
	VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_NV = VkClusterAccelerationStructureTypeNV.VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_NV,
}
enum VkCoarseSampleOrderTypeNV {
	VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0,
	VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1,
	VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2,
	VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3,
	VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkCoarseSampleOrderTypeNV {
	VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV,
	VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV,
	VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV,
	VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV,
	VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV,
}
enum VkColorComponentFlagBits {
	VK_COLOR_COMPONENT_R_BIT = 0x00000001,
	VK_COLOR_COMPONENT_G_BIT = 0x00000002,
	VK_COLOR_COMPONENT_B_BIT = 0x00000004,
	VK_COLOR_COMPONENT_A_BIT = 0x00000008,
	VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkColorComponentFlagBits {
	VK_COLOR_COMPONENT_R_BIT = VkColorComponentFlagBits.VK_COLOR_COMPONENT_R_BIT,
	VK_COLOR_COMPONENT_G_BIT = VkColorComponentFlagBits.VK_COLOR_COMPONENT_G_BIT,
	VK_COLOR_COMPONENT_B_BIT = VkColorComponentFlagBits.VK_COLOR_COMPONENT_B_BIT,
	VK_COLOR_COMPONENT_A_BIT = VkColorComponentFlagBits.VK_COLOR_COMPONENT_A_BIT,
	VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = VkColorComponentFlagBits.VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM,
}
enum VkColorSpaceKHR {
	VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0,
	VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001,
	VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002,
	VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003,
	VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004,
	VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005,
	VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006,
	VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007,
	VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008,
	VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009,
	VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010,
	VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011,
	VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012,
	VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013,
	VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014,
	VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000,
	VK_COLORSPACE_SRGB_NONLINEAR_KHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR,
	VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT,
	VK_COLOR_SPACE_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkColorSpaceKHR {
	VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = VkColorSpaceKHR.VK_COLOR_SPACE_SRGB_NONLINEAR_KHR,
	VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT,
	VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT,
	VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT,
	VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT,
	VK_COLOR_SPACE_BT709_LINEAR_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_BT709_LINEAR_EXT,
	VK_COLOR_SPACE_BT709_NONLINEAR_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_BT709_NONLINEAR_EXT,
	VK_COLOR_SPACE_BT2020_LINEAR_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_BT2020_LINEAR_EXT,
	VK_COLOR_SPACE_HDR10_ST2084_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_HDR10_ST2084_EXT,
	VK_COLOR_SPACE_DOLBYVISION_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_DOLBYVISION_EXT,
	VK_COLOR_SPACE_HDR10_HLG_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_HDR10_HLG_EXT,
	VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT,
	VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT,
	VK_COLOR_SPACE_PASS_THROUGH_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_PASS_THROUGH_EXT,
	VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT,
	VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = VkColorSpaceKHR.VK_COLOR_SPACE_DISPLAY_NATIVE_AMD,
	VK_COLORSPACE_SRGB_NONLINEAR_KHR = VkColorSpaceKHR.VK_COLORSPACE_SRGB_NONLINEAR_KHR,
	VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_DCI_P3_LINEAR_EXT,
	VK_COLOR_SPACE_MAX_ENUM_KHR = VkColorSpaceKHR.VK_COLOR_SPACE_MAX_ENUM_KHR,
}
enum VkCommandBufferLevel {
	VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0,
	VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,
	VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkCommandBufferLevel {
	VK_COMMAND_BUFFER_LEVEL_PRIMARY = VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_PRIMARY,
	VK_COMMAND_BUFFER_LEVEL_SECONDARY = VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_SECONDARY,
	VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_MAX_ENUM,
}
enum VkCommandBufferResetFlagBits {
	VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 0x00000001,
	VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkCommandBufferResetFlagBits {
	VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = VkCommandBufferResetFlagBits.VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT,
	VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = VkCommandBufferResetFlagBits.VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM,
}
enum VkCommandBufferUsageFlagBits {
	VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 0x00000001,
	VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 0x00000002,
	VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 0x00000004,
	VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkCommandBufferUsageFlagBits {
	VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT,
	VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT,
	VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT,
	VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM,
}
enum VkCommandPoolCreateFlagBits {
	VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 0x00000001,
	VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 0x00000002,
	VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 0x00000004,
	VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkCommandPoolCreateFlagBits {
	VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_TRANSIENT_BIT,
	VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT,
	VK_COMMAND_POOL_CREATE_PROTECTED_BIT = VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_PROTECTED_BIT,
	VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM,
}
enum VkCommandPoolResetFlagBits {
	VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 0x00000001,
	VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkCommandPoolResetFlagBits {
	VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = VkCommandPoolResetFlagBits.VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT,
	VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = VkCommandPoolResetFlagBits.VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM,
}
enum VkCompareOp {
	VK_COMPARE_OP_NEVER = 0,
	VK_COMPARE_OP_LESS = 1,
	VK_COMPARE_OP_EQUAL = 2,
	VK_COMPARE_OP_LESS_OR_EQUAL = 3,
	VK_COMPARE_OP_GREATER = 4,
	VK_COMPARE_OP_NOT_EQUAL = 5,
	VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
	VK_COMPARE_OP_ALWAYS = 7,
	VK_COMPARE_OP_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkCompareOp {
	VK_COMPARE_OP_NEVER = VkCompareOp.VK_COMPARE_OP_NEVER,
	VK_COMPARE_OP_LESS = VkCompareOp.VK_COMPARE_OP_LESS,
	VK_COMPARE_OP_EQUAL = VkCompareOp.VK_COMPARE_OP_EQUAL,
	VK_COMPARE_OP_LESS_OR_EQUAL = VkCompareOp.VK_COMPARE_OP_LESS_OR_EQUAL,
	VK_COMPARE_OP_GREATER = VkCompareOp.VK_COMPARE_OP_GREATER,
	VK_COMPARE_OP_NOT_EQUAL = VkCompareOp.VK_COMPARE_OP_NOT_EQUAL,
	VK_COMPARE_OP_GREATER_OR_EQUAL = VkCompareOp.VK_COMPARE_OP_GREATER_OR_EQUAL,
	VK_COMPARE_OP_ALWAYS = VkCompareOp.VK_COMPARE_OP_ALWAYS,
	VK_COMPARE_OP_MAX_ENUM = VkCompareOp.VK_COMPARE_OP_MAX_ENUM,
}
enum VkComponentSwizzle {
	VK_COMPONENT_SWIZZLE_IDENTITY = 0,
	VK_COMPONENT_SWIZZLE_ZERO = 1,
	VK_COMPONENT_SWIZZLE_ONE = 2,
	VK_COMPONENT_SWIZZLE_R = 3,
	VK_COMPONENT_SWIZZLE_G = 4,
	VK_COMPONENT_SWIZZLE_B = 5,
	VK_COMPONENT_SWIZZLE_A = 6,
	VK_COMPONENT_SWIZZLE_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkComponentSwizzle {
	VK_COMPONENT_SWIZZLE_IDENTITY = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_IDENTITY,
	VK_COMPONENT_SWIZZLE_ZERO = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_ZERO,
	VK_COMPONENT_SWIZZLE_ONE = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_ONE,
	VK_COMPONENT_SWIZZLE_R = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_R,
	VK_COMPONENT_SWIZZLE_G = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_G,
	VK_COMPONENT_SWIZZLE_B = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_B,
	VK_COMPONENT_SWIZZLE_A = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_A,
	VK_COMPONENT_SWIZZLE_MAX_ENUM = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_MAX_ENUM,
}
enum VkComponentTypeKHR {
	VK_COMPONENT_TYPE_FLOAT16_KHR = 0,
	VK_COMPONENT_TYPE_FLOAT32_KHR = 1,
	VK_COMPONENT_TYPE_FLOAT64_KHR = 2,
	VK_COMPONENT_TYPE_SINT8_KHR = 3,
	VK_COMPONENT_TYPE_SINT16_KHR = 4,
	VK_COMPONENT_TYPE_SINT32_KHR = 5,
	VK_COMPONENT_TYPE_SINT64_KHR = 6,
	VK_COMPONENT_TYPE_UINT8_KHR = 7,
	VK_COMPONENT_TYPE_UINT16_KHR = 8,
	VK_COMPONENT_TYPE_UINT32_KHR = 9,
	VK_COMPONENT_TYPE_UINT64_KHR = 10,
	VK_COMPONENT_TYPE_SINT8_PACKED_NV = 1000491000,
	VK_COMPONENT_TYPE_UINT8_PACKED_NV = 1000491001,
	VK_COMPONENT_TYPE_FLOAT_E4M3_NV = 1000491002,
	VK_COMPONENT_TYPE_FLOAT_E5M2_NV = 1000491003,
	VK_COMPONENT_TYPE_FLOAT16_NV = VK_COMPONENT_TYPE_FLOAT16_KHR,
	VK_COMPONENT_TYPE_FLOAT32_NV = VK_COMPONENT_TYPE_FLOAT32_KHR,
	VK_COMPONENT_TYPE_FLOAT64_NV = VK_COMPONENT_TYPE_FLOAT64_KHR,
	VK_COMPONENT_TYPE_SINT8_NV = VK_COMPONENT_TYPE_SINT8_KHR,
	VK_COMPONENT_TYPE_SINT16_NV = VK_COMPONENT_TYPE_SINT16_KHR,
	VK_COMPONENT_TYPE_SINT32_NV = VK_COMPONENT_TYPE_SINT32_KHR,
	VK_COMPONENT_TYPE_SINT64_NV = VK_COMPONENT_TYPE_SINT64_KHR,
	VK_COMPONENT_TYPE_UINT8_NV = VK_COMPONENT_TYPE_UINT8_KHR,
	VK_COMPONENT_TYPE_UINT16_NV = VK_COMPONENT_TYPE_UINT16_KHR,
	VK_COMPONENT_TYPE_UINT32_NV = VK_COMPONENT_TYPE_UINT32_KHR,
	VK_COMPONENT_TYPE_UINT64_NV = VK_COMPONENT_TYPE_UINT64_KHR,
	VK_COMPONENT_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkComponentTypeKHR {
	VK_COMPONENT_TYPE_FLOAT16_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_FLOAT16_KHR,
	VK_COMPONENT_TYPE_FLOAT32_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_FLOAT32_KHR,
	VK_COMPONENT_TYPE_FLOAT64_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_FLOAT64_KHR,
	VK_COMPONENT_TYPE_SINT8_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT8_KHR,
	VK_COMPONENT_TYPE_SINT16_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT16_KHR,
	VK_COMPONENT_TYPE_SINT32_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT32_KHR,
	VK_COMPONENT_TYPE_SINT64_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT64_KHR,
	VK_COMPONENT_TYPE_UINT8_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT8_KHR,
	VK_COMPONENT_TYPE_UINT16_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT16_KHR,
	VK_COMPONENT_TYPE_UINT32_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT32_KHR,
	VK_COMPONENT_TYPE_UINT64_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT64_KHR,
	VK_COMPONENT_TYPE_SINT8_PACKED_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT8_PACKED_NV,
	VK_COMPONENT_TYPE_UINT8_PACKED_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT8_PACKED_NV,
	VK_COMPONENT_TYPE_FLOAT_E4M3_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_FLOAT_E4M3_NV,
	VK_COMPONENT_TYPE_FLOAT_E5M2_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_FLOAT_E5M2_NV,
	VK_COMPONENT_TYPE_FLOAT16_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_FLOAT16_NV,
	VK_COMPONENT_TYPE_FLOAT32_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_FLOAT32_NV,
	VK_COMPONENT_TYPE_FLOAT64_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_FLOAT64_NV,
	VK_COMPONENT_TYPE_SINT8_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT8_NV,
	VK_COMPONENT_TYPE_SINT16_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT16_NV,
	VK_COMPONENT_TYPE_SINT32_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT32_NV,
	VK_COMPONENT_TYPE_SINT64_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT64_NV,
	VK_COMPONENT_TYPE_UINT8_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT8_NV,
	VK_COMPONENT_TYPE_UINT16_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT16_NV,
	VK_COMPONENT_TYPE_UINT32_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT32_NV,
	VK_COMPONENT_TYPE_UINT64_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT64_NV,
	VK_COMPONENT_TYPE_MAX_ENUM_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_MAX_ENUM_KHR,
}
enum VkCompositeAlphaFlagBitsKHR {
	VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 0x00000001,
	VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 0x00000002,
	VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 0x00000004,
	VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 0x00000008,
	VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkCompositeAlphaFlagBitsKHR {
	VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR,
	VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR,
	VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR,
	VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR,
	VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkConditionalRenderingFlagBitsEXT {
	VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 0x00000001,
	VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkConditionalRenderingFlagBitsEXT {
	VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = VkConditionalRenderingFlagBitsEXT.VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT,
	VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = VkConditionalRenderingFlagBitsEXT.VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT,
}
enum VkConservativeRasterizationModeEXT {
	VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0,
	VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1,
	VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2,
	VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkConservativeRasterizationModeEXT {
	VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = VkConservativeRasterizationModeEXT.VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT,
	VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = VkConservativeRasterizationModeEXT.VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT,
	VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = VkConservativeRasterizationModeEXT.VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT,
	VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = VkConservativeRasterizationModeEXT.VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT,
}
enum VkCooperativeVectorMatrixLayoutNV {
	VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_ROW_MAJOR_NV = 0,
	VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_COLUMN_MAJOR_NV = 1,
	VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_INFERENCING_OPTIMAL_NV = 2,
	VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_TRAINING_OPTIMAL_NV = 3,
	VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkCooperativeVectorMatrixLayoutNV {
	VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_ROW_MAJOR_NV = VkCooperativeVectorMatrixLayoutNV.VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_ROW_MAJOR_NV,
	VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_COLUMN_MAJOR_NV = VkCooperativeVectorMatrixLayoutNV.VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_COLUMN_MAJOR_NV,
	VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_INFERENCING_OPTIMAL_NV = VkCooperativeVectorMatrixLayoutNV.VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_INFERENCING_OPTIMAL_NV,
	VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_TRAINING_OPTIMAL_NV = VkCooperativeVectorMatrixLayoutNV.VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_TRAINING_OPTIMAL_NV,
	VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_MAX_ENUM_NV = VkCooperativeVectorMatrixLayoutNV.VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_MAX_ENUM_NV,
}
enum VkCopyAccelerationStructureModeKHR {
	VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkCopyAccelerationStructureModeKHR {
	VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR,
}
enum VkCopyMicromapModeEXT {
	VK_COPY_MICROMAP_MODE_CLONE_EXT = 0,
	VK_COPY_MICROMAP_MODE_SERIALIZE_EXT = 1,
	VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT = 2,
	VK_COPY_MICROMAP_MODE_COMPACT_EXT = 3,
	VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkCopyMicromapModeEXT {
	VK_COPY_MICROMAP_MODE_CLONE_EXT = VkCopyMicromapModeEXT.VK_COPY_MICROMAP_MODE_CLONE_EXT,
	VK_COPY_MICROMAP_MODE_SERIALIZE_EXT = VkCopyMicromapModeEXT.VK_COPY_MICROMAP_MODE_SERIALIZE_EXT,
	VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT = VkCopyMicromapModeEXT.VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT,
	VK_COPY_MICROMAP_MODE_COMPACT_EXT = VkCopyMicromapModeEXT.VK_COPY_MICROMAP_MODE_COMPACT_EXT,
	VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT = VkCopyMicromapModeEXT.VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT,
}
enum VkCoverageModulationModeNV {
	VK_COVERAGE_MODULATION_MODE_NONE_NV = 0,
	VK_COVERAGE_MODULATION_MODE_RGB_NV = 1,
	VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2,
	VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3,
	VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkCoverageModulationModeNV {
	VK_COVERAGE_MODULATION_MODE_NONE_NV = VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_NONE_NV,
	VK_COVERAGE_MODULATION_MODE_RGB_NV = VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_RGB_NV,
	VK_COVERAGE_MODULATION_MODE_ALPHA_NV = VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_ALPHA_NV,
	VK_COVERAGE_MODULATION_MODE_RGBA_NV = VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_RGBA_NV,
	VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV,
}
enum VkCoverageReductionModeNV {
	VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0,
	VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1,
	VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkCoverageReductionModeNV {
	VK_COVERAGE_REDUCTION_MODE_MERGE_NV = VkCoverageReductionModeNV.VK_COVERAGE_REDUCTION_MODE_MERGE_NV,
	VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = VkCoverageReductionModeNV.VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV,
	VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = VkCoverageReductionModeNV.VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV,
}
enum VkCubicFilterWeightsQCOM {
	VK_CUBIC_FILTER_WEIGHTS_CATMULL_ROM_QCOM = 0,
	VK_CUBIC_FILTER_WEIGHTS_ZERO_TANGENT_CARDINAL_QCOM = 1,
	VK_CUBIC_FILTER_WEIGHTS_B_SPLINE_QCOM = 2,
	VK_CUBIC_FILTER_WEIGHTS_MITCHELL_NETRAVALI_QCOM = 3,
	VK_CUBIC_FILTER_WEIGHTS_MAX_ENUM_QCOM = 0x7FFFFFFF,
}
enum : VkCubicFilterWeightsQCOM {
	VK_CUBIC_FILTER_WEIGHTS_CATMULL_ROM_QCOM = VkCubicFilterWeightsQCOM.VK_CUBIC_FILTER_WEIGHTS_CATMULL_ROM_QCOM,
	VK_CUBIC_FILTER_WEIGHTS_ZERO_TANGENT_CARDINAL_QCOM = VkCubicFilterWeightsQCOM.VK_CUBIC_FILTER_WEIGHTS_ZERO_TANGENT_CARDINAL_QCOM,
	VK_CUBIC_FILTER_WEIGHTS_B_SPLINE_QCOM = VkCubicFilterWeightsQCOM.VK_CUBIC_FILTER_WEIGHTS_B_SPLINE_QCOM,
	VK_CUBIC_FILTER_WEIGHTS_MITCHELL_NETRAVALI_QCOM = VkCubicFilterWeightsQCOM.VK_CUBIC_FILTER_WEIGHTS_MITCHELL_NETRAVALI_QCOM,
	VK_CUBIC_FILTER_WEIGHTS_MAX_ENUM_QCOM = VkCubicFilterWeightsQCOM.VK_CUBIC_FILTER_WEIGHTS_MAX_ENUM_QCOM,
}
enum VkCullModeFlagBits {
	VK_CULL_MODE_NONE = 0,
	VK_CULL_MODE_FRONT_BIT = 0x00000001,
	VK_CULL_MODE_BACK_BIT = 0x00000002,
	VK_CULL_MODE_FRONT_AND_BACK = 0x00000003,
	VK_CULL_MODE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkCullModeFlagBits {
	VK_CULL_MODE_NONE = VkCullModeFlagBits.VK_CULL_MODE_NONE,
	VK_CULL_MODE_FRONT_BIT = VkCullModeFlagBits.VK_CULL_MODE_FRONT_BIT,
	VK_CULL_MODE_BACK_BIT = VkCullModeFlagBits.VK_CULL_MODE_BACK_BIT,
	VK_CULL_MODE_FRONT_AND_BACK = VkCullModeFlagBits.VK_CULL_MODE_FRONT_AND_BACK,
	VK_CULL_MODE_FLAG_BITS_MAX_ENUM = VkCullModeFlagBits.VK_CULL_MODE_FLAG_BITS_MAX_ENUM,
}
enum VkDebugReportFlagBitsEXT {
	VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 0x00000001,
	VK_DEBUG_REPORT_WARNING_BIT_EXT = 0x00000002,
	VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 0x00000004,
	VK_DEBUG_REPORT_ERROR_BIT_EXT = 0x00000008,
	VK_DEBUG_REPORT_DEBUG_BIT_EXT = 0x00000010,
	VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkDebugReportFlagBitsEXT {
	VK_DEBUG_REPORT_INFORMATION_BIT_EXT = VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_INFORMATION_BIT_EXT,
	VK_DEBUG_REPORT_WARNING_BIT_EXT = VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_WARNING_BIT_EXT,
	VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT,
	VK_DEBUG_REPORT_ERROR_BIT_EXT = VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_ERROR_BIT_EXT,
	VK_DEBUG_REPORT_DEBUG_BIT_EXT = VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_DEBUG_BIT_EXT,
	VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT,
}
enum VkDebugReportObjectTypeEXT {
	VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0,
	VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1,
	VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2,
	VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3,
	VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4,
	VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5,
	VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6,
	VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7,
	VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8,
	VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9,
	VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10,
	VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11,
	VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12,
	VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13,
	VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14,
	VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15,
	VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16,
	VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17,
	VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18,
	VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19,
	VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20,
	VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21,
	VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22,
	VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23,
	VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24,
	VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25,
	VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26,
	VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27,
	VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28,
	VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29,
	VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30,
	VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33,
	VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000,
	VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000,
	VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT = 1000029000,
	VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT = 1000029001,
	VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000150000,
	VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000,
	VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_MODULE_NV_EXT = 1000307000,
	VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_FUNCTION_NV_EXT = 1000307001,
	VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT = 1000366000,
	VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkDebugReportObjectTypeEXT {
	VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_MODULE_NV_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_MODULE_NV_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_FUNCTION_NV_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_FUNCTION_NV_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT,
}
enum VkDebugUtilsMessageSeverityFlagBitsEXT {
	VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 0x00000001,
	VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 0x00000010,
	VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 0x00000100,
	VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 0x00001000,
	VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkDebugUtilsMessageSeverityFlagBitsEXT {
	VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT,
	VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT,
	VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT,
	VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT,
	VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT,
}
enum VkDebugUtilsMessageTypeFlagBitsEXT {
	VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 0x00000001,
	VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 0x00000002,
	VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 0x00000004,
	VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT = 0x00000008,
	VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkDebugUtilsMessageTypeFlagBitsEXT {
	VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT,
	VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT,
	VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT,
	VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT = VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT,
	VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT,
}
enum VkDependencyFlagBits {
	VK_DEPENDENCY_BY_REGION_BIT = 0x00000001,
	VK_DEPENDENCY_DEVICE_GROUP_BIT = 0x00000004,
	VK_DEPENDENCY_VIEW_LOCAL_BIT = 0x00000002,
	VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT = 0x00000008,
	VK_DEPENDENCY_QUEUE_FAMILY_OWNERSHIP_TRANSFER_USE_ALL_STAGES_BIT_KHR = 0x00000020,
	VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = VK_DEPENDENCY_VIEW_LOCAL_BIT,
	VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = VK_DEPENDENCY_DEVICE_GROUP_BIT,
	VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkDependencyFlagBits {
	VK_DEPENDENCY_BY_REGION_BIT = VkDependencyFlagBits.VK_DEPENDENCY_BY_REGION_BIT,
	VK_DEPENDENCY_DEVICE_GROUP_BIT = VkDependencyFlagBits.VK_DEPENDENCY_DEVICE_GROUP_BIT,
	VK_DEPENDENCY_VIEW_LOCAL_BIT = VkDependencyFlagBits.VK_DEPENDENCY_VIEW_LOCAL_BIT,
	VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT = VkDependencyFlagBits.VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT,
	VK_DEPENDENCY_QUEUE_FAMILY_OWNERSHIP_TRANSFER_USE_ALL_STAGES_BIT_KHR = VkDependencyFlagBits.VK_DEPENDENCY_QUEUE_FAMILY_OWNERSHIP_TRANSFER_USE_ALL_STAGES_BIT_KHR,
	VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = VkDependencyFlagBits.VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR,
	VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = VkDependencyFlagBits.VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR,
	VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = VkDependencyFlagBits.VK_DEPENDENCY_FLAG_BITS_MAX_ENUM,
}
enum VkDepthBiasRepresentationEXT {
	VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT = 0,
	VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT = 1,
	VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT = 2,
	VK_DEPTH_BIAS_REPRESENTATION_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkDepthBiasRepresentationEXT {
	VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT = VkDepthBiasRepresentationEXT.VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT,
	VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT = VkDepthBiasRepresentationEXT.VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT,
	VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT = VkDepthBiasRepresentationEXT.VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT,
	VK_DEPTH_BIAS_REPRESENTATION_MAX_ENUM_EXT = VkDepthBiasRepresentationEXT.VK_DEPTH_BIAS_REPRESENTATION_MAX_ENUM_EXT,
}
enum VkDepthClampModeEXT {
	VK_DEPTH_CLAMP_MODE_VIEWPORT_RANGE_EXT = 0,
	VK_DEPTH_CLAMP_MODE_USER_DEFINED_RANGE_EXT = 1,
	VK_DEPTH_CLAMP_MODE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkDepthClampModeEXT {
	VK_DEPTH_CLAMP_MODE_VIEWPORT_RANGE_EXT = VkDepthClampModeEXT.VK_DEPTH_CLAMP_MODE_VIEWPORT_RANGE_EXT,
	VK_DEPTH_CLAMP_MODE_USER_DEFINED_RANGE_EXT = VkDepthClampModeEXT.VK_DEPTH_CLAMP_MODE_USER_DEFINED_RANGE_EXT,
	VK_DEPTH_CLAMP_MODE_MAX_ENUM_EXT = VkDepthClampModeEXT.VK_DEPTH_CLAMP_MODE_MAX_ENUM_EXT,
}
enum VkDescriptorBindingFlagBits {
	VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 0x00000001,
	VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 0x00000002,
	VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 0x00000004,
	VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 0x00000008,
	VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT,
	VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT,
	VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT,
	VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT,
	VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkDescriptorBindingFlagBits {
	VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT,
	VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT,
	VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT,
	VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT,
	VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT,
	VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT,
	VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT,
	VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT,
	VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM = VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM,
}
enum VkDescriptorPoolCreateFlagBits {
	VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 0x00000001,
	VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 0x00000002,
	VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT = 0x00000004,
	VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_SETS_BIT_NV = 0x00000008,
	VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_POOLS_BIT_NV = 0x00000010,
	VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT,
	VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE = VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT,
	VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkDescriptorPoolCreateFlagBits {
	VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT,
	VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT,
	VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT = VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT,
	VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_SETS_BIT_NV = VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_SETS_BIT_NV,
	VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_POOLS_BIT_NV = VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_POOLS_BIT_NV,
	VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT,
	VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE = VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE,
	VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM,
}
enum VkDescriptorSetLayoutCreateFlagBits {
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 0x00000002,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT = 0x00000001,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = 0x00000010,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT = 0x00000020,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV = 0x00000080,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT = 0x00000004,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_PER_STAGE_BIT_NV = 0x00000040,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE = VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkDescriptorSetLayoutCreateFlagBits {
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT = VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT = VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV = VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT = VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_PER_STAGE_BIT_NV = VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_PER_STAGE_BIT_NV,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE = VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM,
}
enum VkDescriptorType {
	VK_DESCRIPTOR_TYPE_SAMPLER = 0,
	VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
	VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
	VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
	VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
	VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
	VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
	VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
	VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
	VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
	VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
	VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK = 1000138000,
	VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000,
	VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
	VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM = 1000440000,
	VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM = 1000440001,
	VK_DESCRIPTOR_TYPE_MUTABLE_EXT = 1000351000,
	VK_DESCRIPTOR_TYPE_PARTITIONED_ACCELERATION_STRUCTURE_NV = 1000570000,
	VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK,
	VK_DESCRIPTOR_TYPE_MUTABLE_VALVE = VK_DESCRIPTOR_TYPE_MUTABLE_EXT,
	VK_DESCRIPTOR_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkDescriptorType {
	VK_DESCRIPTOR_TYPE_SAMPLER = VkDescriptorType.VK_DESCRIPTOR_TYPE_SAMPLER,
	VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = VkDescriptorType.VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER,
	VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = VkDescriptorType.VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE,
	VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_IMAGE,
	VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = VkDescriptorType.VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER,
	VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER,
	VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = VkDescriptorType.VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
	VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_BUFFER,
	VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = VkDescriptorType.VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC,
	VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC,
	VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = VkDescriptorType.VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT,
	VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK = VkDescriptorType.VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK,
	VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = VkDescriptorType.VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR,
	VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = VkDescriptorType.VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV,
	VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM = VkDescriptorType.VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM,
	VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM = VkDescriptorType.VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM,
	VK_DESCRIPTOR_TYPE_MUTABLE_EXT = VkDescriptorType.VK_DESCRIPTOR_TYPE_MUTABLE_EXT,
	VK_DESCRIPTOR_TYPE_PARTITIONED_ACCELERATION_STRUCTURE_NV = VkDescriptorType.VK_DESCRIPTOR_TYPE_PARTITIONED_ACCELERATION_STRUCTURE_NV,
	VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = VkDescriptorType.VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT,
	VK_DESCRIPTOR_TYPE_MUTABLE_VALVE = VkDescriptorType.VK_DESCRIPTOR_TYPE_MUTABLE_VALVE,
	VK_DESCRIPTOR_TYPE_MAX_ENUM = VkDescriptorType.VK_DESCRIPTOR_TYPE_MAX_ENUM,
}
enum VkDescriptorUpdateTemplateType {
	VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0,
	VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS = 1,
	VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS,
	VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET,
	VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkDescriptorUpdateTemplateType {
	VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET,
	VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS = VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS,
	VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR,
	VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR,
	VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM,
}
enum VkDeviceAddressBindingFlagBitsEXT {
	VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT = 0x00000001,
	VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkDeviceAddressBindingFlagBitsEXT {
	VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT = VkDeviceAddressBindingFlagBitsEXT.VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT,
	VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT = VkDeviceAddressBindingFlagBitsEXT.VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT,
}
enum VkDeviceAddressBindingTypeEXT {
	VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT = 0,
	VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT = 1,
	VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkDeviceAddressBindingTypeEXT {
	VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT = VkDeviceAddressBindingTypeEXT.VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT,
	VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT = VkDeviceAddressBindingTypeEXT.VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT,
	VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT = VkDeviceAddressBindingTypeEXT.VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT,
}
enum VkDeviceDiagnosticsConfigFlagBitsNV {
	VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 0x00000001,
	VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 0x00000002,
	VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 0x00000004,
	VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV = 0x00000008,
	VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkDeviceDiagnosticsConfigFlagBitsNV {
	VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = VkDeviceDiagnosticsConfigFlagBitsNV.VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV,
	VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = VkDeviceDiagnosticsConfigFlagBitsNV.VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV,
	VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = VkDeviceDiagnosticsConfigFlagBitsNV.VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV,
	VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV = VkDeviceDiagnosticsConfigFlagBitsNV.VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV,
	VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV = VkDeviceDiagnosticsConfigFlagBitsNV.VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV,
}
enum VkDeviceEventTypeEXT {
	VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0,
	VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkDeviceEventTypeEXT {
	VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = VkDeviceEventTypeEXT.VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT,
	VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT = VkDeviceEventTypeEXT.VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT,
}
enum VkDeviceFaultAddressTypeEXT {
	VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT = 0,
	VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT = 1,
	VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT = 2,
	VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT = 3,
	VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT = 4,
	VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT = 5,
	VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT = 6,
	VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkDeviceFaultAddressTypeEXT {
	VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT = VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT,
	VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT = VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT,
	VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT = VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT,
	VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT = VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT,
	VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT = VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT,
	VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT = VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT,
	VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT = VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT,
	VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT = VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT,
}
enum VkDeviceFaultVendorBinaryHeaderVersionEXT {
	VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT = 1,
	VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkDeviceFaultVendorBinaryHeaderVersionEXT {
	VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT = VkDeviceFaultVendorBinaryHeaderVersionEXT.VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT,
	VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT = VkDeviceFaultVendorBinaryHeaderVersionEXT.VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT,
}
enum VkDeviceGroupPresentModeFlagBitsKHR {
	VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 0x00000001,
	VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 0x00000002,
	VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 0x00000004,
	VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 0x00000008,
	VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkDeviceGroupPresentModeFlagBitsKHR {
	VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR,
	VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR,
	VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR,
	VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR,
	VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkDeviceMemoryReportEventTypeEXT {
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = 0,
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = 1,
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = 2,
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = 3,
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = 4,
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkDeviceMemoryReportEventTypeEXT {
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT,
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT,
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT,
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT,
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT,
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT = VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT,
}
enum VkDeviceQueueCreateFlagBits {
	VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 0x00000001,
	VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkDeviceQueueCreateFlagBits {
	VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = VkDeviceQueueCreateFlagBits.VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT,
	VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = VkDeviceQueueCreateFlagBits.VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM,
}
enum VkDirectDriverLoadingModeLUNARG {
	VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG = 0,
	VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG = 1,
	VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG = 0x7FFFFFFF,
}
enum : VkDirectDriverLoadingModeLUNARG {
	VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG = VkDirectDriverLoadingModeLUNARG.VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG,
	VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG = VkDirectDriverLoadingModeLUNARG.VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG,
	VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG = VkDirectDriverLoadingModeLUNARG.VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG,
}
enum VkDiscardRectangleModeEXT {
	VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0,
	VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1,
	VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkDiscardRectangleModeEXT {
	VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = VkDiscardRectangleModeEXT.VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT,
	VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = VkDiscardRectangleModeEXT.VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT,
	VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = VkDiscardRectangleModeEXT.VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT,
}
enum VkDisplayEventTypeEXT {
	VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0,
	VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkDisplayEventTypeEXT {
	VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = VkDisplayEventTypeEXT.VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT,
	VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = VkDisplayEventTypeEXT.VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT,
}
enum VkDisplayPlaneAlphaFlagBitsKHR {
	VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 0x00000001,
	VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 0x00000002,
	VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 0x00000004,
	VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 0x00000008,
	VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkDisplayPlaneAlphaFlagBitsKHR {
	VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR,
	VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR,
	VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR,
	VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR,
	VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkDisplayPowerStateEXT {
	VK_DISPLAY_POWER_STATE_OFF_EXT = 0,
	VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1,
	VK_DISPLAY_POWER_STATE_ON_EXT = 2,
	VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkDisplayPowerStateEXT {
	VK_DISPLAY_POWER_STATE_OFF_EXT = VkDisplayPowerStateEXT.VK_DISPLAY_POWER_STATE_OFF_EXT,
	VK_DISPLAY_POWER_STATE_SUSPEND_EXT = VkDisplayPowerStateEXT.VK_DISPLAY_POWER_STATE_SUSPEND_EXT,
	VK_DISPLAY_POWER_STATE_ON_EXT = VkDisplayPowerStateEXT.VK_DISPLAY_POWER_STATE_ON_EXT,
	VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = VkDisplayPowerStateEXT.VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT,
}
enum VkDisplaySurfaceStereoTypeNV {
	VK_DISPLAY_SURFACE_STEREO_TYPE_NONE_NV = 0,
	VK_DISPLAY_SURFACE_STEREO_TYPE_ONBOARD_DIN_NV = 1,
	VK_DISPLAY_SURFACE_STEREO_TYPE_HDMI_3D_NV = 2,
	VK_DISPLAY_SURFACE_STEREO_TYPE_INBAND_DISPLAYPORT_NV = 3,
	VK_DISPLAY_SURFACE_STEREO_TYPE_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkDisplaySurfaceStereoTypeNV {
	VK_DISPLAY_SURFACE_STEREO_TYPE_NONE_NV = VkDisplaySurfaceStereoTypeNV.VK_DISPLAY_SURFACE_STEREO_TYPE_NONE_NV,
	VK_DISPLAY_SURFACE_STEREO_TYPE_ONBOARD_DIN_NV = VkDisplaySurfaceStereoTypeNV.VK_DISPLAY_SURFACE_STEREO_TYPE_ONBOARD_DIN_NV,
	VK_DISPLAY_SURFACE_STEREO_TYPE_HDMI_3D_NV = VkDisplaySurfaceStereoTypeNV.VK_DISPLAY_SURFACE_STEREO_TYPE_HDMI_3D_NV,
	VK_DISPLAY_SURFACE_STEREO_TYPE_INBAND_DISPLAYPORT_NV = VkDisplaySurfaceStereoTypeNV.VK_DISPLAY_SURFACE_STEREO_TYPE_INBAND_DISPLAYPORT_NV,
	VK_DISPLAY_SURFACE_STEREO_TYPE_MAX_ENUM_NV = VkDisplaySurfaceStereoTypeNV.VK_DISPLAY_SURFACE_STEREO_TYPE_MAX_ENUM_NV,
}
enum VkDriverId {
	VK_DRIVER_ID_AMD_PROPRIETARY = 1,
	VK_DRIVER_ID_AMD_OPEN_SOURCE = 2,
	VK_DRIVER_ID_MESA_RADV = 3,
	VK_DRIVER_ID_NVIDIA_PROPRIETARY = 4,
	VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5,
	VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6,
	VK_DRIVER_ID_IMAGINATION_PROPRIETARY = 7,
	VK_DRIVER_ID_QUALCOMM_PROPRIETARY = 8,
	VK_DRIVER_ID_ARM_PROPRIETARY = 9,
	VK_DRIVER_ID_GOOGLE_SWIFTSHADER = 10,
	VK_DRIVER_ID_GGP_PROPRIETARY = 11,
	VK_DRIVER_ID_BROADCOM_PROPRIETARY = 12,
	VK_DRIVER_ID_MESA_LLVMPIPE = 13,
	VK_DRIVER_ID_MOLTENVK = 14,
	VK_DRIVER_ID_COREAVI_PROPRIETARY = 15,
	VK_DRIVER_ID_JUICE_PROPRIETARY = 16,
	VK_DRIVER_ID_VERISILICON_PROPRIETARY = 17,
	VK_DRIVER_ID_MESA_TURNIP = 18,
	VK_DRIVER_ID_MESA_V3DV = 19,
	VK_DRIVER_ID_MESA_PANVK = 20,
	VK_DRIVER_ID_SAMSUNG_PROPRIETARY = 21,
	VK_DRIVER_ID_MESA_VENUS = 22,
	VK_DRIVER_ID_MESA_DOZEN = 23,
	VK_DRIVER_ID_MESA_NVK = 24,
	VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA = 25,
	VK_DRIVER_ID_MESA_HONEYKRISP = 26,
	VK_DRIVER_ID_VULKAN_SC_EMULATION_ON_VULKAN = 27,
	VK_DRIVER_ID_AMD_PROPRIETARY_KHR = VK_DRIVER_ID_AMD_PROPRIETARY,
	VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = VK_DRIVER_ID_AMD_OPEN_SOURCE,
	VK_DRIVER_ID_MESA_RADV_KHR = VK_DRIVER_ID_MESA_RADV,
	VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = VK_DRIVER_ID_NVIDIA_PROPRIETARY,
	VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS,
	VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA,
	VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = VK_DRIVER_ID_IMAGINATION_PROPRIETARY,
	VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = VK_DRIVER_ID_QUALCOMM_PROPRIETARY,
	VK_DRIVER_ID_ARM_PROPRIETARY_KHR = VK_DRIVER_ID_ARM_PROPRIETARY,
	VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = VK_DRIVER_ID_GOOGLE_SWIFTSHADER,
	VK_DRIVER_ID_GGP_PROPRIETARY_KHR = VK_DRIVER_ID_GGP_PROPRIETARY,
	VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR = VK_DRIVER_ID_BROADCOM_PROPRIETARY,
	VK_DRIVER_ID_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkDriverId {
	VK_DRIVER_ID_AMD_PROPRIETARY = VkDriverId.VK_DRIVER_ID_AMD_PROPRIETARY,
	VK_DRIVER_ID_AMD_OPEN_SOURCE = VkDriverId.VK_DRIVER_ID_AMD_OPEN_SOURCE,
	VK_DRIVER_ID_MESA_RADV = VkDriverId.VK_DRIVER_ID_MESA_RADV,
	VK_DRIVER_ID_NVIDIA_PROPRIETARY = VkDriverId.VK_DRIVER_ID_NVIDIA_PROPRIETARY,
	VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = VkDriverId.VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS,
	VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = VkDriverId.VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA,
	VK_DRIVER_ID_IMAGINATION_PROPRIETARY = VkDriverId.VK_DRIVER_ID_IMAGINATION_PROPRIETARY,
	VK_DRIVER_ID_QUALCOMM_PROPRIETARY = VkDriverId.VK_DRIVER_ID_QUALCOMM_PROPRIETARY,
	VK_DRIVER_ID_ARM_PROPRIETARY = VkDriverId.VK_DRIVER_ID_ARM_PROPRIETARY,
	VK_DRIVER_ID_GOOGLE_SWIFTSHADER = VkDriverId.VK_DRIVER_ID_GOOGLE_SWIFTSHADER,
	VK_DRIVER_ID_GGP_PROPRIETARY = VkDriverId.VK_DRIVER_ID_GGP_PROPRIETARY,
	VK_DRIVER_ID_BROADCOM_PROPRIETARY = VkDriverId.VK_DRIVER_ID_BROADCOM_PROPRIETARY,
	VK_DRIVER_ID_MESA_LLVMPIPE = VkDriverId.VK_DRIVER_ID_MESA_LLVMPIPE,
	VK_DRIVER_ID_MOLTENVK = VkDriverId.VK_DRIVER_ID_MOLTENVK,
	VK_DRIVER_ID_COREAVI_PROPRIETARY = VkDriverId.VK_DRIVER_ID_COREAVI_PROPRIETARY,
	VK_DRIVER_ID_JUICE_PROPRIETARY = VkDriverId.VK_DRIVER_ID_JUICE_PROPRIETARY,
	VK_DRIVER_ID_VERISILICON_PROPRIETARY = VkDriverId.VK_DRIVER_ID_VERISILICON_PROPRIETARY,
	VK_DRIVER_ID_MESA_TURNIP = VkDriverId.VK_DRIVER_ID_MESA_TURNIP,
	VK_DRIVER_ID_MESA_V3DV = VkDriverId.VK_DRIVER_ID_MESA_V3DV,
	VK_DRIVER_ID_MESA_PANVK = VkDriverId.VK_DRIVER_ID_MESA_PANVK,
	VK_DRIVER_ID_SAMSUNG_PROPRIETARY = VkDriverId.VK_DRIVER_ID_SAMSUNG_PROPRIETARY,
	VK_DRIVER_ID_MESA_VENUS = VkDriverId.VK_DRIVER_ID_MESA_VENUS,
	VK_DRIVER_ID_MESA_DOZEN = VkDriverId.VK_DRIVER_ID_MESA_DOZEN,
	VK_DRIVER_ID_MESA_NVK = VkDriverId.VK_DRIVER_ID_MESA_NVK,
	VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA = VkDriverId.VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA,
	VK_DRIVER_ID_MESA_HONEYKRISP = VkDriverId.VK_DRIVER_ID_MESA_HONEYKRISP,
	VK_DRIVER_ID_VULKAN_SC_EMULATION_ON_VULKAN = VkDriverId.VK_DRIVER_ID_VULKAN_SC_EMULATION_ON_VULKAN,
	VK_DRIVER_ID_AMD_PROPRIETARY_KHR = VkDriverId.VK_DRIVER_ID_AMD_PROPRIETARY_KHR,
	VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = VkDriverId.VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR,
	VK_DRIVER_ID_MESA_RADV_KHR = VkDriverId.VK_DRIVER_ID_MESA_RADV_KHR,
	VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = VkDriverId.VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR,
	VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = VkDriverId.VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR,
	VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = VkDriverId.VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR,
	VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = VkDriverId.VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR,
	VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = VkDriverId.VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR,
	VK_DRIVER_ID_ARM_PROPRIETARY_KHR = VkDriverId.VK_DRIVER_ID_ARM_PROPRIETARY_KHR,
	VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = VkDriverId.VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR,
	VK_DRIVER_ID_GGP_PROPRIETARY_KHR = VkDriverId.VK_DRIVER_ID_GGP_PROPRIETARY_KHR,
	VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR = VkDriverId.VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR,
	VK_DRIVER_ID_MAX_ENUM = VkDriverId.VK_DRIVER_ID_MAX_ENUM,
}
enum VkDynamicState {
	VK_DYNAMIC_STATE_VIEWPORT = 0,
	VK_DYNAMIC_STATE_SCISSOR = 1,
	VK_DYNAMIC_STATE_LINE_WIDTH = 2,
	VK_DYNAMIC_STATE_DEPTH_BIAS = 3,
	VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,
	VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,
	VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
	VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
	VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8,
	VK_DYNAMIC_STATE_CULL_MODE = 1000267000,
	VK_DYNAMIC_STATE_FRONT_FACE = 1000267001,
	VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY = 1000267002,
	VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT = 1000267003,
	VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT = 1000267004,
	VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE = 1000267005,
	VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE = 1000267006,
	VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE = 1000267007,
	VK_DYNAMIC_STATE_DEPTH_COMPARE_OP = 1000267008,
	VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE = 1000267009,
	VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE = 1000267010,
	VK_DYNAMIC_STATE_STENCIL_OP = 1000267011,
	VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE = 1000377001,
	VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE = 1000377002,
	VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE = 1000377004,
	VK_DYNAMIC_STATE_LINE_STIPPLE = 1000259000,
	VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000,
	VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000,
	VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT = 1000099001,
	VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT = 1000099002,
	VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000,
	VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR = 1000347000,
	VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004,
	VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006,
	VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV = 1000205000,
	VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001,
	VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR = 1000226000,
	VK_DYNAMIC_STATE_VERTEX_INPUT_EXT = 1000352000,
	VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT = 1000377000,
	VK_DYNAMIC_STATE_LOGIC_OP_EXT = 1000377003,
	VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT = 1000381000,
	VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT = 1000455003,
	VK_DYNAMIC_STATE_POLYGON_MODE_EXT = 1000455004,
	VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT = 1000455005,
	VK_DYNAMIC_STATE_SAMPLE_MASK_EXT = 1000455006,
	VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT = 1000455007,
	VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT = 1000455008,
	VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT = 1000455009,
	VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT = 1000455010,
	VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT = 1000455011,
	VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT = 1000455012,
	VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT = 1000455002,
	VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT = 1000455013,
	VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT = 1000455014,
	VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT = 1000455015,
	VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT = 1000455016,
	VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT = 1000455017,
	VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT = 1000455018,
	VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT = 1000455019,
	VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT = 1000455020,
	VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT = 1000455021,
	VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT = 1000455022,
	VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV = 1000455023,
	VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV = 1000455024,
	VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV = 1000455025,
	VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV = 1000455026,
	VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV = 1000455027,
	VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV = 1000455028,
	VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV = 1000455029,
	VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV = 1000455030,
	VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV = 1000455031,
	VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV = 1000455032,
	VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT = 1000524000,
	VK_DYNAMIC_STATE_DEPTH_CLAMP_RANGE_EXT = 1000582000,
	VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = VK_DYNAMIC_STATE_LINE_STIPPLE,
	VK_DYNAMIC_STATE_CULL_MODE_EXT = VK_DYNAMIC_STATE_CULL_MODE,
	VK_DYNAMIC_STATE_FRONT_FACE_EXT = VK_DYNAMIC_STATE_FRONT_FACE,
	VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY,
	VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT,
	VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT,
	VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE,
	VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE,
	VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE,
	VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = VK_DYNAMIC_STATE_DEPTH_COMPARE_OP,
	VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE,
	VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE,
	VK_DYNAMIC_STATE_STENCIL_OP_EXT = VK_DYNAMIC_STATE_STENCIL_OP,
	VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT = VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE,
	VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE,
	VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT = VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE,
	VK_DYNAMIC_STATE_LINE_STIPPLE_KHR = VK_DYNAMIC_STATE_LINE_STIPPLE,
	VK_DYNAMIC_STATE_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkDynamicState {
	VK_DYNAMIC_STATE_VIEWPORT = VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT,
	VK_DYNAMIC_STATE_SCISSOR = VkDynamicState.VK_DYNAMIC_STATE_SCISSOR,
	VK_DYNAMIC_STATE_LINE_WIDTH = VkDynamicState.VK_DYNAMIC_STATE_LINE_WIDTH,
	VK_DYNAMIC_STATE_DEPTH_BIAS = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BIAS,
	VK_DYNAMIC_STATE_BLEND_CONSTANTS = VkDynamicState.VK_DYNAMIC_STATE_BLEND_CONSTANTS,
	VK_DYNAMIC_STATE_DEPTH_BOUNDS = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BOUNDS,
	VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = VkDynamicState.VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK,
	VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = VkDynamicState.VK_DYNAMIC_STATE_STENCIL_WRITE_MASK,
	VK_DYNAMIC_STATE_STENCIL_REFERENCE = VkDynamicState.VK_DYNAMIC_STATE_STENCIL_REFERENCE,
	VK_DYNAMIC_STATE_CULL_MODE = VkDynamicState.VK_DYNAMIC_STATE_CULL_MODE,
	VK_DYNAMIC_STATE_FRONT_FACE = VkDynamicState.VK_DYNAMIC_STATE_FRONT_FACE,
	VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY = VkDynamicState.VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY,
	VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT = VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT,
	VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT = VkDynamicState.VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT,
	VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE = VkDynamicState.VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE,
	VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE,
	VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE,
	VK_DYNAMIC_STATE_DEPTH_COMPARE_OP = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_COMPARE_OP,
	VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE,
	VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE = VkDynamicState.VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE,
	VK_DYNAMIC_STATE_STENCIL_OP = VkDynamicState.VK_DYNAMIC_STATE_STENCIL_OP,
	VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE = VkDynamicState.VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE,
	VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE,
	VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE = VkDynamicState.VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE,
	VK_DYNAMIC_STATE_LINE_STIPPLE = VkDynamicState.VK_DYNAMIC_STATE_LINE_STIPPLE,
	VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV,
	VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT,
	VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT,
	VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT = VkDynamicState.VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT,
	VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = VkDynamicState.VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT,
	VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR = VkDynamicState.VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR,
	VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV,
	VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV,
	VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV = VkDynamicState.VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV,
	VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = VkDynamicState.VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV,
	VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR = VkDynamicState.VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR,
	VK_DYNAMIC_STATE_VERTEX_INPUT_EXT = VkDynamicState.VK_DYNAMIC_STATE_VERTEX_INPUT_EXT,
	VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT = VkDynamicState.VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT,
	VK_DYNAMIC_STATE_LOGIC_OP_EXT = VkDynamicState.VK_DYNAMIC_STATE_LOGIC_OP_EXT,
	VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT,
	VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT,
	VK_DYNAMIC_STATE_POLYGON_MODE_EXT = VkDynamicState.VK_DYNAMIC_STATE_POLYGON_MODE_EXT,
	VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT = VkDynamicState.VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT,
	VK_DYNAMIC_STATE_SAMPLE_MASK_EXT = VkDynamicState.VK_DYNAMIC_STATE_SAMPLE_MASK_EXT,
	VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT,
	VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT,
	VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT,
	VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT,
	VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT = VkDynamicState.VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT,
	VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT = VkDynamicState.VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT,
	VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT = VkDynamicState.VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT,
	VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT = VkDynamicState.VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT,
	VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT = VkDynamicState.VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT,
	VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT = VkDynamicState.VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT,
	VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT,
	VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT,
	VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT = VkDynamicState.VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT,
	VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT = VkDynamicState.VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT,
	VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT = VkDynamicState.VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT,
	VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT,
	VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT,
	VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV = VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV,
	VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV = VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV,
	VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV = VkDynamicState.VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV,
	VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV = VkDynamicState.VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV,
	VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV = VkDynamicState.VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV,
	VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV = VkDynamicState.VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV,
	VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV = VkDynamicState.VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV,
	VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV = VkDynamicState.VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV,
	VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV = VkDynamicState.VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV,
	VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV = VkDynamicState.VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV,
	VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT,
	VK_DYNAMIC_STATE_DEPTH_CLAMP_RANGE_EXT = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_CLAMP_RANGE_EXT,
	VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_LINE_STIPPLE_EXT,
	VK_DYNAMIC_STATE_CULL_MODE_EXT = VkDynamicState.VK_DYNAMIC_STATE_CULL_MODE_EXT,
	VK_DYNAMIC_STATE_FRONT_FACE_EXT = VkDynamicState.VK_DYNAMIC_STATE_FRONT_FACE_EXT,
	VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = VkDynamicState.VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT,
	VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT,
	VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = VkDynamicState.VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT,
	VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = VkDynamicState.VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT,
	VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT,
	VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT,
	VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT,
	VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT,
	VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT,
	VK_DYNAMIC_STATE_STENCIL_OP_EXT = VkDynamicState.VK_DYNAMIC_STATE_STENCIL_OP_EXT,
	VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT,
	VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT,
	VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT,
	VK_DYNAMIC_STATE_LINE_STIPPLE_KHR = VkDynamicState.VK_DYNAMIC_STATE_LINE_STIPPLE_KHR,
	VK_DYNAMIC_STATE_MAX_ENUM = VkDynamicState.VK_DYNAMIC_STATE_MAX_ENUM,
}
enum VkEventCreateFlagBits {
	VK_EVENT_CREATE_DEVICE_ONLY_BIT = 0x00000001,
	VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR = VK_EVENT_CREATE_DEVICE_ONLY_BIT,
	VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkEventCreateFlagBits {
	VK_EVENT_CREATE_DEVICE_ONLY_BIT = VkEventCreateFlagBits.VK_EVENT_CREATE_DEVICE_ONLY_BIT,
	VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR = VkEventCreateFlagBits.VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR,
	VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM = VkEventCreateFlagBits.VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM,
}
enum VkExternalFenceFeatureFlagBits {
	VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 0x00000001,
	VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 0x00000002,
	VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT,
	VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT,
	VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkExternalFenceFeatureFlagBits {
	VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT,
	VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT,
	VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR,
	VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR,
	VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM,
}
enum VkExternalFenceHandleTypeFlagBits {
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 0x00000008,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkExternalFenceHandleTypeFlagBits {
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM,
}
enum VkExternalMemoryFeatureFlagBits {
	VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 0x00000001,
	VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 0x00000002,
	VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 0x00000004,
	VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT,
	VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT,
	VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT,
	VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkExternalMemoryFeatureFlagBits {
	VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT,
	VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT,
	VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT,
	VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR,
	VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR,
	VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR,
	VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM,
}
enum VkExternalMemoryFeatureFlagBitsNV {
	VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 0x00000001,
	VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 0x00000002,
	VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 0x00000004,
	VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkExternalMemoryFeatureFlagBitsNV {
	VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = VkExternalMemoryFeatureFlagBitsNV.VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV,
	VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = VkExternalMemoryFeatureFlagBitsNV.VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV,
	VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = VkExternalMemoryFeatureFlagBitsNV.VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV,
	VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = VkExternalMemoryFeatureFlagBitsNV.VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV,
}
enum VkExternalMemoryHandleTypeFlagBits {
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 0x00000008,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 0x00000010,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 0x00000020,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 0x00000040,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 0x00000200,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 0x00000400,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 0x00000080,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 0x00000100,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA = 0x00000800,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV = 0x00001000,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX = 0x00004000,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_MTLBUFFER_BIT_EXT = 0x00010000,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_MTLTEXTURE_BIT_EXT = 0x00020000,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_MTLHEAP_BIT_EXT = 0x00040000,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkExternalMemoryHandleTypeFlagBits {
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_MTLBUFFER_BIT_EXT = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_MTLBUFFER_BIT_EXT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_MTLTEXTURE_BIT_EXT = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_MTLTEXTURE_BIT_EXT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_MTLHEAP_BIT_EXT = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_MTLHEAP_BIT_EXT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM,
}
enum VkExternalMemoryHandleTypeFlagBitsNV {
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 0x00000001,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 0x00000002,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 0x00000004,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 0x00000008,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkExternalMemoryHandleTypeFlagBitsNV {
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV,
}
enum VkExternalSemaphoreFeatureFlagBits {
	VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 0x00000001,
	VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 0x00000002,
	VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT,
	VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT,
	VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkExternalSemaphoreFeatureFlagBits {
	VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT,
	VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT,
	VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR,
	VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR,
	VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM,
}
enum VkExternalSemaphoreHandleTypeFlagBits {
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 0x00000008,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 0x00000010,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA = 0x00000080,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkExternalSemaphoreHandleTypeFlagBits {
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA = VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT = VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM,
}
enum VkFenceCreateFlagBits {
	VK_FENCE_CREATE_SIGNALED_BIT = 0x00000001,
	VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkFenceCreateFlagBits {
	VK_FENCE_CREATE_SIGNALED_BIT = VkFenceCreateFlagBits.VK_FENCE_CREATE_SIGNALED_BIT,
	VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = VkFenceCreateFlagBits.VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM,
}
enum VkFenceImportFlagBits {
	VK_FENCE_IMPORT_TEMPORARY_BIT = 0x00000001,
	VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = VK_FENCE_IMPORT_TEMPORARY_BIT,
	VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkFenceImportFlagBits {
	VK_FENCE_IMPORT_TEMPORARY_BIT = VkFenceImportFlagBits.VK_FENCE_IMPORT_TEMPORARY_BIT,
	VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = VkFenceImportFlagBits.VK_FENCE_IMPORT_TEMPORARY_BIT_KHR,
	VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = VkFenceImportFlagBits.VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM,
}
enum VkFilter {
	VK_FILTER_NEAREST = 0,
	VK_FILTER_LINEAR = 1,
	VK_FILTER_CUBIC_EXT = 1000015000,
	VK_FILTER_CUBIC_IMG = VK_FILTER_CUBIC_EXT,
	VK_FILTER_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkFilter {
	VK_FILTER_NEAREST = VkFilter.VK_FILTER_NEAREST,
	VK_FILTER_LINEAR = VkFilter.VK_FILTER_LINEAR,
	VK_FILTER_CUBIC_EXT = VkFilter.VK_FILTER_CUBIC_EXT,
	VK_FILTER_CUBIC_IMG = VkFilter.VK_FILTER_CUBIC_IMG,
	VK_FILTER_MAX_ENUM = VkFilter.VK_FILTER_MAX_ENUM,
}
enum VkFormat {
	VK_FORMAT_UNDEFINED = 0,
	VK_FORMAT_R4G4_UNORM_PACK8 = 1,
	VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
	VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
	VK_FORMAT_R5G6B5_UNORM_PACK16 = 4,
	VK_FORMAT_B5G6R5_UNORM_PACK16 = 5,
	VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
	VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
	VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
	VK_FORMAT_R8_UNORM = 9,
	VK_FORMAT_R8_SNORM = 10,
	VK_FORMAT_R8_USCALED = 11,
	VK_FORMAT_R8_SSCALED = 12,
	VK_FORMAT_R8_UINT = 13,
	VK_FORMAT_R8_SINT = 14,
	VK_FORMAT_R8_SRGB = 15,
	VK_FORMAT_R8G8_UNORM = 16,
	VK_FORMAT_R8G8_SNORM = 17,
	VK_FORMAT_R8G8_USCALED = 18,
	VK_FORMAT_R8G8_SSCALED = 19,
	VK_FORMAT_R8G8_UINT = 20,
	VK_FORMAT_R8G8_SINT = 21,
	VK_FORMAT_R8G8_SRGB = 22,
	VK_FORMAT_R8G8B8_UNORM = 23,
	VK_FORMAT_R8G8B8_SNORM = 24,
	VK_FORMAT_R8G8B8_USCALED = 25,
	VK_FORMAT_R8G8B8_SSCALED = 26,
	VK_FORMAT_R8G8B8_UINT = 27,
	VK_FORMAT_R8G8B8_SINT = 28,
	VK_FORMAT_R8G8B8_SRGB = 29,
	VK_FORMAT_B8G8R8_UNORM = 30,
	VK_FORMAT_B8G8R8_SNORM = 31,
	VK_FORMAT_B8G8R8_USCALED = 32,
	VK_FORMAT_B8G8R8_SSCALED = 33,
	VK_FORMAT_B8G8R8_UINT = 34,
	VK_FORMAT_B8G8R8_SINT = 35,
	VK_FORMAT_B8G8R8_SRGB = 36,
	VK_FORMAT_R8G8B8A8_UNORM = 37,
	VK_FORMAT_R8G8B8A8_SNORM = 38,
	VK_FORMAT_R8G8B8A8_USCALED = 39,
	VK_FORMAT_R8G8B8A8_SSCALED = 40,
	VK_FORMAT_R8G8B8A8_UINT = 41,
	VK_FORMAT_R8G8B8A8_SINT = 42,
	VK_FORMAT_R8G8B8A8_SRGB = 43,
	VK_FORMAT_B8G8R8A8_UNORM = 44,
	VK_FORMAT_B8G8R8A8_SNORM = 45,
	VK_FORMAT_B8G8R8A8_USCALED = 46,
	VK_FORMAT_B8G8R8A8_SSCALED = 47,
	VK_FORMAT_B8G8R8A8_UINT = 48,
	VK_FORMAT_B8G8R8A8_SINT = 49,
	VK_FORMAT_B8G8R8A8_SRGB = 50,
	VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
	VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
	VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
	VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
	VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
	VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
	VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
	VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
	VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
	VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
	VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
	VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
	VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
	VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
	VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
	VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
	VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
	VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
	VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
	VK_FORMAT_R16_UNORM = 70,
	VK_FORMAT_R16_SNORM = 71,
	VK_FORMAT_R16_USCALED = 72,
	VK_FORMAT_R16_SSCALED = 73,
	VK_FORMAT_R16_UINT = 74,
	VK_FORMAT_R16_SINT = 75,
	VK_FORMAT_R16_SFLOAT = 76,
	VK_FORMAT_R16G16_UNORM = 77,
	VK_FORMAT_R16G16_SNORM = 78,
	VK_FORMAT_R16G16_USCALED = 79,
	VK_FORMAT_R16G16_SSCALED = 80,
	VK_FORMAT_R16G16_UINT = 81,
	VK_FORMAT_R16G16_SINT = 82,
	VK_FORMAT_R16G16_SFLOAT = 83,
	VK_FORMAT_R16G16B16_UNORM = 84,
	VK_FORMAT_R16G16B16_SNORM = 85,
	VK_FORMAT_R16G16B16_USCALED = 86,
	VK_FORMAT_R16G16B16_SSCALED = 87,
	VK_FORMAT_R16G16B16_UINT = 88,
	VK_FORMAT_R16G16B16_SINT = 89,
	VK_FORMAT_R16G16B16_SFLOAT = 90,
	VK_FORMAT_R16G16B16A16_UNORM = 91,
	VK_FORMAT_R16G16B16A16_SNORM = 92,
	VK_FORMAT_R16G16B16A16_USCALED = 93,
	VK_FORMAT_R16G16B16A16_SSCALED = 94,
	VK_FORMAT_R16G16B16A16_UINT = 95,
	VK_FORMAT_R16G16B16A16_SINT = 96,
	VK_FORMAT_R16G16B16A16_SFLOAT = 97,
	VK_FORMAT_R32_UINT = 98,
	VK_FORMAT_R32_SINT = 99,
	VK_FORMAT_R32_SFLOAT = 100,
	VK_FORMAT_R32G32_UINT = 101,
	VK_FORMAT_R32G32_SINT = 102,
	VK_FORMAT_R32G32_SFLOAT = 103,
	VK_FORMAT_R32G32B32_UINT = 104,
	VK_FORMAT_R32G32B32_SINT = 105,
	VK_FORMAT_R32G32B32_SFLOAT = 106,
	VK_FORMAT_R32G32B32A32_UINT = 107,
	VK_FORMAT_R32G32B32A32_SINT = 108,
	VK_FORMAT_R32G32B32A32_SFLOAT = 109,
	VK_FORMAT_R64_UINT = 110,
	VK_FORMAT_R64_SINT = 111,
	VK_FORMAT_R64_SFLOAT = 112,
	VK_FORMAT_R64G64_UINT = 113,
	VK_FORMAT_R64G64_SINT = 114,
	VK_FORMAT_R64G64_SFLOAT = 115,
	VK_FORMAT_R64G64B64_UINT = 116,
	VK_FORMAT_R64G64B64_SINT = 117,
	VK_FORMAT_R64G64B64_SFLOAT = 118,
	VK_FORMAT_R64G64B64A64_UINT = 119,
	VK_FORMAT_R64G64B64A64_SINT = 120,
	VK_FORMAT_R64G64B64A64_SFLOAT = 121,
	VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
	VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
	VK_FORMAT_D16_UNORM = 124,
	VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
	VK_FORMAT_D32_SFLOAT = 126,
	VK_FORMAT_S8_UINT = 127,
	VK_FORMAT_D16_UNORM_S8_UINT = 128,
	VK_FORMAT_D24_UNORM_S8_UINT = 129,
	VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
	VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
	VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
	VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
	VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
	VK_FORMAT_BC2_UNORM_BLOCK = 135,
	VK_FORMAT_BC2_SRGB_BLOCK = 136,
	VK_FORMAT_BC3_UNORM_BLOCK = 137,
	VK_FORMAT_BC3_SRGB_BLOCK = 138,
	VK_FORMAT_BC4_UNORM_BLOCK = 139,
	VK_FORMAT_BC4_SNORM_BLOCK = 140,
	VK_FORMAT_BC5_UNORM_BLOCK = 141,
	VK_FORMAT_BC5_SNORM_BLOCK = 142,
	VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
	VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
	VK_FORMAT_BC7_UNORM_BLOCK = 145,
	VK_FORMAT_BC7_SRGB_BLOCK = 146,
	VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
	VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
	VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
	VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
	VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
	VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
	VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
	VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
	VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
	VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
	VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
	VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
	VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
	VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
	VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
	VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
	VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
	VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
	VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
	VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
	VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
	VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
	VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
	VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
	VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
	VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
	VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
	VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
	VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
	VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
	VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
	VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
	VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
	VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
	VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
	VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
	VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
	VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,
	VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000,
	VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001,
	VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002,
	VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003,
	VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004,
	VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005,
	VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006,
	VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007,
	VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008,
	VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009,
	VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010,
	VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011,
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012,
	VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013,
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014,
	VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015,
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016,
	VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017,
	VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018,
	VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019,
	VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020,
	VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021,
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022,
	VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023,
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024,
	VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025,
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026,
	VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027,
	VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028,
	VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029,
	VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030,
	VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031,
	VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032,
	VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033,
	VK_FORMAT_G8_B8R8_2PLANE_444_UNORM = 1000330000,
	VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 = 1000330001,
	VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 = 1000330002,
	VK_FORMAT_G16_B16R16_2PLANE_444_UNORM = 1000330003,
	VK_FORMAT_A4R4G4B4_UNORM_PACK16 = 1000340000,
	VK_FORMAT_A4B4G4R4_UNORM_PACK16 = 1000340001,
	VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK = 1000066000,
	VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK = 1000066001,
	VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK = 1000066002,
	VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK = 1000066003,
	VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK = 1000066004,
	VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK = 1000066005,
	VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK = 1000066006,
	VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK = 1000066007,
	VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK = 1000066008,
	VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK = 1000066009,
	VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK = 1000066010,
	VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK = 1000066011,
	VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK = 1000066012,
	VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK = 1000066013,
	VK_FORMAT_A1B5G5R5_UNORM_PACK16 = 1000470000,
	VK_FORMAT_A8_UNORM = 1000470001,
	VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000,
	VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001,
	VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002,
	VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003,
	VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004,
	VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005,
	VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006,
	VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007,
	VK_FORMAT_R16G16_SFIXED5_NV = 1000464000,
	VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK,
	VK_FORMAT_G8B8G8R8_422_UNORM_KHR = VK_FORMAT_G8B8G8R8_422_UNORM,
	VK_FORMAT_B8G8R8G8_422_UNORM_KHR = VK_FORMAT_B8G8R8G8_422_UNORM,
	VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM,
	VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM,
	VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM,
	VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_422_UNORM,
	VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM,
	VK_FORMAT_R10X6_UNORM_PACK16_KHR = VK_FORMAT_R10X6_UNORM_PACK16,
	VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = VK_FORMAT_R10X6G10X6_UNORM_2PACK16,
	VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16,
	VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16,
	VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16,
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16,
	VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16,
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16,
	VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16,
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16,
	VK_FORMAT_R12X4_UNORM_PACK16_KHR = VK_FORMAT_R12X4_UNORM_PACK16,
	VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = VK_FORMAT_R12X4G12X4_UNORM_2PACK16,
	VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16,
	VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16,
	VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16,
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16,
	VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16,
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16,
	VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16,
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16,
	VK_FORMAT_G16B16G16R16_422_UNORM_KHR = VK_FORMAT_G16B16G16R16_422_UNORM,
	VK_FORMAT_B16G16R16G16_422_UNORM_KHR = VK_FORMAT_B16G16R16G16_422_UNORM,
	VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM,
	VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_420_UNORM,
	VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM,
	VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_422_UNORM,
	VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM,
	VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT = VK_FORMAT_G8_B8R8_2PLANE_444_UNORM,
	VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16,
	VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16,
	VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT = VK_FORMAT_G16_B16R16_2PLANE_444_UNORM,
	VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT = VK_FORMAT_A4R4G4B4_UNORM_PACK16,
	VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT = VK_FORMAT_A4B4G4R4_UNORM_PACK16,
	VK_FORMAT_R16G16_S10_5_NV = VK_FORMAT_R16G16_SFIXED5_NV,
	VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR = VK_FORMAT_A1B5G5R5_UNORM_PACK16,
	VK_FORMAT_A8_UNORM_KHR = VK_FORMAT_A8_UNORM,
	VK_FORMAT_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkFormat {
	VK_FORMAT_UNDEFINED = VkFormat.VK_FORMAT_UNDEFINED,
	VK_FORMAT_R4G4_UNORM_PACK8 = VkFormat.VK_FORMAT_R4G4_UNORM_PACK8,
	VK_FORMAT_R4G4B4A4_UNORM_PACK16 = VkFormat.VK_FORMAT_R4G4B4A4_UNORM_PACK16,
	VK_FORMAT_B4G4R4A4_UNORM_PACK16 = VkFormat.VK_FORMAT_B4G4R4A4_UNORM_PACK16,
	VK_FORMAT_R5G6B5_UNORM_PACK16 = VkFormat.VK_FORMAT_R5G6B5_UNORM_PACK16,
	VK_FORMAT_B5G6R5_UNORM_PACK16 = VkFormat.VK_FORMAT_B5G6R5_UNORM_PACK16,
	VK_FORMAT_R5G5B5A1_UNORM_PACK16 = VkFormat.VK_FORMAT_R5G5B5A1_UNORM_PACK16,
	VK_FORMAT_B5G5R5A1_UNORM_PACK16 = VkFormat.VK_FORMAT_B5G5R5A1_UNORM_PACK16,
	VK_FORMAT_A1R5G5B5_UNORM_PACK16 = VkFormat.VK_FORMAT_A1R5G5B5_UNORM_PACK16,
	VK_FORMAT_R8_UNORM = VkFormat.VK_FORMAT_R8_UNORM,
	VK_FORMAT_R8_SNORM = VkFormat.VK_FORMAT_R8_SNORM,
	VK_FORMAT_R8_USCALED = VkFormat.VK_FORMAT_R8_USCALED,
	VK_FORMAT_R8_SSCALED = VkFormat.VK_FORMAT_R8_SSCALED,
	VK_FORMAT_R8_UINT = VkFormat.VK_FORMAT_R8_UINT,
	VK_FORMAT_R8_SINT = VkFormat.VK_FORMAT_R8_SINT,
	VK_FORMAT_R8_SRGB = VkFormat.VK_FORMAT_R8_SRGB,
	VK_FORMAT_R8G8_UNORM = VkFormat.VK_FORMAT_R8G8_UNORM,
	VK_FORMAT_R8G8_SNORM = VkFormat.VK_FORMAT_R8G8_SNORM,
	VK_FORMAT_R8G8_USCALED = VkFormat.VK_FORMAT_R8G8_USCALED,
	VK_FORMAT_R8G8_SSCALED = VkFormat.VK_FORMAT_R8G8_SSCALED,
	VK_FORMAT_R8G8_UINT = VkFormat.VK_FORMAT_R8G8_UINT,
	VK_FORMAT_R8G8_SINT = VkFormat.VK_FORMAT_R8G8_SINT,
	VK_FORMAT_R8G8_SRGB = VkFormat.VK_FORMAT_R8G8_SRGB,
	VK_FORMAT_R8G8B8_UNORM = VkFormat.VK_FORMAT_R8G8B8_UNORM,
	VK_FORMAT_R8G8B8_SNORM = VkFormat.VK_FORMAT_R8G8B8_SNORM,
	VK_FORMAT_R8G8B8_USCALED = VkFormat.VK_FORMAT_R8G8B8_USCALED,
	VK_FORMAT_R8G8B8_SSCALED = VkFormat.VK_FORMAT_R8G8B8_SSCALED,
	VK_FORMAT_R8G8B8_UINT = VkFormat.VK_FORMAT_R8G8B8_UINT,
	VK_FORMAT_R8G8B8_SINT = VkFormat.VK_FORMAT_R8G8B8_SINT,
	VK_FORMAT_R8G8B8_SRGB = VkFormat.VK_FORMAT_R8G8B8_SRGB,
	VK_FORMAT_B8G8R8_UNORM = VkFormat.VK_FORMAT_B8G8R8_UNORM,
	VK_FORMAT_B8G8R8_SNORM = VkFormat.VK_FORMAT_B8G8R8_SNORM,
	VK_FORMAT_B8G8R8_USCALED = VkFormat.VK_FORMAT_B8G8R8_USCALED,
	VK_FORMAT_B8G8R8_SSCALED = VkFormat.VK_FORMAT_B8G8R8_SSCALED,
	VK_FORMAT_B8G8R8_UINT = VkFormat.VK_FORMAT_B8G8R8_UINT,
	VK_FORMAT_B8G8R8_SINT = VkFormat.VK_FORMAT_B8G8R8_SINT,
	VK_FORMAT_B8G8R8_SRGB = VkFormat.VK_FORMAT_B8G8R8_SRGB,
	VK_FORMAT_R8G8B8A8_UNORM = VkFormat.VK_FORMAT_R8G8B8A8_UNORM,
	VK_FORMAT_R8G8B8A8_SNORM = VkFormat.VK_FORMAT_R8G8B8A8_SNORM,
	VK_FORMAT_R8G8B8A8_USCALED = VkFormat.VK_FORMAT_R8G8B8A8_USCALED,
	VK_FORMAT_R8G8B8A8_SSCALED = VkFormat.VK_FORMAT_R8G8B8A8_SSCALED,
	VK_FORMAT_R8G8B8A8_UINT = VkFormat.VK_FORMAT_R8G8B8A8_UINT,
	VK_FORMAT_R8G8B8A8_SINT = VkFormat.VK_FORMAT_R8G8B8A8_SINT,
	VK_FORMAT_R8G8B8A8_SRGB = VkFormat.VK_FORMAT_R8G8B8A8_SRGB,
	VK_FORMAT_B8G8R8A8_UNORM = VkFormat.VK_FORMAT_B8G8R8A8_UNORM,
	VK_FORMAT_B8G8R8A8_SNORM = VkFormat.VK_FORMAT_B8G8R8A8_SNORM,
	VK_FORMAT_B8G8R8A8_USCALED = VkFormat.VK_FORMAT_B8G8R8A8_USCALED,
	VK_FORMAT_B8G8R8A8_SSCALED = VkFormat.VK_FORMAT_B8G8R8A8_SSCALED,
	VK_FORMAT_B8G8R8A8_UINT = VkFormat.VK_FORMAT_B8G8R8A8_UINT,
	VK_FORMAT_B8G8R8A8_SINT = VkFormat.VK_FORMAT_B8G8R8A8_SINT,
	VK_FORMAT_B8G8R8A8_SRGB = VkFormat.VK_FORMAT_B8G8R8A8_SRGB,
	VK_FORMAT_A8B8G8R8_UNORM_PACK32 = VkFormat.VK_FORMAT_A8B8G8R8_UNORM_PACK32,
	VK_FORMAT_A8B8G8R8_SNORM_PACK32 = VkFormat.VK_FORMAT_A8B8G8R8_SNORM_PACK32,
	VK_FORMAT_A8B8G8R8_USCALED_PACK32 = VkFormat.VK_FORMAT_A8B8G8R8_USCALED_PACK32,
	VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = VkFormat.VK_FORMAT_A8B8G8R8_SSCALED_PACK32,
	VK_FORMAT_A8B8G8R8_UINT_PACK32 = VkFormat.VK_FORMAT_A8B8G8R8_UINT_PACK32,
	VK_FORMAT_A8B8G8R8_SINT_PACK32 = VkFormat.VK_FORMAT_A8B8G8R8_SINT_PACK32,
	VK_FORMAT_A8B8G8R8_SRGB_PACK32 = VkFormat.VK_FORMAT_A8B8G8R8_SRGB_PACK32,
	VK_FORMAT_A2R10G10B10_UNORM_PACK32 = VkFormat.VK_FORMAT_A2R10G10B10_UNORM_PACK32,
	VK_FORMAT_A2R10G10B10_SNORM_PACK32 = VkFormat.VK_FORMAT_A2R10G10B10_SNORM_PACK32,
	VK_FORMAT_A2R10G10B10_USCALED_PACK32 = VkFormat.VK_FORMAT_A2R10G10B10_USCALED_PACK32,
	VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = VkFormat.VK_FORMAT_A2R10G10B10_SSCALED_PACK32,
	VK_FORMAT_A2R10G10B10_UINT_PACK32 = VkFormat.VK_FORMAT_A2R10G10B10_UINT_PACK32,
	VK_FORMAT_A2R10G10B10_SINT_PACK32 = VkFormat.VK_FORMAT_A2R10G10B10_SINT_PACK32,
	VK_FORMAT_A2B10G10R10_UNORM_PACK32 = VkFormat.VK_FORMAT_A2B10G10R10_UNORM_PACK32,
	VK_FORMAT_A2B10G10R10_SNORM_PACK32 = VkFormat.VK_FORMAT_A2B10G10R10_SNORM_PACK32,
	VK_FORMAT_A2B10G10R10_USCALED_PACK32 = VkFormat.VK_FORMAT_A2B10G10R10_USCALED_PACK32,
	VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = VkFormat.VK_FORMAT_A2B10G10R10_SSCALED_PACK32,
	VK_FORMAT_A2B10G10R10_UINT_PACK32 = VkFormat.VK_FORMAT_A2B10G10R10_UINT_PACK32,
	VK_FORMAT_A2B10G10R10_SINT_PACK32 = VkFormat.VK_FORMAT_A2B10G10R10_SINT_PACK32,
	VK_FORMAT_R16_UNORM = VkFormat.VK_FORMAT_R16_UNORM,
	VK_FORMAT_R16_SNORM = VkFormat.VK_FORMAT_R16_SNORM,
	VK_FORMAT_R16_USCALED = VkFormat.VK_FORMAT_R16_USCALED,
	VK_FORMAT_R16_SSCALED = VkFormat.VK_FORMAT_R16_SSCALED,
	VK_FORMAT_R16_UINT = VkFormat.VK_FORMAT_R16_UINT,
	VK_FORMAT_R16_SINT = VkFormat.VK_FORMAT_R16_SINT,
	VK_FORMAT_R16_SFLOAT = VkFormat.VK_FORMAT_R16_SFLOAT,
	VK_FORMAT_R16G16_UNORM = VkFormat.VK_FORMAT_R16G16_UNORM,
	VK_FORMAT_R16G16_SNORM = VkFormat.VK_FORMAT_R16G16_SNORM,
	VK_FORMAT_R16G16_USCALED = VkFormat.VK_FORMAT_R16G16_USCALED,
	VK_FORMAT_R16G16_SSCALED = VkFormat.VK_FORMAT_R16G16_SSCALED,
	VK_FORMAT_R16G16_UINT = VkFormat.VK_FORMAT_R16G16_UINT,
	VK_FORMAT_R16G16_SINT = VkFormat.VK_FORMAT_R16G16_SINT,
	VK_FORMAT_R16G16_SFLOAT = VkFormat.VK_FORMAT_R16G16_SFLOAT,
	VK_FORMAT_R16G16B16_UNORM = VkFormat.VK_FORMAT_R16G16B16_UNORM,
	VK_FORMAT_R16G16B16_SNORM = VkFormat.VK_FORMAT_R16G16B16_SNORM,
	VK_FORMAT_R16G16B16_USCALED = VkFormat.VK_FORMAT_R16G16B16_USCALED,
	VK_FORMAT_R16G16B16_SSCALED = VkFormat.VK_FORMAT_R16G16B16_SSCALED,
	VK_FORMAT_R16G16B16_UINT = VkFormat.VK_FORMAT_R16G16B16_UINT,
	VK_FORMAT_R16G16B16_SINT = VkFormat.VK_FORMAT_R16G16B16_SINT,
	VK_FORMAT_R16G16B16_SFLOAT = VkFormat.VK_FORMAT_R16G16B16_SFLOAT,
	VK_FORMAT_R16G16B16A16_UNORM = VkFormat.VK_FORMAT_R16G16B16A16_UNORM,
	VK_FORMAT_R16G16B16A16_SNORM = VkFormat.VK_FORMAT_R16G16B16A16_SNORM,
	VK_FORMAT_R16G16B16A16_USCALED = VkFormat.VK_FORMAT_R16G16B16A16_USCALED,
	VK_FORMAT_R16G16B16A16_SSCALED = VkFormat.VK_FORMAT_R16G16B16A16_SSCALED,
	VK_FORMAT_R16G16B16A16_UINT = VkFormat.VK_FORMAT_R16G16B16A16_UINT,
	VK_FORMAT_R16G16B16A16_SINT = VkFormat.VK_FORMAT_R16G16B16A16_SINT,
	VK_FORMAT_R16G16B16A16_SFLOAT = VkFormat.VK_FORMAT_R16G16B16A16_SFLOAT,
	VK_FORMAT_R32_UINT = VkFormat.VK_FORMAT_R32_UINT,
	VK_FORMAT_R32_SINT = VkFormat.VK_FORMAT_R32_SINT,
	VK_FORMAT_R32_SFLOAT = VkFormat.VK_FORMAT_R32_SFLOAT,
	VK_FORMAT_R32G32_UINT = VkFormat.VK_FORMAT_R32G32_UINT,
	VK_FORMAT_R32G32_SINT = VkFormat.VK_FORMAT_R32G32_SINT,
	VK_FORMAT_R32G32_SFLOAT = VkFormat.VK_FORMAT_R32G32_SFLOAT,
	VK_FORMAT_R32G32B32_UINT = VkFormat.VK_FORMAT_R32G32B32_UINT,
	VK_FORMAT_R32G32B32_SINT = VkFormat.VK_FORMAT_R32G32B32_SINT,
	VK_FORMAT_R32G32B32_SFLOAT = VkFormat.VK_FORMAT_R32G32B32_SFLOAT,
	VK_FORMAT_R32G32B32A32_UINT = VkFormat.VK_FORMAT_R32G32B32A32_UINT,
	VK_FORMAT_R32G32B32A32_SINT = VkFormat.VK_FORMAT_R32G32B32A32_SINT,
	VK_FORMAT_R32G32B32A32_SFLOAT = VkFormat.VK_FORMAT_R32G32B32A32_SFLOAT,
	VK_FORMAT_R64_UINT = VkFormat.VK_FORMAT_R64_UINT,
	VK_FORMAT_R64_SINT = VkFormat.VK_FORMAT_R64_SINT,
	VK_FORMAT_R64_SFLOAT = VkFormat.VK_FORMAT_R64_SFLOAT,
	VK_FORMAT_R64G64_UINT = VkFormat.VK_FORMAT_R64G64_UINT,
	VK_FORMAT_R64G64_SINT = VkFormat.VK_FORMAT_R64G64_SINT,
	VK_FORMAT_R64G64_SFLOAT = VkFormat.VK_FORMAT_R64G64_SFLOAT,
	VK_FORMAT_R64G64B64_UINT = VkFormat.VK_FORMAT_R64G64B64_UINT,
	VK_FORMAT_R64G64B64_SINT = VkFormat.VK_FORMAT_R64G64B64_SINT,
	VK_FORMAT_R64G64B64_SFLOAT = VkFormat.VK_FORMAT_R64G64B64_SFLOAT,
	VK_FORMAT_R64G64B64A64_UINT = VkFormat.VK_FORMAT_R64G64B64A64_UINT,
	VK_FORMAT_R64G64B64A64_SINT = VkFormat.VK_FORMAT_R64G64B64A64_SINT,
	VK_FORMAT_R64G64B64A64_SFLOAT = VkFormat.VK_FORMAT_R64G64B64A64_SFLOAT,
	VK_FORMAT_B10G11R11_UFLOAT_PACK32 = VkFormat.VK_FORMAT_B10G11R11_UFLOAT_PACK32,
	VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = VkFormat.VK_FORMAT_E5B9G9R9_UFLOAT_PACK32,
	VK_FORMAT_D16_UNORM = VkFormat.VK_FORMAT_D16_UNORM,
	VK_FORMAT_X8_D24_UNORM_PACK32 = VkFormat.VK_FORMAT_X8_D24_UNORM_PACK32,
	VK_FORMAT_D32_SFLOAT = VkFormat.VK_FORMAT_D32_SFLOAT,
	VK_FORMAT_S8_UINT = VkFormat.VK_FORMAT_S8_UINT,
	VK_FORMAT_D16_UNORM_S8_UINT = VkFormat.VK_FORMAT_D16_UNORM_S8_UINT,
	VK_FORMAT_D24_UNORM_S8_UINT = VkFormat.VK_FORMAT_D24_UNORM_S8_UINT,
	VK_FORMAT_D32_SFLOAT_S8_UINT = VkFormat.VK_FORMAT_D32_SFLOAT_S8_UINT,
	VK_FORMAT_BC1_RGB_UNORM_BLOCK = VkFormat.VK_FORMAT_BC1_RGB_UNORM_BLOCK,
	VK_FORMAT_BC1_RGB_SRGB_BLOCK = VkFormat.VK_FORMAT_BC1_RGB_SRGB_BLOCK,
	VK_FORMAT_BC1_RGBA_UNORM_BLOCK = VkFormat.VK_FORMAT_BC1_RGBA_UNORM_BLOCK,
	VK_FORMAT_BC1_RGBA_SRGB_BLOCK = VkFormat.VK_FORMAT_BC1_RGBA_SRGB_BLOCK,
	VK_FORMAT_BC2_UNORM_BLOCK = VkFormat.VK_FORMAT_BC2_UNORM_BLOCK,
	VK_FORMAT_BC2_SRGB_BLOCK = VkFormat.VK_FORMAT_BC2_SRGB_BLOCK,
	VK_FORMAT_BC3_UNORM_BLOCK = VkFormat.VK_FORMAT_BC3_UNORM_BLOCK,
	VK_FORMAT_BC3_SRGB_BLOCK = VkFormat.VK_FORMAT_BC3_SRGB_BLOCK,
	VK_FORMAT_BC4_UNORM_BLOCK = VkFormat.VK_FORMAT_BC4_UNORM_BLOCK,
	VK_FORMAT_BC4_SNORM_BLOCK = VkFormat.VK_FORMAT_BC4_SNORM_BLOCK,
	VK_FORMAT_BC5_UNORM_BLOCK = VkFormat.VK_FORMAT_BC5_UNORM_BLOCK,
	VK_FORMAT_BC5_SNORM_BLOCK = VkFormat.VK_FORMAT_BC5_SNORM_BLOCK,
	VK_FORMAT_BC6H_UFLOAT_BLOCK = VkFormat.VK_FORMAT_BC6H_UFLOAT_BLOCK,
	VK_FORMAT_BC6H_SFLOAT_BLOCK = VkFormat.VK_FORMAT_BC6H_SFLOAT_BLOCK,
	VK_FORMAT_BC7_UNORM_BLOCK = VkFormat.VK_FORMAT_BC7_UNORM_BLOCK,
	VK_FORMAT_BC7_SRGB_BLOCK = VkFormat.VK_FORMAT_BC7_SRGB_BLOCK,
	VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = VkFormat.VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK,
	VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = VkFormat.VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK,
	VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = VkFormat.VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK,
	VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = VkFormat.VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK,
	VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = VkFormat.VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK,
	VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = VkFormat.VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK,
	VK_FORMAT_EAC_R11_UNORM_BLOCK = VkFormat.VK_FORMAT_EAC_R11_UNORM_BLOCK,
	VK_FORMAT_EAC_R11_SNORM_BLOCK = VkFormat.VK_FORMAT_EAC_R11_SNORM_BLOCK,
	VK_FORMAT_EAC_R11G11_UNORM_BLOCK = VkFormat.VK_FORMAT_EAC_R11G11_UNORM_BLOCK,
	VK_FORMAT_EAC_R11G11_SNORM_BLOCK = VkFormat.VK_FORMAT_EAC_R11G11_SNORM_BLOCK,
	VK_FORMAT_ASTC_4x4_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_4x4_UNORM_BLOCK,
	VK_FORMAT_ASTC_4x4_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_4x4_SRGB_BLOCK,
	VK_FORMAT_ASTC_5x4_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_5x4_UNORM_BLOCK,
	VK_FORMAT_ASTC_5x4_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_5x4_SRGB_BLOCK,
	VK_FORMAT_ASTC_5x5_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_5x5_UNORM_BLOCK,
	VK_FORMAT_ASTC_5x5_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_5x5_SRGB_BLOCK,
	VK_FORMAT_ASTC_6x5_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_6x5_UNORM_BLOCK,
	VK_FORMAT_ASTC_6x5_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_6x5_SRGB_BLOCK,
	VK_FORMAT_ASTC_6x6_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_6x6_UNORM_BLOCK,
	VK_FORMAT_ASTC_6x6_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_6x6_SRGB_BLOCK,
	VK_FORMAT_ASTC_8x5_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_8x5_UNORM_BLOCK,
	VK_FORMAT_ASTC_8x5_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_8x5_SRGB_BLOCK,
	VK_FORMAT_ASTC_8x6_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_8x6_UNORM_BLOCK,
	VK_FORMAT_ASTC_8x6_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_8x6_SRGB_BLOCK,
	VK_FORMAT_ASTC_8x8_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_8x8_UNORM_BLOCK,
	VK_FORMAT_ASTC_8x8_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_8x8_SRGB_BLOCK,
	VK_FORMAT_ASTC_10x5_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_10x5_UNORM_BLOCK,
	VK_FORMAT_ASTC_10x5_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_10x5_SRGB_BLOCK,
	VK_FORMAT_ASTC_10x6_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_10x6_UNORM_BLOCK,
	VK_FORMAT_ASTC_10x6_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_10x6_SRGB_BLOCK,
	VK_FORMAT_ASTC_10x8_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_10x8_UNORM_BLOCK,
	VK_FORMAT_ASTC_10x8_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_10x8_SRGB_BLOCK,
	VK_FORMAT_ASTC_10x10_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_10x10_UNORM_BLOCK,
	VK_FORMAT_ASTC_10x10_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_10x10_SRGB_BLOCK,
	VK_FORMAT_ASTC_12x10_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_12x10_UNORM_BLOCK,
	VK_FORMAT_ASTC_12x10_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_12x10_SRGB_BLOCK,
	VK_FORMAT_ASTC_12x12_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_12x12_UNORM_BLOCK,
	VK_FORMAT_ASTC_12x12_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_12x12_SRGB_BLOCK,
	VK_FORMAT_G8B8G8R8_422_UNORM = VkFormat.VK_FORMAT_G8B8G8R8_422_UNORM,
	VK_FORMAT_B8G8R8G8_422_UNORM = VkFormat.VK_FORMAT_B8G8R8G8_422_UNORM,
	VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM,
	VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = VkFormat.VK_FORMAT_G8_B8R8_2PLANE_420_UNORM,
	VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM,
	VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = VkFormat.VK_FORMAT_G8_B8R8_2PLANE_422_UNORM,
	VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM,
	VK_FORMAT_R10X6_UNORM_PACK16 = VkFormat.VK_FORMAT_R10X6_UNORM_PACK16,
	VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = VkFormat.VK_FORMAT_R10X6G10X6_UNORM_2PACK16,
	VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = VkFormat.VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16,
	VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = VkFormat.VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16,
	VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = VkFormat.VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16,
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16,
	VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = VkFormat.VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16,
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16,
	VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = VkFormat.VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16,
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16,
	VK_FORMAT_R12X4_UNORM_PACK16 = VkFormat.VK_FORMAT_R12X4_UNORM_PACK16,
	VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = VkFormat.VK_FORMAT_R12X4G12X4_UNORM_2PACK16,
	VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = VkFormat.VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16,
	VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = VkFormat.VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16,
	VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = VkFormat.VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16,
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16,
	VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = VkFormat.VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16,
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16,
	VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = VkFormat.VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16,
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16,
	VK_FORMAT_G16B16G16R16_422_UNORM = VkFormat.VK_FORMAT_G16B16G16R16_422_UNORM,
	VK_FORMAT_B16G16R16G16_422_UNORM = VkFormat.VK_FORMAT_B16G16R16G16_422_UNORM,
	VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM,
	VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = VkFormat.VK_FORMAT_G16_B16R16_2PLANE_420_UNORM,
	VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM,
	VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = VkFormat.VK_FORMAT_G16_B16R16_2PLANE_422_UNORM,
	VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM,
	VK_FORMAT_G8_B8R8_2PLANE_444_UNORM = VkFormat.VK_FORMAT_G8_B8R8_2PLANE_444_UNORM,
	VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 = VkFormat.VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16,
	VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 = VkFormat.VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16,
	VK_FORMAT_G16_B16R16_2PLANE_444_UNORM = VkFormat.VK_FORMAT_G16_B16R16_2PLANE_444_UNORM,
	VK_FORMAT_A4R4G4B4_UNORM_PACK16 = VkFormat.VK_FORMAT_A4R4G4B4_UNORM_PACK16,
	VK_FORMAT_A4B4G4R4_UNORM_PACK16 = VkFormat.VK_FORMAT_A4B4G4R4_UNORM_PACK16,
	VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK,
	VK_FORMAT_A1B5G5R5_UNORM_PACK16 = VkFormat.VK_FORMAT_A1B5G5R5_UNORM_PACK16,
	VK_FORMAT_A8_UNORM = VkFormat.VK_FORMAT_A8_UNORM,
	VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = VkFormat.VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG,
	VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = VkFormat.VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG,
	VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = VkFormat.VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG,
	VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = VkFormat.VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG,
	VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = VkFormat.VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG,
	VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = VkFormat.VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG,
	VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = VkFormat.VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG,
	VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = VkFormat.VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG,
	VK_FORMAT_R16G16_SFIXED5_NV = VkFormat.VK_FORMAT_R16G16_SFIXED5_NV,
	VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT,
	VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT,
	VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT,
	VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT,
	VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT,
	VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT,
	VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT,
	VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT,
	VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT,
	VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT,
	VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT,
	VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT,
	VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT,
	VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT,
	VK_FORMAT_G8B8G8R8_422_UNORM_KHR = VkFormat.VK_FORMAT_G8B8G8R8_422_UNORM_KHR,
	VK_FORMAT_B8G8R8G8_422_UNORM_KHR = VkFormat.VK_FORMAT_B8G8R8G8_422_UNORM_KHR,
	VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR,
	VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = VkFormat.VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR,
	VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR,
	VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = VkFormat.VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR,
	VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR,
	VK_FORMAT_R10X6_UNORM_PACK16_KHR = VkFormat.VK_FORMAT_R10X6_UNORM_PACK16_KHR,
	VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = VkFormat.VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR,
	VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = VkFormat.VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR,
	VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = VkFormat.VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR,
	VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = VkFormat.VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR,
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR,
	VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = VkFormat.VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR,
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR,
	VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = VkFormat.VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR,
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR,
	VK_FORMAT_R12X4_UNORM_PACK16_KHR = VkFormat.VK_FORMAT_R12X4_UNORM_PACK16_KHR,
	VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = VkFormat.VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR,
	VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = VkFormat.VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR,
	VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = VkFormat.VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR,
	VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = VkFormat.VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR,
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR,
	VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = VkFormat.VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR,
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR,
	VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = VkFormat.VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR,
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR,
	VK_FORMAT_G16B16G16R16_422_UNORM_KHR = VkFormat.VK_FORMAT_G16B16G16R16_422_UNORM_KHR,
	VK_FORMAT_B16G16R16G16_422_UNORM_KHR = VkFormat.VK_FORMAT_B16G16R16G16_422_UNORM_KHR,
	VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR,
	VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = VkFormat.VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR,
	VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR,
	VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = VkFormat.VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR,
	VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR,
	VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT = VkFormat.VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT,
	VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT = VkFormat.VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT,
	VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT = VkFormat.VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT,
	VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT = VkFormat.VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT,
	VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT = VkFormat.VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT,
	VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT = VkFormat.VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT,
	VK_FORMAT_R16G16_S10_5_NV = VkFormat.VK_FORMAT_R16G16_S10_5_NV,
	VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR = VkFormat.VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR,
	VK_FORMAT_A8_UNORM_KHR = VkFormat.VK_FORMAT_A8_UNORM_KHR,
	VK_FORMAT_MAX_ENUM = VkFormat.VK_FORMAT_MAX_ENUM,
}
enum VkFormatFeatureFlagBits {
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 0x00000001,
	VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 0x00000002,
	VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 0x00000004,
	VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000008,
	VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 0x00000010,
	VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 0x00000020,
	VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 0x00000040,
	VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 0x00000080,
	VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 0x00000100,
	VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000200,
	VK_FORMAT_FEATURE_BLIT_SRC_BIT = 0x00000400,
	VK_FORMAT_FEATURE_BLIT_DST_BIT = 0x00000800,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 0x00001000,
	VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 0x00004000,
	VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 0x00008000,
	VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 0x00020000,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 0x00040000,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 0x00080000,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 0x00100000,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 0x00200000,
	VK_FORMAT_FEATURE_DISJOINT_BIT = 0x00400000,
	VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 0x00800000,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 0x00010000,
	VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR = 0x02000000,
	VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR = 0x04000000,
	VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 0x20000000,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = 0x00002000,
	VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 0x01000000,
	VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0x40000000,
	VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR = 0x08000000,
	VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR = 0x10000000,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT,
	VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = VK_FORMAT_FEATURE_TRANSFER_SRC_BIT,
	VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT,
	VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT,
	VK_FORMAT_FEATURE_DISJOINT_BIT_KHR = VK_FORMAT_FEATURE_DISJOINT_BIT,
	VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT,
	VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkFormatFeatureFlagBits {
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT,
	VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT,
	VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT,
	VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT,
	VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT,
	VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT,
	VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT,
	VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT,
	VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT,
	VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT,
	VK_FORMAT_FEATURE_BLIT_SRC_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_BLIT_SRC_BIT,
	VK_FORMAT_FEATURE_BLIT_DST_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_BLIT_DST_BIT,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT,
	VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_TRANSFER_SRC_BIT,
	VK_FORMAT_FEATURE_TRANSFER_DST_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
	VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT,
	VK_FORMAT_FEATURE_DISJOINT_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_DISJOINT_BIT,
	VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT,
	VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR,
	VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR,
	VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT,
	VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT,
	VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,
	VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR,
	VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG,
	VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR,
	VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT,
	VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR,
	VK_FORMAT_FEATURE_DISJOINT_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_DISJOINT_BIT_KHR,
	VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR,
	VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM,
}
enum VkFormatFeatureFlagBits2 {
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT = 0x00000001UL,
	VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT = 0x00000002UL,
	VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT = 0x00000004UL,
	VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT = 0x00000008UL,
	VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT = 0x00000010UL,
	VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 0x00000020UL,
	VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT = 0x00000040UL,
	VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT = 0x00000080UL,
	VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT = 0x00000100UL,
	VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000200UL,
	VK_FORMAT_FEATURE_2_BLIT_SRC_BIT = 0x00000400UL,
	VK_FORMAT_FEATURE_2_BLIT_DST_BIT = 0x00000800UL,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 0x00001000UL,
	VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT = 0x00004000UL,
	VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT = 0x00008000UL,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 0x00010000UL,
	VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT = 0x00020000UL,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 0x00040000UL,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 0x00080000UL,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 0x00100000UL,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 0x00200000UL,
	VK_FORMAT_FEATURE_2_DISJOINT_BIT = 0x00400000UL,
	VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT = 0x00800000UL,
	VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT = 0x80000000UL,
	VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT = 0x100000000UL,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT = 0x200000000UL,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT = 0x00002000UL,
	VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT = 0x400000000000UL,
	VK_FORMAT_FEATURE_2_VIDEO_DECODE_OUTPUT_BIT_KHR = 0x02000000UL,
	VK_FORMAT_FEATURE_2_VIDEO_DECODE_DPB_BIT_KHR = 0x04000000UL,
	VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 0x20000000UL,
	VK_FORMAT_FEATURE_2_FRAGMENT_DENSITY_MAP_BIT_EXT = 0x01000000UL,
	VK_FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0x40000000UL,
	VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT_EXT = 0x400000000000UL,
	VK_FORMAT_FEATURE_2_VIDEO_ENCODE_INPUT_BIT_KHR = 0x08000000UL,
	VK_FORMAT_FEATURE_2_VIDEO_ENCODE_DPB_BIT_KHR = 0x10000000UL,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR = 0x00000001UL,
	VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR = 0x00000002UL,
	VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR = 0x00000004UL,
	VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR = 0x00000008UL,
	VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR = 0x00000010UL,
	VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR = 0x00000020UL,
	VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR = 0x00000040UL,
	VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR = 0x00000080UL,
	VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR = 0x00000100UL,
	VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR = 0x00000200UL,
	VK_FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR = 0x00000400UL,
	VK_FORMAT_FEATURE_2_BLIT_DST_BIT_KHR = 0x00000800UL,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR = 0x00001000UL,
	VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR = 0x00004000UL,
	VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR = 0x00008000UL,
	VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = 0x00020000UL,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = 0x00040000UL,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = 0x00080000UL,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = 0x00100000UL,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = 0x00200000UL,
	VK_FORMAT_FEATURE_2_DISJOINT_BIT_KHR = 0x00400000UL,
	VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR = 0x00800000UL,
	VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR = 0x80000000UL,
	VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR = 0x100000000UL,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR = 0x200000000UL,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR = 0x00010000UL,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = 0x00002000UL,
	VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_RADIUS_BUFFER_BIT_NV = 0x8000000000000UL,
	VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV = 0x4000000000UL,
	VK_FORMAT_FEATURE_2_WEIGHT_IMAGE_BIT_QCOM = 0x400000000UL,
	VK_FORMAT_FEATURE_2_WEIGHT_SAMPLED_IMAGE_BIT_QCOM = 0x800000000UL,
	VK_FORMAT_FEATURE_2_BLOCK_MATCHING_BIT_QCOM = 0x1000000000UL,
	VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM = 0x2000000000UL,
	VK_FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV = 0x10000000000UL,
	VK_FORMAT_FEATURE_2_OPTICAL_FLOW_VECTOR_BIT_NV = 0x20000000000UL,
	VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV = 0x40000000000UL,
	VK_FORMAT_FEATURE_2_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR = 0x2000000000000UL,
	VK_FORMAT_FEATURE_2_VIDEO_ENCODE_EMPHASIS_MAP_BIT_KHR = 0x4000000000000UL,
}
enum : VkFormatFeatureFlagBits2 {
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT,
	VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT,
	VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT,
	VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT,
	VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT,
	VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT,
	VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT,
	VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT,
	VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT,
	VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT,
	VK_FORMAT_FEATURE_2_BLIT_SRC_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_BLIT_SRC_BIT,
	VK_FORMAT_FEATURE_2_BLIT_DST_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_BLIT_DST_BIT,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT,
	VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT,
	VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT,
	VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT,
	VK_FORMAT_FEATURE_2_DISJOINT_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_DISJOINT_BIT,
	VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT,
	VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT,
	VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT,
	VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT,
	VK_FORMAT_FEATURE_2_VIDEO_DECODE_OUTPUT_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_VIDEO_DECODE_OUTPUT_BIT_KHR,
	VK_FORMAT_FEATURE_2_VIDEO_DECODE_DPB_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_VIDEO_DECODE_DPB_BIT_KHR,
	VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR,
	VK_FORMAT_FEATURE_2_FRAGMENT_DENSITY_MAP_BIT_EXT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_FRAGMENT_DENSITY_MAP_BIT_EXT,
	VK_FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,
	VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT_EXT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT_EXT,
	VK_FORMAT_FEATURE_2_VIDEO_ENCODE_INPUT_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_VIDEO_ENCODE_INPUT_BIT_KHR,
	VK_FORMAT_FEATURE_2_VIDEO_ENCODE_DPB_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_VIDEO_ENCODE_DPB_BIT_KHR,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR,
	VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR,
	VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR,
	VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR,
	VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR,
	VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR,
	VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR,
	VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR,
	VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR,
	VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR,
	VK_FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR,
	VK_FORMAT_FEATURE_2_BLIT_DST_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_BLIT_DST_BIT_KHR,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR,
	VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR,
	VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR,
	VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR,
	VK_FORMAT_FEATURE_2_DISJOINT_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_DISJOINT_BIT_KHR,
	VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR,
	VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR,
	VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR,
	VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT,
	VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_RADIUS_BUFFER_BIT_NV = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_RADIUS_BUFFER_BIT_NV,
	VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV,
	VK_FORMAT_FEATURE_2_WEIGHT_IMAGE_BIT_QCOM = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_WEIGHT_IMAGE_BIT_QCOM,
	VK_FORMAT_FEATURE_2_WEIGHT_SAMPLED_IMAGE_BIT_QCOM = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_WEIGHT_SAMPLED_IMAGE_BIT_QCOM,
	VK_FORMAT_FEATURE_2_BLOCK_MATCHING_BIT_QCOM = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_BLOCK_MATCHING_BIT_QCOM,
	VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM,
	VK_FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV,
	VK_FORMAT_FEATURE_2_OPTICAL_FLOW_VECTOR_BIT_NV = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_OPTICAL_FLOW_VECTOR_BIT_NV,
	VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV,
	VK_FORMAT_FEATURE_2_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR,
	VK_FORMAT_FEATURE_2_VIDEO_ENCODE_EMPHASIS_MAP_BIT_KHR = VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_VIDEO_ENCODE_EMPHASIS_MAP_BIT_KHR,
}
enum VkFragmentShadingRateCombinerOpKHR {
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = 0,
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = 1,
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = 2,
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = 3,
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = 4,
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkFragmentShadingRateCombinerOpKHR {
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR,
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR,
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR,
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR,
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR,
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR = VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR,
}
enum VkFragmentShadingRateNV {
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 1,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 4,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 5,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 6,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 10,
	VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 11,
	VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 12,
	VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 13,
	VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 14,
	VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = 15,
	VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkFragmentShadingRateNV {
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV,
	VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV,
	VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV,
	VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV,
	VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV,
	VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV,
	VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV = VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV,
}
enum VkFragmentShadingRateTypeNV {
	VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = 0,
	VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = 1,
	VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkFragmentShadingRateTypeNV {
	VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = VkFragmentShadingRateTypeNV.VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV,
	VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = VkFragmentShadingRateTypeNV.VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV,
	VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV = VkFragmentShadingRateTypeNV.VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV,
}
enum VkFrameBoundaryFlagBitsEXT {
	VK_FRAME_BOUNDARY_FRAME_END_BIT_EXT = 0x00000001,
	VK_FRAME_BOUNDARY_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkFrameBoundaryFlagBitsEXT {
	VK_FRAME_BOUNDARY_FRAME_END_BIT_EXT = VkFrameBoundaryFlagBitsEXT.VK_FRAME_BOUNDARY_FRAME_END_BIT_EXT,
	VK_FRAME_BOUNDARY_FLAG_BITS_MAX_ENUM_EXT = VkFrameBoundaryFlagBitsEXT.VK_FRAME_BOUNDARY_FLAG_BITS_MAX_ENUM_EXT,
}
enum VkFramebufferCreateFlagBits {
	VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT = 0x00000001,
	VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT,
	VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkFramebufferCreateFlagBits {
	VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT = VkFramebufferCreateFlagBits.VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT,
	VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = VkFramebufferCreateFlagBits.VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR,
	VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = VkFramebufferCreateFlagBits.VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM,
}
enum VkFrontFace {
	VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,
	VK_FRONT_FACE_CLOCKWISE = 1,
	VK_FRONT_FACE_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkFrontFace {
	VK_FRONT_FACE_COUNTER_CLOCKWISE = VkFrontFace.VK_FRONT_FACE_COUNTER_CLOCKWISE,
	VK_FRONT_FACE_CLOCKWISE = VkFrontFace.VK_FRONT_FACE_CLOCKWISE,
	VK_FRONT_FACE_MAX_ENUM = VkFrontFace.VK_FRONT_FACE_MAX_ENUM,
}
enum VkFullScreenExclusiveEXT {
	VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT = 0,
	VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT = 1,
	VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT = 2,
	VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT = 3,
	VK_FULL_SCREEN_EXCLUSIVE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkFullScreenExclusiveEXT {
	VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT = VkFullScreenExclusiveEXT.VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT,
	VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT = VkFullScreenExclusiveEXT.VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT,
	VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT = VkFullScreenExclusiveEXT.VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT,
	VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT = VkFullScreenExclusiveEXT.VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT,
	VK_FULL_SCREEN_EXCLUSIVE_MAX_ENUM_EXT = VkFullScreenExclusiveEXT.VK_FULL_SCREEN_EXCLUSIVE_MAX_ENUM_EXT,
}
enum VkGeometryFlagBitsKHR {
	VK_GEOMETRY_OPAQUE_BIT_KHR = 0x00000001,
	VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 0x00000002,
	VK_GEOMETRY_OPAQUE_BIT_NV = VK_GEOMETRY_OPAQUE_BIT_KHR,
	VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR,
	VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkGeometryFlagBitsKHR {
	VK_GEOMETRY_OPAQUE_BIT_KHR = VkGeometryFlagBitsKHR.VK_GEOMETRY_OPAQUE_BIT_KHR,
	VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = VkGeometryFlagBitsKHR.VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR,
	VK_GEOMETRY_OPAQUE_BIT_NV = VkGeometryFlagBitsKHR.VK_GEOMETRY_OPAQUE_BIT_NV,
	VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = VkGeometryFlagBitsKHR.VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV,
	VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR = VkGeometryFlagBitsKHR.VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkGeometryInstanceFlagBitsKHR {
	VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 0x00000001,
	VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR = 0x00000002,
	VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 0x00000004,
	VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 0x00000008,
	VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT = 0x00000010,
	VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT = 0x00000020,
	VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR,
	VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR,
	VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR,
	VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR,
	VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR,
	VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkGeometryInstanceFlagBitsKHR {
	VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR,
	VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR = VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR,
	VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR,
	VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR,
	VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT = VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT,
	VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT = VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT,
	VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR,
	VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV,
	VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV,
	VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV,
	VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV,
	VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR = VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkGeometryTypeKHR {
	VK_GEOMETRY_TYPE_TRIANGLES_KHR = 0,
	VK_GEOMETRY_TYPE_AABBS_KHR = 1,
	VK_GEOMETRY_TYPE_INSTANCES_KHR = 2,
	VK_GEOMETRY_TYPE_SPHERES_NV = 1000429004,
	VK_GEOMETRY_TYPE_LINEAR_SWEPT_SPHERES_NV = 1000429005,
	VK_GEOMETRY_TYPE_TRIANGLES_NV = VK_GEOMETRY_TYPE_TRIANGLES_KHR,
	VK_GEOMETRY_TYPE_AABBS_NV = VK_GEOMETRY_TYPE_AABBS_KHR,
	VK_GEOMETRY_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkGeometryTypeKHR {
	VK_GEOMETRY_TYPE_TRIANGLES_KHR = VkGeometryTypeKHR.VK_GEOMETRY_TYPE_TRIANGLES_KHR,
	VK_GEOMETRY_TYPE_AABBS_KHR = VkGeometryTypeKHR.VK_GEOMETRY_TYPE_AABBS_KHR,
	VK_GEOMETRY_TYPE_INSTANCES_KHR = VkGeometryTypeKHR.VK_GEOMETRY_TYPE_INSTANCES_KHR,
	VK_GEOMETRY_TYPE_SPHERES_NV = VkGeometryTypeKHR.VK_GEOMETRY_TYPE_SPHERES_NV,
	VK_GEOMETRY_TYPE_LINEAR_SWEPT_SPHERES_NV = VkGeometryTypeKHR.VK_GEOMETRY_TYPE_LINEAR_SWEPT_SPHERES_NV,
	VK_GEOMETRY_TYPE_TRIANGLES_NV = VkGeometryTypeKHR.VK_GEOMETRY_TYPE_TRIANGLES_NV,
	VK_GEOMETRY_TYPE_AABBS_NV = VkGeometryTypeKHR.VK_GEOMETRY_TYPE_AABBS_NV,
	VK_GEOMETRY_TYPE_MAX_ENUM_KHR = VkGeometryTypeKHR.VK_GEOMETRY_TYPE_MAX_ENUM_KHR,
}
enum VkGraphicsPipelineLibraryFlagBitsEXT {
	VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT = 0x00000001,
	VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT = 0x00000002,
	VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT = 0x00000004,
	VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT = 0x00000008,
	VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkGraphicsPipelineLibraryFlagBitsEXT {
	VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT = VkGraphicsPipelineLibraryFlagBitsEXT.VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT,
	VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT = VkGraphicsPipelineLibraryFlagBitsEXT.VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT,
	VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT = VkGraphicsPipelineLibraryFlagBitsEXT.VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT,
	VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT = VkGraphicsPipelineLibraryFlagBitsEXT.VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT,
	VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT = VkGraphicsPipelineLibraryFlagBitsEXT.VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT,
}
enum VkHostImageCopyFlagBits {
	VK_HOST_IMAGE_COPY_MEMCPY = 0x00000001,
	VK_HOST_IMAGE_COPY_MEMCPY_EXT = VK_HOST_IMAGE_COPY_MEMCPY,
	VK_HOST_IMAGE_COPY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkHostImageCopyFlagBits {
	VK_HOST_IMAGE_COPY_MEMCPY = VkHostImageCopyFlagBits.VK_HOST_IMAGE_COPY_MEMCPY,
	VK_HOST_IMAGE_COPY_MEMCPY_EXT = VkHostImageCopyFlagBits.VK_HOST_IMAGE_COPY_MEMCPY_EXT,
	VK_HOST_IMAGE_COPY_FLAG_BITS_MAX_ENUM = VkHostImageCopyFlagBits.VK_HOST_IMAGE_COPY_FLAG_BITS_MAX_ENUM,
}
enum VkImageAspectFlagBits {
	VK_IMAGE_ASPECT_COLOR_BIT = 0x00000001,
	VK_IMAGE_ASPECT_DEPTH_BIT = 0x00000002,
	VK_IMAGE_ASPECT_STENCIL_BIT = 0x00000004,
	VK_IMAGE_ASPECT_METADATA_BIT = 0x00000008,
	VK_IMAGE_ASPECT_PLANE_0_BIT = 0x00000010,
	VK_IMAGE_ASPECT_PLANE_1_BIT = 0x00000020,
	VK_IMAGE_ASPECT_PLANE_2_BIT = 0x00000040,
	VK_IMAGE_ASPECT_NONE = 0,
	VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 0x00000080,
	VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 0x00000100,
	VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 0x00000200,
	VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 0x00000400,
	VK_IMAGE_ASPECT_PLANE_0_BIT_KHR = VK_IMAGE_ASPECT_PLANE_0_BIT,
	VK_IMAGE_ASPECT_PLANE_1_BIT_KHR = VK_IMAGE_ASPECT_PLANE_1_BIT,
	VK_IMAGE_ASPECT_PLANE_2_BIT_KHR = VK_IMAGE_ASPECT_PLANE_2_BIT,
	VK_IMAGE_ASPECT_NONE_KHR = VK_IMAGE_ASPECT_NONE,
	VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkImageAspectFlagBits {
	VK_IMAGE_ASPECT_COLOR_BIT = VkImageAspectFlagBits.VK_IMAGE_ASPECT_COLOR_BIT,
	VK_IMAGE_ASPECT_DEPTH_BIT = VkImageAspectFlagBits.VK_IMAGE_ASPECT_DEPTH_BIT,
	VK_IMAGE_ASPECT_STENCIL_BIT = VkImageAspectFlagBits.VK_IMAGE_ASPECT_STENCIL_BIT,
	VK_IMAGE_ASPECT_METADATA_BIT = VkImageAspectFlagBits.VK_IMAGE_ASPECT_METADATA_BIT,
	VK_IMAGE_ASPECT_PLANE_0_BIT = VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_0_BIT,
	VK_IMAGE_ASPECT_PLANE_1_BIT = VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_1_BIT,
	VK_IMAGE_ASPECT_PLANE_2_BIT = VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_2_BIT,
	VK_IMAGE_ASPECT_NONE = VkImageAspectFlagBits.VK_IMAGE_ASPECT_NONE,
	VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = VkImageAspectFlagBits.VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT,
	VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = VkImageAspectFlagBits.VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT,
	VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = VkImageAspectFlagBits.VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT,
	VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = VkImageAspectFlagBits.VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT,
	VK_IMAGE_ASPECT_PLANE_0_BIT_KHR = VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_0_BIT_KHR,
	VK_IMAGE_ASPECT_PLANE_1_BIT_KHR = VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_1_BIT_KHR,
	VK_IMAGE_ASPECT_PLANE_2_BIT_KHR = VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_2_BIT_KHR,
	VK_IMAGE_ASPECT_NONE_KHR = VkImageAspectFlagBits.VK_IMAGE_ASPECT_NONE_KHR,
	VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = VkImageAspectFlagBits.VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM,
}
enum VkImageCompressionFixedRateFlagBitsEXT {
	VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT = 0,
	VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT = 0x00000001,
	VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT = 0x00000002,
	VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT = 0x00000004,
	VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT = 0x00000008,
	VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT = 0x00000010,
	VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT = 0x00000020,
	VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT = 0x00000040,
	VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT = 0x00000080,
	VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT = 0x00000100,
	VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT = 0x00000200,
	VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT = 0x00000400,
	VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT = 0x00000800,
	VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT = 0x00001000,
	VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT = 0x00002000,
	VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT = 0x00004000,
	VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT = 0x00008000,
	VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT = 0x00010000,
	VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT = 0x00020000,
	VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT = 0x00040000,
	VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT = 0x00080000,
	VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT = 0x00100000,
	VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT = 0x00200000,
	VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT = 0x00400000,
	VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT = 0x00800000,
	VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkImageCompressionFixedRateFlagBitsEXT {
	VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT,
}
enum VkImageCompressionFlagBitsEXT {
	VK_IMAGE_COMPRESSION_DEFAULT_EXT = 0,
	VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT = 0x00000001,
	VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT = 0x00000002,
	VK_IMAGE_COMPRESSION_DISABLED_EXT = 0x00000004,
	VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkImageCompressionFlagBitsEXT {
	VK_IMAGE_COMPRESSION_DEFAULT_EXT = VkImageCompressionFlagBitsEXT.VK_IMAGE_COMPRESSION_DEFAULT_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT = VkImageCompressionFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT,
	VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT = VkImageCompressionFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT,
	VK_IMAGE_COMPRESSION_DISABLED_EXT = VkImageCompressionFlagBitsEXT.VK_IMAGE_COMPRESSION_DISABLED_EXT,
	VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT = VkImageCompressionFlagBitsEXT.VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT,
}
enum VkImageCreateFlagBits {
	VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 0x00000001,
	VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002,
	VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 0x00000004,
	VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 0x00000008,
	VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 0x00000010,
	VK_IMAGE_CREATE_ALIAS_BIT = 0x00000400,
	VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 0x00000040,
	VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 0x00000020,
	VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 0x00000080,
	VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 0x00000100,
	VK_IMAGE_CREATE_PROTECTED_BIT = 0x00000800,
	VK_IMAGE_CREATE_DISJOINT_BIT = 0x00000200,
	VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 0x00002000,
	VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 0x00001000,
	VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 0x00004000,
	VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 0x00010000,
	VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT = 0x00040000,
	VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT = 0x00020000,
	VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM = 0x00008000,
	VK_IMAGE_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR = 0x00100000,
	VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT,
	VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT,
	VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT,
	VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = VK_IMAGE_CREATE_EXTENDED_USAGE_BIT,
	VK_IMAGE_CREATE_DISJOINT_BIT_KHR = VK_IMAGE_CREATE_DISJOINT_BIT,
	VK_IMAGE_CREATE_ALIAS_BIT_KHR = VK_IMAGE_CREATE_ALIAS_BIT,
	VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkImageCreateFlagBits {
	VK_IMAGE_CREATE_SPARSE_BINDING_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_SPARSE_BINDING_BIT,
	VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT,
	VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_SPARSE_ALIASED_BIT,
	VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT,
	VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT,
	VK_IMAGE_CREATE_ALIAS_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_ALIAS_BIT,
	VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT,
	VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT,
	VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT,
	VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_EXTENDED_USAGE_BIT,
	VK_IMAGE_CREATE_PROTECTED_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_PROTECTED_BIT,
	VK_IMAGE_CREATE_DISJOINT_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_DISJOINT_BIT,
	VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = VkImageCreateFlagBits.VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV,
	VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = VkImageCreateFlagBits.VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT,
	VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = VkImageCreateFlagBits.VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT,
	VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = VkImageCreateFlagBits.VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT,
	VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT = VkImageCreateFlagBits.VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT,
	VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT = VkImageCreateFlagBits.VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT,
	VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM = VkImageCreateFlagBits.VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM,
	VK_IMAGE_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR = VkImageCreateFlagBits.VK_IMAGE_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR,
	VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = VkImageCreateFlagBits.VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR,
	VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = VkImageCreateFlagBits.VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR,
	VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = VkImageCreateFlagBits.VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR,
	VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = VkImageCreateFlagBits.VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR,
	VK_IMAGE_CREATE_DISJOINT_BIT_KHR = VkImageCreateFlagBits.VK_IMAGE_CREATE_DISJOINT_BIT_KHR,
	VK_IMAGE_CREATE_ALIAS_BIT_KHR = VkImageCreateFlagBits.VK_IMAGE_CREATE_ALIAS_BIT_KHR,
	VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = VkImageCreateFlagBits.VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM,
}
enum VkImageLayout {
	VK_IMAGE_LAYOUT_UNDEFINED = 0,
	VK_IMAGE_LAYOUT_GENERAL = 1,
	VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
	VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
	VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
	VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
	VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
	VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
	VK_IMAGE_LAYOUT_PREINITIALIZED = 8,
	VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
	VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
	VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000,
	VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001,
	VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002,
	VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003,
	VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL = 1000314000,
	VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL = 1000314001,
	VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ = 1000232000,
	VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002,
	VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR = 1000024000,
	VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR = 1000024001,
	VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR = 1000024002,
	VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000,
	VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000,
	VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR = 1000164003,
	VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR = 1000299000,
	VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR = 1000299001,
	VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR = 1000299002,
	VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT = 1000339000,
	VK_IMAGE_LAYOUT_VIDEO_ENCODE_QUANTIZATION_MAP_KHR = 1000553000,
	VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,
	VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,
	VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR,
	VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ_KHR = VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ,
	VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL,
	VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL,
	VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL,
	VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL,
	VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL,
	VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL,
	VK_IMAGE_LAYOUT_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkImageLayout {
	VK_IMAGE_LAYOUT_UNDEFINED = VkImageLayout.VK_IMAGE_LAYOUT_UNDEFINED,
	VK_IMAGE_LAYOUT_GENERAL = VkImageLayout.VK_IMAGE_LAYOUT_GENERAL,
	VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,
	VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL,
	VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL,
	VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
	VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL,
	VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,
	VK_IMAGE_LAYOUT_PREINITIALIZED = VkImageLayout.VK_IMAGE_LAYOUT_PREINITIALIZED,
	VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,
	VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,
	VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL,
	VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL,
	VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL,
	VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL,
	VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL,
	VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL,
	VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ = VkImageLayout.VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ,
	VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = VkImageLayout.VK_IMAGE_LAYOUT_PRESENT_SRC_KHR,
	VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR = VkImageLayout.VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR,
	VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR = VkImageLayout.VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR,
	VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR = VkImageLayout.VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR,
	VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = VkImageLayout.VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR,
	VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = VkImageLayout.VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT,
	VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR = VkImageLayout.VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR,
	VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR = VkImageLayout.VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR,
	VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR = VkImageLayout.VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR,
	VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR = VkImageLayout.VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR,
	VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT = VkImageLayout.VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT,
	VK_IMAGE_LAYOUT_VIDEO_ENCODE_QUANTIZATION_MAP_KHR = VkImageLayout.VK_IMAGE_LAYOUT_VIDEO_ENCODE_QUANTIZATION_MAP_KHR,
	VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR,
	VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR,
	VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = VkImageLayout.VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV,
	VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ_KHR = VkImageLayout.VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ_KHR,
	VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR = VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR,
	VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR = VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR,
	VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR = VkImageLayout.VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR,
	VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR = VkImageLayout.VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR,
	VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR = VkImageLayout.VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR,
	VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR = VkImageLayout.VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR,
	VK_IMAGE_LAYOUT_MAX_ENUM = VkImageLayout.VK_IMAGE_LAYOUT_MAX_ENUM,
}
enum VkImageTiling {
	VK_IMAGE_TILING_OPTIMAL = 0,
	VK_IMAGE_TILING_LINEAR = 1,
	VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000,
	VK_IMAGE_TILING_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkImageTiling {
	VK_IMAGE_TILING_OPTIMAL = VkImageTiling.VK_IMAGE_TILING_OPTIMAL,
	VK_IMAGE_TILING_LINEAR = VkImageTiling.VK_IMAGE_TILING_LINEAR,
	VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = VkImageTiling.VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT,
	VK_IMAGE_TILING_MAX_ENUM = VkImageTiling.VK_IMAGE_TILING_MAX_ENUM,
}
enum VkImageType {
	VK_IMAGE_TYPE_1D = 0,
	VK_IMAGE_TYPE_2D = 1,
	VK_IMAGE_TYPE_3D = 2,
	VK_IMAGE_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkImageType {
	VK_IMAGE_TYPE_1D = VkImageType.VK_IMAGE_TYPE_1D,
	VK_IMAGE_TYPE_2D = VkImageType.VK_IMAGE_TYPE_2D,
	VK_IMAGE_TYPE_3D = VkImageType.VK_IMAGE_TYPE_3D,
	VK_IMAGE_TYPE_MAX_ENUM = VkImageType.VK_IMAGE_TYPE_MAX_ENUM,
}
enum VkImageUsageFlagBits {
	VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 0x00000001,
	VK_IMAGE_USAGE_TRANSFER_DST_BIT = 0x00000002,
	VK_IMAGE_USAGE_SAMPLED_BIT = 0x00000004,
	VK_IMAGE_USAGE_STORAGE_BIT = 0x00000008,
	VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 0x00000010,
	VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000020,
	VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 0x00000040,
	VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 0x00000080,
	VK_IMAGE_USAGE_HOST_TRANSFER_BIT = 0x00400000,
	VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR = 0x00000400,
	VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 0x00000800,
	VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR = 0x00001000,
	VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 0x00000200,
	VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0x00000100,
	VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR = 0x00002000,
	VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = 0x00004000,
	VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR = 0x00008000,
	VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 0x00080000,
	VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI = 0x00040000,
	VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM = 0x00100000,
	VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM = 0x00200000,
	VK_IMAGE_USAGE_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR = 0x02000000,
	VK_IMAGE_USAGE_VIDEO_ENCODE_EMPHASIS_MAP_BIT_KHR = 0x04000000,
	VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,
	VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT = VK_IMAGE_USAGE_HOST_TRANSFER_BIT,
	VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkImageUsageFlagBits {
	VK_IMAGE_USAGE_TRANSFER_SRC_BIT = VkImageUsageFlagBits.VK_IMAGE_USAGE_TRANSFER_SRC_BIT,
	VK_IMAGE_USAGE_TRANSFER_DST_BIT = VkImageUsageFlagBits.VK_IMAGE_USAGE_TRANSFER_DST_BIT,
	VK_IMAGE_USAGE_SAMPLED_BIT = VkImageUsageFlagBits.VK_IMAGE_USAGE_SAMPLED_BIT,
	VK_IMAGE_USAGE_STORAGE_BIT = VkImageUsageFlagBits.VK_IMAGE_USAGE_STORAGE_BIT,
	VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = VkImageUsageFlagBits.VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT,
	VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = VkImageUsageFlagBits.VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT,
	VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = VkImageUsageFlagBits.VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT,
	VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = VkImageUsageFlagBits.VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT,
	VK_IMAGE_USAGE_HOST_TRANSFER_BIT = VkImageUsageFlagBits.VK_IMAGE_USAGE_HOST_TRANSFER_BIT,
	VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR = VkImageUsageFlagBits.VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR,
	VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR = VkImageUsageFlagBits.VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR,
	VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR = VkImageUsageFlagBits.VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR,
	VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = VkImageUsageFlagBits.VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT,
	VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = VkImageUsageFlagBits.VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,
	VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR = VkImageUsageFlagBits.VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR,
	VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = VkImageUsageFlagBits.VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR,
	VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR = VkImageUsageFlagBits.VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR,
	VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = VkImageUsageFlagBits.VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT,
	VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI = VkImageUsageFlagBits.VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI,
	VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM = VkImageUsageFlagBits.VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM,
	VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM = VkImageUsageFlagBits.VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM,
	VK_IMAGE_USAGE_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR = VkImageUsageFlagBits.VK_IMAGE_USAGE_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR,
	VK_IMAGE_USAGE_VIDEO_ENCODE_EMPHASIS_MAP_BIT_KHR = VkImageUsageFlagBits.VK_IMAGE_USAGE_VIDEO_ENCODE_EMPHASIS_MAP_BIT_KHR,
	VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = VkImageUsageFlagBits.VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV,
	VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT = VkImageUsageFlagBits.VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT,
	VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = VkImageUsageFlagBits.VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM,
}
enum VkImageViewCreateFlagBits {
	VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 0x00000001,
	VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 0x00000004,
	VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 0x00000002,
	VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkImageViewCreateFlagBits {
	VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = VkImageViewCreateFlagBits.VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT,
	VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = VkImageViewCreateFlagBits.VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT,
	VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = VkImageViewCreateFlagBits.VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT,
	VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = VkImageViewCreateFlagBits.VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM,
}
enum VkImageViewType {
	VK_IMAGE_VIEW_TYPE_1D = 0,
	VK_IMAGE_VIEW_TYPE_2D = 1,
	VK_IMAGE_VIEW_TYPE_3D = 2,
	VK_IMAGE_VIEW_TYPE_CUBE = 3,
	VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4,
	VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5,
	VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
	VK_IMAGE_VIEW_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkImageViewType {
	VK_IMAGE_VIEW_TYPE_1D = VkImageViewType.VK_IMAGE_VIEW_TYPE_1D,
	VK_IMAGE_VIEW_TYPE_2D = VkImageViewType.VK_IMAGE_VIEW_TYPE_2D,
	VK_IMAGE_VIEW_TYPE_3D = VkImageViewType.VK_IMAGE_VIEW_TYPE_3D,
	VK_IMAGE_VIEW_TYPE_CUBE = VkImageViewType.VK_IMAGE_VIEW_TYPE_CUBE,
	VK_IMAGE_VIEW_TYPE_1D_ARRAY = VkImageViewType.VK_IMAGE_VIEW_TYPE_1D_ARRAY,
	VK_IMAGE_VIEW_TYPE_2D_ARRAY = VkImageViewType.VK_IMAGE_VIEW_TYPE_2D_ARRAY,
	VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = VkImageViewType.VK_IMAGE_VIEW_TYPE_CUBE_ARRAY,
	VK_IMAGE_VIEW_TYPE_MAX_ENUM = VkImageViewType.VK_IMAGE_VIEW_TYPE_MAX_ENUM,
}
enum VkIndexType {
	VK_INDEX_TYPE_UINT16 = 0,
	VK_INDEX_TYPE_UINT32 = 1,
	VK_INDEX_TYPE_UINT8 = 1000265000,
	VK_INDEX_TYPE_NONE_KHR = 1000165000,
	VK_INDEX_TYPE_NONE_NV = VK_INDEX_TYPE_NONE_KHR,
	VK_INDEX_TYPE_UINT8_EXT = VK_INDEX_TYPE_UINT8,
	VK_INDEX_TYPE_UINT8_KHR = VK_INDEX_TYPE_UINT8,
	VK_INDEX_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkIndexType {
	VK_INDEX_TYPE_UINT16 = VkIndexType.VK_INDEX_TYPE_UINT16,
	VK_INDEX_TYPE_UINT32 = VkIndexType.VK_INDEX_TYPE_UINT32,
	VK_INDEX_TYPE_UINT8 = VkIndexType.VK_INDEX_TYPE_UINT8,
	VK_INDEX_TYPE_NONE_KHR = VkIndexType.VK_INDEX_TYPE_NONE_KHR,
	VK_INDEX_TYPE_NONE_NV = VkIndexType.VK_INDEX_TYPE_NONE_NV,
	VK_INDEX_TYPE_UINT8_EXT = VkIndexType.VK_INDEX_TYPE_UINT8_EXT,
	VK_INDEX_TYPE_UINT8_KHR = VkIndexType.VK_INDEX_TYPE_UINT8_KHR,
	VK_INDEX_TYPE_MAX_ENUM = VkIndexType.VK_INDEX_TYPE_MAX_ENUM,
}
enum VkIndirectCommandsInputModeFlagBitsEXT {
	VK_INDIRECT_COMMANDS_INPUT_MODE_VULKAN_INDEX_BUFFER_EXT = 0x00000001,
	VK_INDIRECT_COMMANDS_INPUT_MODE_DXGI_INDEX_BUFFER_EXT = 0x00000002,
	VK_INDIRECT_COMMANDS_INPUT_MODE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkIndirectCommandsInputModeFlagBitsEXT {
	VK_INDIRECT_COMMANDS_INPUT_MODE_VULKAN_INDEX_BUFFER_EXT = VkIndirectCommandsInputModeFlagBitsEXT.VK_INDIRECT_COMMANDS_INPUT_MODE_VULKAN_INDEX_BUFFER_EXT,
	VK_INDIRECT_COMMANDS_INPUT_MODE_DXGI_INDEX_BUFFER_EXT = VkIndirectCommandsInputModeFlagBitsEXT.VK_INDIRECT_COMMANDS_INPUT_MODE_DXGI_INDEX_BUFFER_EXT,
	VK_INDIRECT_COMMANDS_INPUT_MODE_FLAG_BITS_MAX_ENUM_EXT = VkIndirectCommandsInputModeFlagBitsEXT.VK_INDIRECT_COMMANDS_INPUT_MODE_FLAG_BITS_MAX_ENUM_EXT,
}
enum VkIndirectCommandsLayoutUsageFlagBitsEXT {
	VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_EXT = 0x00000001,
	VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_EXT = 0x00000002,
	VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkIndirectCommandsLayoutUsageFlagBitsEXT {
	VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_EXT = VkIndirectCommandsLayoutUsageFlagBitsEXT.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_EXT,
	VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_EXT = VkIndirectCommandsLayoutUsageFlagBitsEXT.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_EXT,
	VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_EXT = VkIndirectCommandsLayoutUsageFlagBitsEXT.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_EXT,
}
enum VkIndirectCommandsLayoutUsageFlagBitsNV {
	VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 0x00000001,
	VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 0x00000002,
	VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 0x00000004,
	VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkIndirectCommandsLayoutUsageFlagBitsNV {
	VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = VkIndirectCommandsLayoutUsageFlagBitsNV.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV,
	VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = VkIndirectCommandsLayoutUsageFlagBitsNV.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV,
	VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = VkIndirectCommandsLayoutUsageFlagBitsNV.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV,
	VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV = VkIndirectCommandsLayoutUsageFlagBitsNV.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV,
}
enum VkIndirectCommandsTokenTypeEXT {
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_EXECUTION_SET_EXT = 0,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_EXT = 1,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_SEQUENCE_INDEX_EXT = 2,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_EXT = 3,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_EXT = 4,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_EXT = 5,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_EXT = 6,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_COUNT_EXT = 7,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_COUNT_EXT = 8,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_EXT = 9,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV_EXT = 1000202002,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_COUNT_NV_EXT = 1000202003,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_EXT = 1000328000,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_COUNT_EXT = 1000328001,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_TRACE_RAYS2_EXT = 1000386004,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkIndirectCommandsTokenTypeEXT {
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_EXECUTION_SET_EXT = VkIndirectCommandsTokenTypeEXT.VK_INDIRECT_COMMANDS_TOKEN_TYPE_EXECUTION_SET_EXT,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_EXT = VkIndirectCommandsTokenTypeEXT.VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_EXT,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_SEQUENCE_INDEX_EXT = VkIndirectCommandsTokenTypeEXT.VK_INDIRECT_COMMANDS_TOKEN_TYPE_SEQUENCE_INDEX_EXT,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_EXT = VkIndirectCommandsTokenTypeEXT.VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_EXT,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_EXT = VkIndirectCommandsTokenTypeEXT.VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_EXT,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_EXT = VkIndirectCommandsTokenTypeEXT.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_EXT,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_EXT = VkIndirectCommandsTokenTypeEXT.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_EXT,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_COUNT_EXT = VkIndirectCommandsTokenTypeEXT.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_COUNT_EXT,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_COUNT_EXT = VkIndirectCommandsTokenTypeEXT.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_COUNT_EXT,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_EXT = VkIndirectCommandsTokenTypeEXT.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_EXT,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV_EXT = VkIndirectCommandsTokenTypeEXT.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV_EXT,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_COUNT_NV_EXT = VkIndirectCommandsTokenTypeEXT.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_COUNT_NV_EXT,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_EXT = VkIndirectCommandsTokenTypeEXT.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_EXT,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_COUNT_EXT = VkIndirectCommandsTokenTypeEXT.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_COUNT_EXT,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_TRACE_RAYS2_EXT = VkIndirectCommandsTokenTypeEXT.VK_INDIRECT_COMMANDS_TOKEN_TYPE_TRACE_RAYS2_EXT,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_EXT = VkIndirectCommandsTokenTypeEXT.VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_EXT,
}
enum VkIndirectCommandsTokenTypeNV {
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV = 1000328000,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV = 1000428003,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV = 1000428004,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkIndirectCommandsTokenTypeNV {
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV = VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV = VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV = VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV = VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV,
}
enum VkIndirectExecutionSetInfoTypeEXT {
	VK_INDIRECT_EXECUTION_SET_INFO_TYPE_PIPELINES_EXT = 0,
	VK_INDIRECT_EXECUTION_SET_INFO_TYPE_SHADER_OBJECTS_EXT = 1,
	VK_INDIRECT_EXECUTION_SET_INFO_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkIndirectExecutionSetInfoTypeEXT {
	VK_INDIRECT_EXECUTION_SET_INFO_TYPE_PIPELINES_EXT = VkIndirectExecutionSetInfoTypeEXT.VK_INDIRECT_EXECUTION_SET_INFO_TYPE_PIPELINES_EXT,
	VK_INDIRECT_EXECUTION_SET_INFO_TYPE_SHADER_OBJECTS_EXT = VkIndirectExecutionSetInfoTypeEXT.VK_INDIRECT_EXECUTION_SET_INFO_TYPE_SHADER_OBJECTS_EXT,
	VK_INDIRECT_EXECUTION_SET_INFO_TYPE_MAX_ENUM_EXT = VkIndirectExecutionSetInfoTypeEXT.VK_INDIRECT_EXECUTION_SET_INFO_TYPE_MAX_ENUM_EXT,
}
enum VkIndirectStateFlagBitsNV {
	VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 0x00000001,
	VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkIndirectStateFlagBitsNV {
	VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = VkIndirectStateFlagBitsNV.VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV,
	VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV = VkIndirectStateFlagBitsNV.VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV,
}
enum VkInstanceCreateFlagBits {
	VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR = 0x00000001,
	VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkInstanceCreateFlagBits {
	VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR = VkInstanceCreateFlagBits.VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR,
	VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM = VkInstanceCreateFlagBits.VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM,
}
enum VkInternalAllocationType {
	VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,
	VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkInternalAllocationType {
	VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = VkInternalAllocationType.VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE,
	VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = VkInternalAllocationType.VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM,
}
enum VkLatencyMarkerNV {
	VK_LATENCY_MARKER_SIMULATION_START_NV = 0,
	VK_LATENCY_MARKER_SIMULATION_END_NV = 1,
	VK_LATENCY_MARKER_RENDERSUBMIT_START_NV = 2,
	VK_LATENCY_MARKER_RENDERSUBMIT_END_NV = 3,
	VK_LATENCY_MARKER_PRESENT_START_NV = 4,
	VK_LATENCY_MARKER_PRESENT_END_NV = 5,
	VK_LATENCY_MARKER_INPUT_SAMPLE_NV = 6,
	VK_LATENCY_MARKER_TRIGGER_FLASH_NV = 7,
	VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_START_NV = 8,
	VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_END_NV = 9,
	VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_START_NV = 10,
	VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_END_NV = 11,
	VK_LATENCY_MARKER_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkLatencyMarkerNV {
	VK_LATENCY_MARKER_SIMULATION_START_NV = VkLatencyMarkerNV.VK_LATENCY_MARKER_SIMULATION_START_NV,
	VK_LATENCY_MARKER_SIMULATION_END_NV = VkLatencyMarkerNV.VK_LATENCY_MARKER_SIMULATION_END_NV,
	VK_LATENCY_MARKER_RENDERSUBMIT_START_NV = VkLatencyMarkerNV.VK_LATENCY_MARKER_RENDERSUBMIT_START_NV,
	VK_LATENCY_MARKER_RENDERSUBMIT_END_NV = VkLatencyMarkerNV.VK_LATENCY_MARKER_RENDERSUBMIT_END_NV,
	VK_LATENCY_MARKER_PRESENT_START_NV = VkLatencyMarkerNV.VK_LATENCY_MARKER_PRESENT_START_NV,
	VK_LATENCY_MARKER_PRESENT_END_NV = VkLatencyMarkerNV.VK_LATENCY_MARKER_PRESENT_END_NV,
	VK_LATENCY_MARKER_INPUT_SAMPLE_NV = VkLatencyMarkerNV.VK_LATENCY_MARKER_INPUT_SAMPLE_NV,
	VK_LATENCY_MARKER_TRIGGER_FLASH_NV = VkLatencyMarkerNV.VK_LATENCY_MARKER_TRIGGER_FLASH_NV,
	VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_START_NV = VkLatencyMarkerNV.VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_START_NV,
	VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_END_NV = VkLatencyMarkerNV.VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_END_NV,
	VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_START_NV = VkLatencyMarkerNV.VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_START_NV,
	VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_END_NV = VkLatencyMarkerNV.VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_END_NV,
	VK_LATENCY_MARKER_MAX_ENUM_NV = VkLatencyMarkerNV.VK_LATENCY_MARKER_MAX_ENUM_NV,
}
enum VkLayerSettingTypeEXT {
	VK_LAYER_SETTING_TYPE_BOOL32_EXT = 0,
	VK_LAYER_SETTING_TYPE_INT32_EXT = 1,
	VK_LAYER_SETTING_TYPE_INT64_EXT = 2,
	VK_LAYER_SETTING_TYPE_UINT32_EXT = 3,
	VK_LAYER_SETTING_TYPE_UINT64_EXT = 4,
	VK_LAYER_SETTING_TYPE_FLOAT32_EXT = 5,
	VK_LAYER_SETTING_TYPE_FLOAT64_EXT = 6,
	VK_LAYER_SETTING_TYPE_STRING_EXT = 7,
	VK_LAYER_SETTING_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkLayerSettingTypeEXT {
	VK_LAYER_SETTING_TYPE_BOOL32_EXT = VkLayerSettingTypeEXT.VK_LAYER_SETTING_TYPE_BOOL32_EXT,
	VK_LAYER_SETTING_TYPE_INT32_EXT = VkLayerSettingTypeEXT.VK_LAYER_SETTING_TYPE_INT32_EXT,
	VK_LAYER_SETTING_TYPE_INT64_EXT = VkLayerSettingTypeEXT.VK_LAYER_SETTING_TYPE_INT64_EXT,
	VK_LAYER_SETTING_TYPE_UINT32_EXT = VkLayerSettingTypeEXT.VK_LAYER_SETTING_TYPE_UINT32_EXT,
	VK_LAYER_SETTING_TYPE_UINT64_EXT = VkLayerSettingTypeEXT.VK_LAYER_SETTING_TYPE_UINT64_EXT,
	VK_LAYER_SETTING_TYPE_FLOAT32_EXT = VkLayerSettingTypeEXT.VK_LAYER_SETTING_TYPE_FLOAT32_EXT,
	VK_LAYER_SETTING_TYPE_FLOAT64_EXT = VkLayerSettingTypeEXT.VK_LAYER_SETTING_TYPE_FLOAT64_EXT,
	VK_LAYER_SETTING_TYPE_STRING_EXT = VkLayerSettingTypeEXT.VK_LAYER_SETTING_TYPE_STRING_EXT,
	VK_LAYER_SETTING_TYPE_MAX_ENUM_EXT = VkLayerSettingTypeEXT.VK_LAYER_SETTING_TYPE_MAX_ENUM_EXT,
}
enum VkLayeredDriverUnderlyingApiMSFT {
	VK_LAYERED_DRIVER_UNDERLYING_API_NONE_MSFT = 0,
	VK_LAYERED_DRIVER_UNDERLYING_API_D3D12_MSFT = 1,
	VK_LAYERED_DRIVER_UNDERLYING_API_MAX_ENUM_MSFT = 0x7FFFFFFF,
}
enum : VkLayeredDriverUnderlyingApiMSFT {
	VK_LAYERED_DRIVER_UNDERLYING_API_NONE_MSFT = VkLayeredDriverUnderlyingApiMSFT.VK_LAYERED_DRIVER_UNDERLYING_API_NONE_MSFT,
	VK_LAYERED_DRIVER_UNDERLYING_API_D3D12_MSFT = VkLayeredDriverUnderlyingApiMSFT.VK_LAYERED_DRIVER_UNDERLYING_API_D3D12_MSFT,
	VK_LAYERED_DRIVER_UNDERLYING_API_MAX_ENUM_MSFT = VkLayeredDriverUnderlyingApiMSFT.VK_LAYERED_DRIVER_UNDERLYING_API_MAX_ENUM_MSFT,
}
enum VkLineRasterizationMode {
	VK_LINE_RASTERIZATION_MODE_DEFAULT = 0,
	VK_LINE_RASTERIZATION_MODE_RECTANGULAR = 1,
	VK_LINE_RASTERIZATION_MODE_BRESENHAM = 2,
	VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH = 3,
	VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = VK_LINE_RASTERIZATION_MODE_DEFAULT,
	VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = VK_LINE_RASTERIZATION_MODE_RECTANGULAR,
	VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = VK_LINE_RASTERIZATION_MODE_BRESENHAM,
	VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH,
	VK_LINE_RASTERIZATION_MODE_DEFAULT_KHR = VK_LINE_RASTERIZATION_MODE_DEFAULT,
	VK_LINE_RASTERIZATION_MODE_RECTANGULAR_KHR = VK_LINE_RASTERIZATION_MODE_RECTANGULAR,
	VK_LINE_RASTERIZATION_MODE_BRESENHAM_KHR = VK_LINE_RASTERIZATION_MODE_BRESENHAM,
	VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_KHR = VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH,
	VK_LINE_RASTERIZATION_MODE_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkLineRasterizationMode {
	VK_LINE_RASTERIZATION_MODE_DEFAULT = VkLineRasterizationMode.VK_LINE_RASTERIZATION_MODE_DEFAULT,
	VK_LINE_RASTERIZATION_MODE_RECTANGULAR = VkLineRasterizationMode.VK_LINE_RASTERIZATION_MODE_RECTANGULAR,
	VK_LINE_RASTERIZATION_MODE_BRESENHAM = VkLineRasterizationMode.VK_LINE_RASTERIZATION_MODE_BRESENHAM,
	VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH = VkLineRasterizationMode.VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH,
	VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = VkLineRasterizationMode.VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT,
	VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = VkLineRasterizationMode.VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT,
	VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = VkLineRasterizationMode.VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT,
	VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = VkLineRasterizationMode.VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT,
	VK_LINE_RASTERIZATION_MODE_DEFAULT_KHR = VkLineRasterizationMode.VK_LINE_RASTERIZATION_MODE_DEFAULT_KHR,
	VK_LINE_RASTERIZATION_MODE_RECTANGULAR_KHR = VkLineRasterizationMode.VK_LINE_RASTERIZATION_MODE_RECTANGULAR_KHR,
	VK_LINE_RASTERIZATION_MODE_BRESENHAM_KHR = VkLineRasterizationMode.VK_LINE_RASTERIZATION_MODE_BRESENHAM_KHR,
	VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_KHR = VkLineRasterizationMode.VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_KHR,
	VK_LINE_RASTERIZATION_MODE_MAX_ENUM = VkLineRasterizationMode.VK_LINE_RASTERIZATION_MODE_MAX_ENUM,
}
enum VkLogicOp {
	VK_LOGIC_OP_CLEAR = 0,
	VK_LOGIC_OP_AND = 1,
	VK_LOGIC_OP_AND_REVERSE = 2,
	VK_LOGIC_OP_COPY = 3,
	VK_LOGIC_OP_AND_INVERTED = 4,
	VK_LOGIC_OP_NO_OP = 5,
	VK_LOGIC_OP_XOR = 6,
	VK_LOGIC_OP_OR = 7,
	VK_LOGIC_OP_NOR = 8,
	VK_LOGIC_OP_EQUIVALENT = 9,
	VK_LOGIC_OP_INVERT = 10,
	VK_LOGIC_OP_OR_REVERSE = 11,
	VK_LOGIC_OP_COPY_INVERTED = 12,
	VK_LOGIC_OP_OR_INVERTED = 13,
	VK_LOGIC_OP_NAND = 14,
	VK_LOGIC_OP_SET = 15,
	VK_LOGIC_OP_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkLogicOp {
	VK_LOGIC_OP_CLEAR = VkLogicOp.VK_LOGIC_OP_CLEAR,
	VK_LOGIC_OP_AND = VkLogicOp.VK_LOGIC_OP_AND,
	VK_LOGIC_OP_AND_REVERSE = VkLogicOp.VK_LOGIC_OP_AND_REVERSE,
	VK_LOGIC_OP_COPY = VkLogicOp.VK_LOGIC_OP_COPY,
	VK_LOGIC_OP_AND_INVERTED = VkLogicOp.VK_LOGIC_OP_AND_INVERTED,
	VK_LOGIC_OP_NO_OP = VkLogicOp.VK_LOGIC_OP_NO_OP,
	VK_LOGIC_OP_XOR = VkLogicOp.VK_LOGIC_OP_XOR,
	VK_LOGIC_OP_OR = VkLogicOp.VK_LOGIC_OP_OR,
	VK_LOGIC_OP_NOR = VkLogicOp.VK_LOGIC_OP_NOR,
	VK_LOGIC_OP_EQUIVALENT = VkLogicOp.VK_LOGIC_OP_EQUIVALENT,
	VK_LOGIC_OP_INVERT = VkLogicOp.VK_LOGIC_OP_INVERT,
	VK_LOGIC_OP_OR_REVERSE = VkLogicOp.VK_LOGIC_OP_OR_REVERSE,
	VK_LOGIC_OP_COPY_INVERTED = VkLogicOp.VK_LOGIC_OP_COPY_INVERTED,
	VK_LOGIC_OP_OR_INVERTED = VkLogicOp.VK_LOGIC_OP_OR_INVERTED,
	VK_LOGIC_OP_NAND = VkLogicOp.VK_LOGIC_OP_NAND,
	VK_LOGIC_OP_SET = VkLogicOp.VK_LOGIC_OP_SET,
	VK_LOGIC_OP_MAX_ENUM = VkLogicOp.VK_LOGIC_OP_MAX_ENUM,
}
enum VkMemoryAllocateFlagBits {
	VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 0x00000001,
	VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 0x00000002,
	VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 0x00000004,
	VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT,
	VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT,
	VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
	VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkMemoryAllocateFlagBits {
	VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT,
	VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT,
	VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
	VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR,
	VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR = VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR,
	VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR,
	VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM,
}
enum VkMemoryDecompressionMethodFlagBitsNV {
	VK_MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV = 0x00000001UL,
}
enum : VkMemoryDecompressionMethodFlagBitsNV {
	VK_MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV = VkMemoryDecompressionMethodFlagBitsNV.VK_MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV,
}
enum VkMemoryHeapFlagBits {
	VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 0x00000001,
	VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 0x00000002,
	VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = VK_MEMORY_HEAP_MULTI_INSTANCE_BIT,
	VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkMemoryHeapFlagBits {
	VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = VkMemoryHeapFlagBits.VK_MEMORY_HEAP_DEVICE_LOCAL_BIT,
	VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = VkMemoryHeapFlagBits.VK_MEMORY_HEAP_MULTI_INSTANCE_BIT,
	VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = VkMemoryHeapFlagBits.VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR,
	VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = VkMemoryHeapFlagBits.VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM,
}
enum VkMemoryMapFlagBits {
	VK_MEMORY_MAP_PLACED_BIT_EXT = 0x00000001,
	VK_MEMORY_MAP_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkMemoryMapFlagBits {
	VK_MEMORY_MAP_PLACED_BIT_EXT = VkMemoryMapFlagBits.VK_MEMORY_MAP_PLACED_BIT_EXT,
	VK_MEMORY_MAP_FLAG_BITS_MAX_ENUM = VkMemoryMapFlagBits.VK_MEMORY_MAP_FLAG_BITS_MAX_ENUM,
}
enum VkMemoryOverallocationBehaviorAMD {
	VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0,
	VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1,
	VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2,
	VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = 0x7FFFFFFF,
}
enum : VkMemoryOverallocationBehaviorAMD {
	VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = VkMemoryOverallocationBehaviorAMD.VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD,
	VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = VkMemoryOverallocationBehaviorAMD.VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD,
	VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = VkMemoryOverallocationBehaviorAMD.VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD,
	VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = VkMemoryOverallocationBehaviorAMD.VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD,
}
enum VkMemoryPropertyFlagBits {
	VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 0x00000001,
	VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 0x00000002,
	VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 0x00000004,
	VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 0x00000008,
	VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 0x00000010,
	VK_MEMORY_PROPERTY_PROTECTED_BIT = 0x00000020,
	VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 0x00000040,
	VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 0x00000080,
	VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV = 0x00000100,
	VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkMemoryPropertyFlagBits {
	VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT,
	VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT,
	VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,
	VK_MEMORY_PROPERTY_HOST_CACHED_BIT = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_HOST_CACHED_BIT,
	VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT,
	VK_MEMORY_PROPERTY_PROTECTED_BIT = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_PROTECTED_BIT,
	VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD,
	VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD,
	VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV,
	VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM,
}
enum VkMemoryUnmapFlagBits {
	VK_MEMORY_UNMAP_RESERVE_BIT_EXT = 0x00000001,
	VK_MEMORY_UNMAP_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkMemoryUnmapFlagBits {
	VK_MEMORY_UNMAP_RESERVE_BIT_EXT = VkMemoryUnmapFlagBits.VK_MEMORY_UNMAP_RESERVE_BIT_EXT,
	VK_MEMORY_UNMAP_FLAG_BITS_MAX_ENUM = VkMemoryUnmapFlagBits.VK_MEMORY_UNMAP_FLAG_BITS_MAX_ENUM,
}
enum VkMicromapCreateFlagBitsEXT {
	VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 0x00000001,
	VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkMicromapCreateFlagBitsEXT {
	VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = VkMicromapCreateFlagBitsEXT.VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT,
	VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT = VkMicromapCreateFlagBitsEXT.VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT,
}
enum VkMicromapTypeEXT {
	VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT = 0,
	VK_MICROMAP_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkMicromapTypeEXT {
	VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT = VkMicromapTypeEXT.VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT,
	VK_MICROMAP_TYPE_MAX_ENUM_EXT = VkMicromapTypeEXT.VK_MICROMAP_TYPE_MAX_ENUM_EXT,
}
enum VkObjectType {
	VK_OBJECT_TYPE_UNKNOWN = 0,
	VK_OBJECT_TYPE_INSTANCE = 1,
	VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2,
	VK_OBJECT_TYPE_DEVICE = 3,
	VK_OBJECT_TYPE_QUEUE = 4,
	VK_OBJECT_TYPE_SEMAPHORE = 5,
	VK_OBJECT_TYPE_COMMAND_BUFFER = 6,
	VK_OBJECT_TYPE_FENCE = 7,
	VK_OBJECT_TYPE_DEVICE_MEMORY = 8,
	VK_OBJECT_TYPE_BUFFER = 9,
	VK_OBJECT_TYPE_IMAGE = 10,
	VK_OBJECT_TYPE_EVENT = 11,
	VK_OBJECT_TYPE_QUERY_POOL = 12,
	VK_OBJECT_TYPE_BUFFER_VIEW = 13,
	VK_OBJECT_TYPE_IMAGE_VIEW = 14,
	VK_OBJECT_TYPE_SHADER_MODULE = 15,
	VK_OBJECT_TYPE_PIPELINE_CACHE = 16,
	VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17,
	VK_OBJECT_TYPE_RENDER_PASS = 18,
	VK_OBJECT_TYPE_PIPELINE = 19,
	VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20,
	VK_OBJECT_TYPE_SAMPLER = 21,
	VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22,
	VK_OBJECT_TYPE_DESCRIPTOR_SET = 23,
	VK_OBJECT_TYPE_FRAMEBUFFER = 24,
	VK_OBJECT_TYPE_COMMAND_POOL = 25,
	VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000,
	VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000,
	VK_OBJECT_TYPE_PRIVATE_DATA_SLOT = 1000295000,
	VK_OBJECT_TYPE_SURFACE_KHR = 1000000000,
	VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000,
	VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000,
	VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001,
	VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000,
	VK_OBJECT_TYPE_VIDEO_SESSION_KHR = 1000023000,
	VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR = 1000023001,
	VK_OBJECT_TYPE_CU_MODULE_NVX = 1000029000,
	VK_OBJECT_TYPE_CU_FUNCTION_NVX = 1000029001,
	VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000,
	VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000,
	VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000,
	VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
	VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000,
	VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1000268000,
	VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1000277000,
	VK_OBJECT_TYPE_CUDA_MODULE_NV = 1000307000,
	VK_OBJECT_TYPE_CUDA_FUNCTION_NV = 1000307001,
	VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA = 1000366000,
	VK_OBJECT_TYPE_MICROMAP_EXT = 1000396000,
	VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV = 1000464000,
	VK_OBJECT_TYPE_SHADER_EXT = 1000482000,
	VK_OBJECT_TYPE_PIPELINE_BINARY_KHR = 1000483000,
	VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_EXT = 1000572000,
	VK_OBJECT_TYPE_INDIRECT_EXECUTION_SET_EXT = 1000572001,
	VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE,
	VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION,
	VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = VK_OBJECT_TYPE_PRIVATE_DATA_SLOT,
	VK_OBJECT_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkObjectType {
	VK_OBJECT_TYPE_UNKNOWN = VkObjectType.VK_OBJECT_TYPE_UNKNOWN,
	VK_OBJECT_TYPE_INSTANCE = VkObjectType.VK_OBJECT_TYPE_INSTANCE,
	VK_OBJECT_TYPE_PHYSICAL_DEVICE = VkObjectType.VK_OBJECT_TYPE_PHYSICAL_DEVICE,
	VK_OBJECT_TYPE_DEVICE = VkObjectType.VK_OBJECT_TYPE_DEVICE,
	VK_OBJECT_TYPE_QUEUE = VkObjectType.VK_OBJECT_TYPE_QUEUE,
	VK_OBJECT_TYPE_SEMAPHORE = VkObjectType.VK_OBJECT_TYPE_SEMAPHORE,
	VK_OBJECT_TYPE_COMMAND_BUFFER = VkObjectType.VK_OBJECT_TYPE_COMMAND_BUFFER,
	VK_OBJECT_TYPE_FENCE = VkObjectType.VK_OBJECT_TYPE_FENCE,
	VK_OBJECT_TYPE_DEVICE_MEMORY = VkObjectType.VK_OBJECT_TYPE_DEVICE_MEMORY,
	VK_OBJECT_TYPE_BUFFER = VkObjectType.VK_OBJECT_TYPE_BUFFER,
	VK_OBJECT_TYPE_IMAGE = VkObjectType.VK_OBJECT_TYPE_IMAGE,
	VK_OBJECT_TYPE_EVENT = VkObjectType.VK_OBJECT_TYPE_EVENT,
	VK_OBJECT_TYPE_QUERY_POOL = VkObjectType.VK_OBJECT_TYPE_QUERY_POOL,
	VK_OBJECT_TYPE_BUFFER_VIEW = VkObjectType.VK_OBJECT_TYPE_BUFFER_VIEW,
	VK_OBJECT_TYPE_IMAGE_VIEW = VkObjectType.VK_OBJECT_TYPE_IMAGE_VIEW,
	VK_OBJECT_TYPE_SHADER_MODULE = VkObjectType.VK_OBJECT_TYPE_SHADER_MODULE,
	VK_OBJECT_TYPE_PIPELINE_CACHE = VkObjectType.VK_OBJECT_TYPE_PIPELINE_CACHE,
	VK_OBJECT_TYPE_PIPELINE_LAYOUT = VkObjectType.VK_OBJECT_TYPE_PIPELINE_LAYOUT,
	VK_OBJECT_TYPE_RENDER_PASS = VkObjectType.VK_OBJECT_TYPE_RENDER_PASS,
	VK_OBJECT_TYPE_PIPELINE = VkObjectType.VK_OBJECT_TYPE_PIPELINE,
	VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = VkObjectType.VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT,
	VK_OBJECT_TYPE_SAMPLER = VkObjectType.VK_OBJECT_TYPE_SAMPLER,
	VK_OBJECT_TYPE_DESCRIPTOR_POOL = VkObjectType.VK_OBJECT_TYPE_DESCRIPTOR_POOL,
	VK_OBJECT_TYPE_DESCRIPTOR_SET = VkObjectType.VK_OBJECT_TYPE_DESCRIPTOR_SET,
	VK_OBJECT_TYPE_FRAMEBUFFER = VkObjectType.VK_OBJECT_TYPE_FRAMEBUFFER,
	VK_OBJECT_TYPE_COMMAND_POOL = VkObjectType.VK_OBJECT_TYPE_COMMAND_POOL,
	VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = VkObjectType.VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION,
	VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = VkObjectType.VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE,
	VK_OBJECT_TYPE_PRIVATE_DATA_SLOT = VkObjectType.VK_OBJECT_TYPE_PRIVATE_DATA_SLOT,
	VK_OBJECT_TYPE_SURFACE_KHR = VkObjectType.VK_OBJECT_TYPE_SURFACE_KHR,
	VK_OBJECT_TYPE_SWAPCHAIN_KHR = VkObjectType.VK_OBJECT_TYPE_SWAPCHAIN_KHR,
	VK_OBJECT_TYPE_DISPLAY_KHR = VkObjectType.VK_OBJECT_TYPE_DISPLAY_KHR,
	VK_OBJECT_TYPE_DISPLAY_MODE_KHR = VkObjectType.VK_OBJECT_TYPE_DISPLAY_MODE_KHR,
	VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = VkObjectType.VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT,
	VK_OBJECT_TYPE_VIDEO_SESSION_KHR = VkObjectType.VK_OBJECT_TYPE_VIDEO_SESSION_KHR,
	VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR = VkObjectType.VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR,
	VK_OBJECT_TYPE_CU_MODULE_NVX = VkObjectType.VK_OBJECT_TYPE_CU_MODULE_NVX,
	VK_OBJECT_TYPE_CU_FUNCTION_NVX = VkObjectType.VK_OBJECT_TYPE_CU_FUNCTION_NVX,
	VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = VkObjectType.VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT,
	VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = VkObjectType.VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR,
	VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = VkObjectType.VK_OBJECT_TYPE_VALIDATION_CACHE_EXT,
	VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = VkObjectType.VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV,
	VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = VkObjectType.VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL,
	VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR = VkObjectType.VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR,
	VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = VkObjectType.VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV,
	VK_OBJECT_TYPE_CUDA_MODULE_NV = VkObjectType.VK_OBJECT_TYPE_CUDA_MODULE_NV,
	VK_OBJECT_TYPE_CUDA_FUNCTION_NV = VkObjectType.VK_OBJECT_TYPE_CUDA_FUNCTION_NV,
	VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA = VkObjectType.VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA,
	VK_OBJECT_TYPE_MICROMAP_EXT = VkObjectType.VK_OBJECT_TYPE_MICROMAP_EXT,
	VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV = VkObjectType.VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV,
	VK_OBJECT_TYPE_SHADER_EXT = VkObjectType.VK_OBJECT_TYPE_SHADER_EXT,
	VK_OBJECT_TYPE_PIPELINE_BINARY_KHR = VkObjectType.VK_OBJECT_TYPE_PIPELINE_BINARY_KHR,
	VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_EXT = VkObjectType.VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_EXT,
	VK_OBJECT_TYPE_INDIRECT_EXECUTION_SET_EXT = VkObjectType.VK_OBJECT_TYPE_INDIRECT_EXECUTION_SET_EXT,
	VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = VkObjectType.VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR,
	VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = VkObjectType.VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR,
	VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = VkObjectType.VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT,
	VK_OBJECT_TYPE_MAX_ENUM = VkObjectType.VK_OBJECT_TYPE_MAX_ENUM,
}
enum VkOpacityMicromapFormatEXT {
	VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT = 1,
	VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT = 2,
	VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkOpacityMicromapFormatEXT {
	VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT = VkOpacityMicromapFormatEXT.VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT,
	VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT = VkOpacityMicromapFormatEXT.VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT,
	VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT = VkOpacityMicromapFormatEXT.VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT,
}
enum VkOpacityMicromapSpecialIndexEXT {
	VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT = -1,
	VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT = -2,
	VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT = -3,
	VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT = -4,
	VK_OPACITY_MICROMAP_SPECIAL_INDEX_CLUSTER_GEOMETRY_DISABLE_OPACITY_MICROMAP_NV = -5,
	VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkOpacityMicromapSpecialIndexEXT {
	VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT = VkOpacityMicromapSpecialIndexEXT.VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT,
	VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT = VkOpacityMicromapSpecialIndexEXT.VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT,
	VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT = VkOpacityMicromapSpecialIndexEXT.VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT,
	VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT = VkOpacityMicromapSpecialIndexEXT.VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT,
	VK_OPACITY_MICROMAP_SPECIAL_INDEX_CLUSTER_GEOMETRY_DISABLE_OPACITY_MICROMAP_NV = VkOpacityMicromapSpecialIndexEXT.VK_OPACITY_MICROMAP_SPECIAL_INDEX_CLUSTER_GEOMETRY_DISABLE_OPACITY_MICROMAP_NV,
	VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT = VkOpacityMicromapSpecialIndexEXT.VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT,
}
enum VkOpticalFlowExecuteFlagBitsNV {
	VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV = 0x00000001,
	VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkOpticalFlowExecuteFlagBitsNV {
	VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV = VkOpticalFlowExecuteFlagBitsNV.VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV,
	VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV = VkOpticalFlowExecuteFlagBitsNV.VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV,
}
enum VkOpticalFlowGridSizeFlagBitsNV {
	VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV = 0,
	VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV = 0x00000001,
	VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV = 0x00000002,
	VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV = 0x00000004,
	VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV = 0x00000008,
	VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkOpticalFlowGridSizeFlagBitsNV {
	VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV = VkOpticalFlowGridSizeFlagBitsNV.VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV,
	VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV = VkOpticalFlowGridSizeFlagBitsNV.VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV,
	VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV = VkOpticalFlowGridSizeFlagBitsNV.VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV,
	VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV = VkOpticalFlowGridSizeFlagBitsNV.VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV,
	VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV = VkOpticalFlowGridSizeFlagBitsNV.VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV,
	VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV = VkOpticalFlowGridSizeFlagBitsNV.VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV,
}
enum VkOpticalFlowPerformanceLevelNV {
	VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV = 0,
	VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV = 1,
	VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV = 2,
	VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV = 3,
	VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkOpticalFlowPerformanceLevelNV {
	VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV = VkOpticalFlowPerformanceLevelNV.VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV,
	VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV = VkOpticalFlowPerformanceLevelNV.VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV,
	VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV = VkOpticalFlowPerformanceLevelNV.VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV,
	VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV = VkOpticalFlowPerformanceLevelNV.VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV,
	VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV = VkOpticalFlowPerformanceLevelNV.VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV,
}
enum VkOpticalFlowSessionBindingPointNV {
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV = 0,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV = 1,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV = 2,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV = 3,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV = 4,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV = 5,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV = 6,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV = 7,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV = 8,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkOpticalFlowSessionBindingPointNV {
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV = VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV = VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV = VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV = VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV = VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV = VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV = VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV = VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV = VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV = VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV,
}
enum VkOpticalFlowSessionCreateFlagBitsNV {
	VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV = 0x00000001,
	VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV = 0x00000002,
	VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV = 0x00000004,
	VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV = 0x00000008,
	VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV = 0x00000010,
	VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkOpticalFlowSessionCreateFlagBitsNV {
	VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV = VkOpticalFlowSessionCreateFlagBitsNV.VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV,
	VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV = VkOpticalFlowSessionCreateFlagBitsNV.VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV,
	VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV = VkOpticalFlowSessionCreateFlagBitsNV.VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV,
	VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV = VkOpticalFlowSessionCreateFlagBitsNV.VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV,
	VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV = VkOpticalFlowSessionCreateFlagBitsNV.VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV,
	VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV = VkOpticalFlowSessionCreateFlagBitsNV.VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV,
}
enum VkOpticalFlowUsageFlagBitsNV {
	VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV = 0,
	VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV = 0x00000001,
	VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV = 0x00000002,
	VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV = 0x00000004,
	VK_OPTICAL_FLOW_USAGE_COST_BIT_NV = 0x00000008,
	VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV = 0x00000010,
	VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkOpticalFlowUsageFlagBitsNV {
	VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV = VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV,
	VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV = VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV,
	VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV = VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV,
	VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV = VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV,
	VK_OPTICAL_FLOW_USAGE_COST_BIT_NV = VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_COST_BIT_NV,
	VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV = VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV,
	VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV = VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV,
}
enum VkOutOfBandQueueTypeNV {
	VK_OUT_OF_BAND_QUEUE_TYPE_RENDER_NV = 0,
	VK_OUT_OF_BAND_QUEUE_TYPE_PRESENT_NV = 1,
	VK_OUT_OF_BAND_QUEUE_TYPE_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkOutOfBandQueueTypeNV {
	VK_OUT_OF_BAND_QUEUE_TYPE_RENDER_NV = VkOutOfBandQueueTypeNV.VK_OUT_OF_BAND_QUEUE_TYPE_RENDER_NV,
	VK_OUT_OF_BAND_QUEUE_TYPE_PRESENT_NV = VkOutOfBandQueueTypeNV.VK_OUT_OF_BAND_QUEUE_TYPE_PRESENT_NV,
	VK_OUT_OF_BAND_QUEUE_TYPE_MAX_ENUM_NV = VkOutOfBandQueueTypeNV.VK_OUT_OF_BAND_QUEUE_TYPE_MAX_ENUM_NV,
}
enum VkPartitionedAccelerationStructureInstanceFlagBitsNV {
	VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_TRIANGLE_FACING_CULL_DISABLE_BIT_NV = 0x00000001,
	VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_TRIANGLE_FLIP_FACING_BIT_NV = 0x00000002,
	VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_FORCE_OPAQUE_BIT_NV = 0x00000004,
	VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_FORCE_NO_OPAQUE_BIT_NV = 0x00000008,
	VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_ENABLE_EXPLICIT_BOUNDING_BOX_NV = 0x00000010,
	VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkPartitionedAccelerationStructureInstanceFlagBitsNV {
	VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_TRIANGLE_FACING_CULL_DISABLE_BIT_NV = VkPartitionedAccelerationStructureInstanceFlagBitsNV.VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_TRIANGLE_FACING_CULL_DISABLE_BIT_NV,
	VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_TRIANGLE_FLIP_FACING_BIT_NV = VkPartitionedAccelerationStructureInstanceFlagBitsNV.VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_TRIANGLE_FLIP_FACING_BIT_NV,
	VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_FORCE_OPAQUE_BIT_NV = VkPartitionedAccelerationStructureInstanceFlagBitsNV.VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_FORCE_OPAQUE_BIT_NV,
	VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_FORCE_NO_OPAQUE_BIT_NV = VkPartitionedAccelerationStructureInstanceFlagBitsNV.VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_FORCE_NO_OPAQUE_BIT_NV,
	VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_ENABLE_EXPLICIT_BOUNDING_BOX_NV = VkPartitionedAccelerationStructureInstanceFlagBitsNV.VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_ENABLE_EXPLICIT_BOUNDING_BOX_NV,
	VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_BITS_MAX_ENUM_NV = VkPartitionedAccelerationStructureInstanceFlagBitsNV.VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_BITS_MAX_ENUM_NV,
}
enum VkPartitionedAccelerationStructureOpTypeNV {
	VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_WRITE_INSTANCE_NV = 0,
	VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_UPDATE_INSTANCE_NV = 1,
	VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_WRITE_PARTITION_TRANSLATION_NV = 2,
	VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkPartitionedAccelerationStructureOpTypeNV {
	VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_WRITE_INSTANCE_NV = VkPartitionedAccelerationStructureOpTypeNV.VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_WRITE_INSTANCE_NV,
	VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_UPDATE_INSTANCE_NV = VkPartitionedAccelerationStructureOpTypeNV.VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_UPDATE_INSTANCE_NV,
	VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_WRITE_PARTITION_TRANSLATION_NV = VkPartitionedAccelerationStructureOpTypeNV.VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_WRITE_PARTITION_TRANSLATION_NV,
	VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_MAX_ENUM_NV = VkPartitionedAccelerationStructureOpTypeNV.VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_MAX_ENUM_NV,
}
enum VkPeerMemoryFeatureFlagBits {
	VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 0x00000001,
	VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 0x00000002,
	VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 0x00000004,
	VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 0x00000008,
	VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT,
	VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = VK_PEER_MEMORY_FEATURE_COPY_DST_BIT,
	VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT,
	VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT,
	VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkPeerMemoryFeatureFlagBits {
	VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT,
	VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_COPY_DST_BIT,
	VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT,
	VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT,
	VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR,
	VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR,
	VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR,
	VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR,
	VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM,
}
enum VkPerformanceConfigurationTypeINTEL {
	VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0,
	VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF,
}
enum : VkPerformanceConfigurationTypeINTEL {
	VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = VkPerformanceConfigurationTypeINTEL.VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL,
	VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL = VkPerformanceConfigurationTypeINTEL.VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL,
}
enum VkPerformanceCounterDescriptionFlagBitsKHR {
	VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = 0x00000001,
	VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = 0x00000002,
	VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR,
	VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR,
	VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkPerformanceCounterDescriptionFlagBitsKHR {
	VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = VkPerformanceCounterDescriptionFlagBitsKHR.VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR,
	VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = VkPerformanceCounterDescriptionFlagBitsKHR.VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR,
	VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = VkPerformanceCounterDescriptionFlagBitsKHR.VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR,
	VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = VkPerformanceCounterDescriptionFlagBitsKHR.VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR,
	VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR = VkPerformanceCounterDescriptionFlagBitsKHR.VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkPerformanceCounterScopeKHR {
	VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0,
	VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1,
	VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2,
	VK_QUERY_SCOPE_COMMAND_BUFFER_KHR = VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR,
	VK_QUERY_SCOPE_RENDER_PASS_KHR = VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR,
	VK_QUERY_SCOPE_COMMAND_KHR = VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR,
	VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkPerformanceCounterScopeKHR {
	VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = VkPerformanceCounterScopeKHR.VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR,
	VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = VkPerformanceCounterScopeKHR.VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR,
	VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = VkPerformanceCounterScopeKHR.VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR,
	VK_QUERY_SCOPE_COMMAND_BUFFER_KHR = VkPerformanceCounterScopeKHR.VK_QUERY_SCOPE_COMMAND_BUFFER_KHR,
	VK_QUERY_SCOPE_RENDER_PASS_KHR = VkPerformanceCounterScopeKHR.VK_QUERY_SCOPE_RENDER_PASS_KHR,
	VK_QUERY_SCOPE_COMMAND_KHR = VkPerformanceCounterScopeKHR.VK_QUERY_SCOPE_COMMAND_KHR,
	VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR = VkPerformanceCounterScopeKHR.VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR,
}
enum VkPerformanceCounterStorageKHR {
	VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0,
	VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1,
	VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2,
	VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3,
	VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4,
	VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5,
	VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkPerformanceCounterStorageKHR {
	VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR,
	VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR,
	VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR,
	VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR,
	VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR,
	VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR,
	VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR = VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR,
}
enum VkPerformanceCounterUnitKHR {
	VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0,
	VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1,
	VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2,
	VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3,
	VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4,
	VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5,
	VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6,
	VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7,
	VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8,
	VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9,
	VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10,
	VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkPerformanceCounterUnitKHR {
	VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR,
	VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR,
	VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR,
	VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR,
	VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR,
	VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR,
	VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR,
	VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR,
	VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR,
	VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR,
	VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR,
	VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR = VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR,
}
enum VkPerformanceOverrideTypeINTEL {
	VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0,
	VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1,
	VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF,
}
enum : VkPerformanceOverrideTypeINTEL {
	VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = VkPerformanceOverrideTypeINTEL.VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL,
	VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = VkPerformanceOverrideTypeINTEL.VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL,
	VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL = VkPerformanceOverrideTypeINTEL.VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL,
}
enum VkPerformanceParameterTypeINTEL {
	VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0,
	VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1,
	VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF,
}
enum : VkPerformanceParameterTypeINTEL {
	VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = VkPerformanceParameterTypeINTEL.VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL,
	VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = VkPerformanceParameterTypeINTEL.VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL,
	VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL = VkPerformanceParameterTypeINTEL.VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL,
}
enum VkPerformanceValueTypeINTEL {
	VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0,
	VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1,
	VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2,
	VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3,
	VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4,
	VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF,
}
enum : VkPerformanceValueTypeINTEL {
	VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL,
	VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL,
	VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL,
	VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL,
	VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL,
	VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL,
}
enum VkPhysicalDeviceLayeredApiKHR {
	VK_PHYSICAL_DEVICE_LAYERED_API_VULKAN_KHR = 0,
	VK_PHYSICAL_DEVICE_LAYERED_API_D3D12_KHR = 1,
	VK_PHYSICAL_DEVICE_LAYERED_API_METAL_KHR = 2,
	VK_PHYSICAL_DEVICE_LAYERED_API_OPENGL_KHR = 3,
	VK_PHYSICAL_DEVICE_LAYERED_API_OPENGLES_KHR = 4,
	VK_PHYSICAL_DEVICE_LAYERED_API_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkPhysicalDeviceLayeredApiKHR {
	VK_PHYSICAL_DEVICE_LAYERED_API_VULKAN_KHR = VkPhysicalDeviceLayeredApiKHR.VK_PHYSICAL_DEVICE_LAYERED_API_VULKAN_KHR,
	VK_PHYSICAL_DEVICE_LAYERED_API_D3D12_KHR = VkPhysicalDeviceLayeredApiKHR.VK_PHYSICAL_DEVICE_LAYERED_API_D3D12_KHR,
	VK_PHYSICAL_DEVICE_LAYERED_API_METAL_KHR = VkPhysicalDeviceLayeredApiKHR.VK_PHYSICAL_DEVICE_LAYERED_API_METAL_KHR,
	VK_PHYSICAL_DEVICE_LAYERED_API_OPENGL_KHR = VkPhysicalDeviceLayeredApiKHR.VK_PHYSICAL_DEVICE_LAYERED_API_OPENGL_KHR,
	VK_PHYSICAL_DEVICE_LAYERED_API_OPENGLES_KHR = VkPhysicalDeviceLayeredApiKHR.VK_PHYSICAL_DEVICE_LAYERED_API_OPENGLES_KHR,
	VK_PHYSICAL_DEVICE_LAYERED_API_MAX_ENUM_KHR = VkPhysicalDeviceLayeredApiKHR.VK_PHYSICAL_DEVICE_LAYERED_API_MAX_ENUM_KHR,
}
enum VkPhysicalDeviceSchedulingControlsFlagBitsARM {
	VK_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_SHADER_CORE_COUNT_ARM = 0x00000001UL,
}
enum : VkPhysicalDeviceSchedulingControlsFlagBitsARM {
	VK_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_SHADER_CORE_COUNT_ARM = VkPhysicalDeviceSchedulingControlsFlagBitsARM.VK_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_SHADER_CORE_COUNT_ARM,
}
enum VkPhysicalDeviceType {
	VK_PHYSICAL_DEVICE_TYPE_OTHER = 0,
	VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
	VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,
	VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,
	VK_PHYSICAL_DEVICE_TYPE_CPU = 4,
	VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkPhysicalDeviceType {
	VK_PHYSICAL_DEVICE_TYPE_OTHER = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_OTHER,
	VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU,
	VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU,
	VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU,
	VK_PHYSICAL_DEVICE_TYPE_CPU = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_CPU,
	VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM,
}
enum VkPipelineBindPoint {
	VK_PIPELINE_BIND_POINT_GRAPHICS = 0,
	VK_PIPELINE_BIND_POINT_COMPUTE = 1,
	VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000,
	VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI = 1000369003,
	VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR,
	VK_PIPELINE_BIND_POINT_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkPipelineBindPoint {
	VK_PIPELINE_BIND_POINT_GRAPHICS = VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_GRAPHICS,
	VK_PIPELINE_BIND_POINT_COMPUTE = VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_COMPUTE,
	VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR,
	VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI = VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI,
	VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_RAY_TRACING_NV,
	VK_PIPELINE_BIND_POINT_MAX_ENUM = VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_MAX_ENUM,
}
enum VkPipelineCacheCreateFlagBits {
	VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT = 0x00000001,
	VK_PIPELINE_CACHE_CREATE_INTERNALLY_SYNCHRONIZED_MERGE_BIT_KHR = 0x00000008,
	VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT,
	VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkPipelineCacheCreateFlagBits {
	VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT = VkPipelineCacheCreateFlagBits.VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT,
	VK_PIPELINE_CACHE_CREATE_INTERNALLY_SYNCHRONIZED_MERGE_BIT_KHR = VkPipelineCacheCreateFlagBits.VK_PIPELINE_CACHE_CREATE_INTERNALLY_SYNCHRONIZED_MERGE_BIT_KHR,
	VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = VkPipelineCacheCreateFlagBits.VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT,
	VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM = VkPipelineCacheCreateFlagBits.VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM,
}
enum VkPipelineCacheHeaderVersion {
	VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1,
	VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkPipelineCacheHeaderVersion {
	VK_PIPELINE_CACHE_HEADER_VERSION_ONE = VkPipelineCacheHeaderVersion.VK_PIPELINE_CACHE_HEADER_VERSION_ONE,
	VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = VkPipelineCacheHeaderVersion.VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM,
}
enum VkPipelineColorBlendStateCreateFlagBits {
	VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT = 0x00000001,
	VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM = VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT,
	VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkPipelineColorBlendStateCreateFlagBits {
	VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT = VkPipelineColorBlendStateCreateFlagBits.VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT,
	VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM = VkPipelineColorBlendStateCreateFlagBits.VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM,
	VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM = VkPipelineColorBlendStateCreateFlagBits.VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM,
}
enum VkPipelineCompilerControlFlagBitsAMD {
	VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD = 0x7FFFFFFF,
}
enum : VkPipelineCompilerControlFlagBitsAMD {
	VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD = VkPipelineCompilerControlFlagBitsAMD.VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD,
}
enum VkPipelineCreateFlagBits {
	VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 0x00000001,
	VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 0x00000002,
	VK_PIPELINE_CREATE_DERIVATIVE_BIT = 0x00000004,
	VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 0x00000008,
	VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = 0x00000010,
	VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT = 0x00000100,
	VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT = 0x00000200,
	VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT = 0x08000000,
	VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT = 0x40000000,
	VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 0x00004000,
	VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 0x00008000,
	VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 0x00010000,
	VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 0x00020000,
	VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 0x00001000,
	VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 0x00002000,
	VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = 0x00080000,
	VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 0x00000020,
	VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 0x00400000,
	VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0x00200000,
	VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 0x00000040,
	VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 0x00000080,
	VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 0x00040000,
	VK_PIPELINE_CREATE_LIBRARY_BIT_KHR = 0x00000800,
	VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = 0x20000000,
	VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT = 0x00800000,
	VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT = 0x00000400,
	VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV = 0x00100000,
	VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 0x02000000,
	VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 0x04000000,
	VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT = 0x01000000,
	VK_PIPELINE_CREATE_DISPATCH_BASE = VK_PIPELINE_CREATE_DISPATCH_BASE_BIT,
	VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT,
	VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = VK_PIPELINE_CREATE_DISPATCH_BASE,
	VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT,
	VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,
	VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT,
	VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT,
	VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT = VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT,
	VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT = VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT,
	VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkPipelineCreateFlagBits {
	VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT,
	VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT,
	VK_PIPELINE_CREATE_DERIVATIVE_BIT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DERIVATIVE_BIT,
	VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT,
	VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DISPATCH_BASE_BIT,
	VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT,
	VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT,
	VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT,
	VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT,
	VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR,
	VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR,
	VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR,
	VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR,
	VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR,
	VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR,
	VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR,
	VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV,
	VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT,
	VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,
	VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR,
	VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR,
	VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV,
	VK_PIPELINE_CREATE_LIBRARY_BIT_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_LIBRARY_BIT_KHR,
	VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT,
	VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT,
	VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT,
	VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV,
	VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT,
	VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT,
	VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT,
	VK_PIPELINE_CREATE_DISPATCH_BASE = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DISPATCH_BASE,
	VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR,
	VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DISPATCH_BASE_KHR,
	VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = VkPipelineCreateFlagBits.VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT,
	VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,
	VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT,
	VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT,
	VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT,
	VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT,
	VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM,
}
enum VkPipelineCreateFlagBits2 {
	VK_PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT = 0x00000001UL,
	VK_PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT = 0x00000002UL,
	VK_PIPELINE_CREATE_2_DERIVATIVE_BIT = 0x00000004UL,
	VK_PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 0x00000008UL,
	VK_PIPELINE_CREATE_2_DISPATCH_BASE_BIT = 0x00000010UL,
	VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT = 0x00000100UL,
	VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT = 0x00000200UL,
	VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT = 0x08000000UL,
	VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT = 0x40000000UL,
	VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_BUILT_IN_PRIMITIVES_BIT_KHR = 0x00001000UL,
	VK_PIPELINE_CREATE_2_RAY_TRACING_ALLOW_SPHERES_AND_LINEAR_SWEPT_SPHERES_BIT_NV = 0x200000000UL,
	VK_PIPELINE_CREATE_2_ENABLE_LEGACY_DITHERING_BIT_EXT = 0x400000000UL,
	VK_PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT_KHR = 0x00000001UL,
	VK_PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT_KHR = 0x00000002UL,
	VK_PIPELINE_CREATE_2_DERIVATIVE_BIT_KHR = 0x00000004UL,
	VK_PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = 0x00000008UL,
	VK_PIPELINE_CREATE_2_DISPATCH_BASE_BIT_KHR = 0x00000010UL,
	VK_PIPELINE_CREATE_2_DEFER_COMPILE_BIT_NV = 0x00000020UL,
	VK_PIPELINE_CREATE_2_CAPTURE_STATISTICS_BIT_KHR = 0x00000040UL,
	VK_PIPELINE_CREATE_2_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 0x00000080UL,
	VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_KHR = 0x00000100UL,
	VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT_KHR = 0x00000200UL,
	VK_PIPELINE_CREATE_2_LINK_TIME_OPTIMIZATION_BIT_EXT = 0x00000400UL,
	VK_PIPELINE_CREATE_2_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT = 0x00800000UL,
	VK_PIPELINE_CREATE_2_LIBRARY_BIT_KHR = 0x00000800UL,
	VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 0x00001000UL,
	VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_AABBS_BIT_KHR = 0x00002000UL,
	VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 0x00004000UL,
	VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 0x00008000UL,
	VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 0x00010000UL,
	VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 0x00020000UL,
	VK_PIPELINE_CREATE_2_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = 0x00080000UL,
	VK_PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_NV = 0x00040000UL,
	VK_PIPELINE_CREATE_2_RAY_TRACING_ALLOW_MOTION_BIT_NV = 0x00100000UL,
	VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0x00200000UL,
	VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 0x00400000UL,
	VK_PIPELINE_CREATE_2_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT = 0x01000000UL,
	VK_PIPELINE_CREATE_2_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 0x02000000UL,
	VK_PIPELINE_CREATE_2_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 0x04000000UL,
	VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT_EXT = 0x08000000UL,
	VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT_EXT = 0x40000000UL,
	VK_PIPELINE_CREATE_2_RAY_TRACING_DISPLACEMENT_MICROMAP_BIT_NV = 0x10000000UL,
	VK_PIPELINE_CREATE_2_DESCRIPTOR_BUFFER_BIT_EXT = 0x20000000UL,
	VK_PIPELINE_CREATE_2_DISALLOW_OPACITY_MICROMAP_BIT_ARM = 0x2000000000UL,
	VK_PIPELINE_CREATE_2_CAPTURE_DATA_BIT_KHR = 0x80000000UL,
	VK_PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_EXT = 0x4000000000UL,
}
enum : VkPipelineCreateFlagBits2 {
	VK_PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT,
	VK_PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT,
	VK_PIPELINE_CREATE_2_DERIVATIVE_BIT = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_DERIVATIVE_BIT,
	VK_PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT,
	VK_PIPELINE_CREATE_2_DISPATCH_BASE_BIT = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_DISPATCH_BASE_BIT,
	VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT,
	VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT,
	VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT,
	VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT,
	VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_BUILT_IN_PRIMITIVES_BIT_KHR = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_BUILT_IN_PRIMITIVES_BIT_KHR,
	VK_PIPELINE_CREATE_2_RAY_TRACING_ALLOW_SPHERES_AND_LINEAR_SWEPT_SPHERES_BIT_NV = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_RAY_TRACING_ALLOW_SPHERES_AND_LINEAR_SWEPT_SPHERES_BIT_NV,
	VK_PIPELINE_CREATE_2_ENABLE_LEGACY_DITHERING_BIT_EXT = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_ENABLE_LEGACY_DITHERING_BIT_EXT,
	VK_PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT_KHR = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT_KHR,
	VK_PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT_KHR = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT_KHR,
	VK_PIPELINE_CREATE_2_DERIVATIVE_BIT_KHR = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_DERIVATIVE_BIT_KHR,
	VK_PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR,
	VK_PIPELINE_CREATE_2_DISPATCH_BASE_BIT_KHR = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_DISPATCH_BASE_BIT_KHR,
	VK_PIPELINE_CREATE_2_DEFER_COMPILE_BIT_NV = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_DEFER_COMPILE_BIT_NV,
	VK_PIPELINE_CREATE_2_CAPTURE_STATISTICS_BIT_KHR = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_CAPTURE_STATISTICS_BIT_KHR,
	VK_PIPELINE_CREATE_2_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR,
	VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_KHR = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_KHR,
	VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT_KHR = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT_KHR,
	VK_PIPELINE_CREATE_2_LINK_TIME_OPTIMIZATION_BIT_EXT = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_LINK_TIME_OPTIMIZATION_BIT_EXT,
	VK_PIPELINE_CREATE_2_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT,
	VK_PIPELINE_CREATE_2_LIBRARY_BIT_KHR = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_LIBRARY_BIT_KHR,
	VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR,
	VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_AABBS_BIT_KHR = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_AABBS_BIT_KHR,
	VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR,
	VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR,
	VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR,
	VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR,
	VK_PIPELINE_CREATE_2_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR,
	VK_PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_NV = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_NV,
	VK_PIPELINE_CREATE_2_RAY_TRACING_ALLOW_MOTION_BIT_NV = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_RAY_TRACING_ALLOW_MOTION_BIT_NV,
	VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,
	VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT,
	VK_PIPELINE_CREATE_2_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT,
	VK_PIPELINE_CREATE_2_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT,
	VK_PIPELINE_CREATE_2_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT,
	VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT_EXT = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT_EXT,
	VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT_EXT = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT_EXT,
	VK_PIPELINE_CREATE_2_RAY_TRACING_DISPLACEMENT_MICROMAP_BIT_NV = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_RAY_TRACING_DISPLACEMENT_MICROMAP_BIT_NV,
	VK_PIPELINE_CREATE_2_DESCRIPTOR_BUFFER_BIT_EXT = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_DESCRIPTOR_BUFFER_BIT_EXT,
	VK_PIPELINE_CREATE_2_DISALLOW_OPACITY_MICROMAP_BIT_ARM = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_DISALLOW_OPACITY_MICROMAP_BIT_ARM,
	VK_PIPELINE_CREATE_2_CAPTURE_DATA_BIT_KHR = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_CAPTURE_DATA_BIT_KHR,
	VK_PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_EXT = VkPipelineCreateFlagBits2.VK_PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_EXT,
}
enum VkPipelineCreationFeedbackFlagBits {
	VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT = 0x00000001,
	VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT = 0x00000002,
	VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT = 0x00000004,
	VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT,
	VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT,
	VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT,
	VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkPipelineCreationFeedbackFlagBits {
	VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT = VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT,
	VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT = VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT,
	VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT = VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT,
	VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT,
	VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT,
	VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT,
	VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM = VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM,
}
enum VkPipelineDepthStencilStateCreateFlagBits {
	VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = 0x00000001,
	VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = 0x00000002,
	VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT,
	VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT,
	VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkPipelineDepthStencilStateCreateFlagBits {
	VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = VkPipelineDepthStencilStateCreateFlagBits.VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT,
	VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = VkPipelineDepthStencilStateCreateFlagBits.VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT,
	VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = VkPipelineDepthStencilStateCreateFlagBits.VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM,
	VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = VkPipelineDepthStencilStateCreateFlagBits.VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM,
	VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM = VkPipelineDepthStencilStateCreateFlagBits.VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM,
}
enum VkPipelineExecutableStatisticFormatKHR {
	VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0,
	VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1,
	VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2,
	VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3,
	VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkPipelineExecutableStatisticFormatKHR {
	VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR,
	VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR,
	VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR,
	VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR,
	VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR,
}
enum VkPipelineLayoutCreateFlagBits {
	VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT = 0x00000002,
	VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkPipelineLayoutCreateFlagBits {
	VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT = VkPipelineLayoutCreateFlagBits.VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT,
	VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = VkPipelineLayoutCreateFlagBits.VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM,
}
enum VkPipelineRobustnessBufferBehavior {
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT = 0,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED = 1,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS = 2,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2 = 3,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT = VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT = VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT = VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT = VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkPipelineRobustnessBufferBehavior {
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT = VkPipelineRobustnessBufferBehavior.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED = VkPipelineRobustnessBufferBehavior.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS = VkPipelineRobustnessBufferBehavior.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2 = VkPipelineRobustnessBufferBehavior.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT = VkPipelineRobustnessBufferBehavior.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT = VkPipelineRobustnessBufferBehavior.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT = VkPipelineRobustnessBufferBehavior.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT = VkPipelineRobustnessBufferBehavior.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM = VkPipelineRobustnessBufferBehavior.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM,
}
enum VkPipelineRobustnessImageBehavior {
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT = 0,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED = 1,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS = 2,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2 = 3,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT = VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT = VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT = VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT = VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkPipelineRobustnessImageBehavior {
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT = VkPipelineRobustnessImageBehavior.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED = VkPipelineRobustnessImageBehavior.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS = VkPipelineRobustnessImageBehavior.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2 = VkPipelineRobustnessImageBehavior.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT = VkPipelineRobustnessImageBehavior.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT = VkPipelineRobustnessImageBehavior.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT = VkPipelineRobustnessImageBehavior.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT = VkPipelineRobustnessImageBehavior.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM = VkPipelineRobustnessImageBehavior.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM,
}
enum VkPipelineShaderStageCreateFlagBits {
	VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT = 0x00000001,
	VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT = 0x00000002,
	VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT,
	VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT,
	VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkPipelineShaderStageCreateFlagBits {
	VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT = VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT,
	VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT = VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT,
	VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT,
	VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT,
	VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM,
}
enum VkPipelineStageFlagBits {
	VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 0x00000001,
	VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 0x00000002,
	VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 0x00000004,
	VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 0x00000008,
	VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 0x00000010,
	VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 0x00000020,
	VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 0x00000040,
	VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 0x00000080,
	VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 0x00000100,
	VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 0x00000200,
	VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 0x00000400,
	VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 0x00000800,
	VK_PIPELINE_STAGE_TRANSFER_BIT = 0x00001000,
	VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 0x00002000,
	VK_PIPELINE_STAGE_HOST_BIT = 0x00004000,
	VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 0x00008000,
	VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 0x00010000,
	VK_PIPELINE_STAGE_NONE = 0,
	VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 0x01000000,
	VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 0x00040000,
	VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 0x02000000,
	VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 0x00200000,
	VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 0x00800000,
	VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0x00400000,
	VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 0x00020000,
	VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT = 0x00080000,
	VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT = 0x00100000,
	VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,
	VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR,
	VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR,
	VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT,
	VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT,
	VK_PIPELINE_STAGE_NONE_KHR = VK_PIPELINE_STAGE_NONE,
	VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_EXT = VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV,
	VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkPipelineStageFlagBits {
	VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT,
	VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT,
	VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_VERTEX_INPUT_BIT,
	VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_VERTEX_SHADER_BIT,
	VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT,
	VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT,
	VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT,
	VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT,
	VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT,
	VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT,
	VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT,
	VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT,
	VK_PIPELINE_STAGE_TRANSFER_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TRANSFER_BIT,
	VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT,
	VK_PIPELINE_STAGE_HOST_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_HOST_BIT,
	VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT,
	VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_ALL_COMMANDS_BIT,
	VK_PIPELINE_STAGE_NONE = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_NONE,
	VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT,
	VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT,
	VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR,
	VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR,
	VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT,
	VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,
	VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV,
	VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT,
	VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT,
	VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV,
	VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV,
	VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV,
	VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV,
	VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV,
	VK_PIPELINE_STAGE_NONE_KHR = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_NONE_KHR,
	VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_EXT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_EXT,
	VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM,
}
enum VkPipelineStageFlagBits2 {
	VK_PIPELINE_STAGE_2_NONE = 0UL,
	VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT = 0x00000001UL,
	VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT = 0x00000002UL,
	VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT = 0x00000004UL,
	VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT = 0x00000008UL,
	VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT = 0x00000010UL,
	VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT = 0x00000020UL,
	VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT = 0x00000040UL,
	VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT = 0x00000080UL,
	VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT = 0x00000100UL,
	VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT = 0x00000200UL,
	VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT = 0x00000400UL,
	VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT = 0x00000800UL,
	VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT = 0x00001000UL,
	VK_PIPELINE_STAGE_2_TRANSFER_BIT = 0x00001000UL,
	VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT = 0x00002000UL,
	VK_PIPELINE_STAGE_2_HOST_BIT = 0x00004000UL,
	VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT = 0x00008000UL,
	VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT = 0x00010000UL,
	VK_PIPELINE_STAGE_2_COPY_BIT = 0x100000000UL,
	VK_PIPELINE_STAGE_2_RESOLVE_BIT = 0x200000000UL,
	VK_PIPELINE_STAGE_2_BLIT_BIT = 0x400000000UL,
	VK_PIPELINE_STAGE_2_CLEAR_BIT = 0x800000000UL,
	VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT = 0x1000000000UL,
	VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT = 0x2000000000UL,
	VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT = 0x4000000000UL,
	VK_PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR = 0x04000000UL,
	VK_PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR = 0x08000000UL,
	VK_PIPELINE_STAGE_2_NONE_KHR = 0UL,
	VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR = 0x00000001UL,
	VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR = 0x00000002UL,
	VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR = 0x00000004UL,
	VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR = 0x00000008UL,
	VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR = 0x00000010UL,
	VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR = 0x00000020UL,
	VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR = 0x00000040UL,
	VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR = 0x00000080UL,
	VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR = 0x00000100UL,
	VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR = 0x00000200UL,
	VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR = 0x00000400UL,
	VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR = 0x00000800UL,
	VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR = 0x00001000UL,
	VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR = 0x00001000UL,
	VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR = 0x00002000UL,
	VK_PIPELINE_STAGE_2_HOST_BIT_KHR = 0x00004000UL,
	VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR = 0x00008000UL,
	VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR = 0x00010000UL,
	VK_PIPELINE_STAGE_2_COPY_BIT_KHR = 0x100000000UL,
	VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR = 0x200000000UL,
	VK_PIPELINE_STAGE_2_BLIT_BIT_KHR = 0x400000000UL,
	VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR = 0x800000000UL,
	VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR = 0x1000000000UL,
	VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR = 0x2000000000UL,
	VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR = 0x4000000000UL,
	VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT = 0x01000000UL,
	VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT = 0x00040000UL,
	VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV = 0x00020000UL,
	VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_EXT = 0x00020000UL,
	VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0x00400000UL,
	VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV = 0x00400000UL,
	VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 0x02000000UL,
	VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR = 0x00200000UL,
	VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV = 0x00200000UL,
	VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV = 0x02000000UL,
	VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 0x00800000UL,
	VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV = 0x00080000UL,
	VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV = 0x00100000UL,
	VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT = 0x00080000UL,
	VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT = 0x00100000UL,
	VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI = 0x8000000000UL,
	VK_PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI = 0x8000000000UL,
	VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI = 0x10000000000UL,
	VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR = 0x10000000UL,
	VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT = 0x40000000UL,
	VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI = 0x20000000000UL,
	VK_PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV = 0x20000000UL,
	VK_PIPELINE_STAGE_2_CONVERT_COOPERATIVE_VECTOR_MATRIX_BIT_NV = 0x100000000000UL,
}
enum : VkPipelineStageFlagBits2 {
	VK_PIPELINE_STAGE_2_NONE = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_NONE,
	VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT,
	VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT,
	VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT,
	VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT,
	VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT,
	VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT,
	VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT,
	VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT,
	VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT,
	VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT,
	VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT,
	VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT,
	VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT,
	VK_PIPELINE_STAGE_2_TRANSFER_BIT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_TRANSFER_BIT,
	VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT,
	VK_PIPELINE_STAGE_2_HOST_BIT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_HOST_BIT,
	VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT,
	VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT,
	VK_PIPELINE_STAGE_2_COPY_BIT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_COPY_BIT,
	VK_PIPELINE_STAGE_2_RESOLVE_BIT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_RESOLVE_BIT,
	VK_PIPELINE_STAGE_2_BLIT_BIT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_BLIT_BIT,
	VK_PIPELINE_STAGE_2_CLEAR_BIT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_CLEAR_BIT,
	VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT,
	VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT,
	VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT,
	VK_PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR,
	VK_PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR,
	VK_PIPELINE_STAGE_2_NONE_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_NONE_KHR,
	VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR,
	VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR,
	VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR,
	VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR,
	VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR,
	VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR,
	VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR,
	VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR,
	VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR,
	VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR,
	VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR,
	VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR,
	VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR,
	VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR,
	VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR,
	VK_PIPELINE_STAGE_2_HOST_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_HOST_BIT_KHR,
	VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR,
	VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR,
	VK_PIPELINE_STAGE_2_COPY_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_COPY_BIT_KHR,
	VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR,
	VK_PIPELINE_STAGE_2_BLIT_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_BLIT_BIT_KHR,
	VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR,
	VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR,
	VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR,
	VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR,
	VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT,
	VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT,
	VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV,
	VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_EXT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_EXT,
	VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,
	VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV,
	VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR,
	VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR,
	VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV,
	VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV,
	VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT,
	VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV,
	VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV,
	VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT,
	VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT,
	VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI,
	VK_PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI,
	VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI,
	VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR,
	VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT,
	VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI,
	VK_PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV,
	VK_PIPELINE_STAGE_2_CONVERT_COOPERATIVE_VECTOR_MATRIX_BIT_NV = VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_CONVERT_COOPERATIVE_VECTOR_MATRIX_BIT_NV,
}
enum VkPointClippingBehavior {
	VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0,
	VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1,
	VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES,
	VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY,
	VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkPointClippingBehavior {
	VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES,
	VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY,
	VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR,
	VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR,
	VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM = VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM,
}
enum VkPolygonMode {
	VK_POLYGON_MODE_FILL = 0,
	VK_POLYGON_MODE_LINE = 1,
	VK_POLYGON_MODE_POINT = 2,
	VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000,
	VK_POLYGON_MODE_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkPolygonMode {
	VK_POLYGON_MODE_FILL = VkPolygonMode.VK_POLYGON_MODE_FILL,
	VK_POLYGON_MODE_LINE = VkPolygonMode.VK_POLYGON_MODE_LINE,
	VK_POLYGON_MODE_POINT = VkPolygonMode.VK_POLYGON_MODE_POINT,
	VK_POLYGON_MODE_FILL_RECTANGLE_NV = VkPolygonMode.VK_POLYGON_MODE_FILL_RECTANGLE_NV,
	VK_POLYGON_MODE_MAX_ENUM = VkPolygonMode.VK_POLYGON_MODE_MAX_ENUM,
}
enum VkPresentGravityFlagBitsEXT {
	VK_PRESENT_GRAVITY_MIN_BIT_EXT = 0x00000001,
	VK_PRESENT_GRAVITY_MAX_BIT_EXT = 0x00000002,
	VK_PRESENT_GRAVITY_CENTERED_BIT_EXT = 0x00000004,
	VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkPresentGravityFlagBitsEXT {
	VK_PRESENT_GRAVITY_MIN_BIT_EXT = VkPresentGravityFlagBitsEXT.VK_PRESENT_GRAVITY_MIN_BIT_EXT,
	VK_PRESENT_GRAVITY_MAX_BIT_EXT = VkPresentGravityFlagBitsEXT.VK_PRESENT_GRAVITY_MAX_BIT_EXT,
	VK_PRESENT_GRAVITY_CENTERED_BIT_EXT = VkPresentGravityFlagBitsEXT.VK_PRESENT_GRAVITY_CENTERED_BIT_EXT,
	VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT = VkPresentGravityFlagBitsEXT.VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT,
}
enum VkPresentModeKHR {
	VK_PRESENT_MODE_IMMEDIATE_KHR = 0,
	VK_PRESENT_MODE_MAILBOX_KHR = 1,
	VK_PRESENT_MODE_FIFO_KHR = 2,
	VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3,
	VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000,
	VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001,
	VK_PRESENT_MODE_FIFO_LATEST_READY_EXT = 1000361000,
	VK_PRESENT_MODE_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkPresentModeKHR {
	VK_PRESENT_MODE_IMMEDIATE_KHR = VkPresentModeKHR.VK_PRESENT_MODE_IMMEDIATE_KHR,
	VK_PRESENT_MODE_MAILBOX_KHR = VkPresentModeKHR.VK_PRESENT_MODE_MAILBOX_KHR,
	VK_PRESENT_MODE_FIFO_KHR = VkPresentModeKHR.VK_PRESENT_MODE_FIFO_KHR,
	VK_PRESENT_MODE_FIFO_RELAXED_KHR = VkPresentModeKHR.VK_PRESENT_MODE_FIFO_RELAXED_KHR,
	VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = VkPresentModeKHR.VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR,
	VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = VkPresentModeKHR.VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR,
	VK_PRESENT_MODE_FIFO_LATEST_READY_EXT = VkPresentModeKHR.VK_PRESENT_MODE_FIFO_LATEST_READY_EXT,
	VK_PRESENT_MODE_MAX_ENUM_KHR = VkPresentModeKHR.VK_PRESENT_MODE_MAX_ENUM_KHR,
}
enum VkPresentScalingFlagBitsEXT {
	VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT = 0x00000001,
	VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT = 0x00000002,
	VK_PRESENT_SCALING_STRETCH_BIT_EXT = 0x00000004,
	VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkPresentScalingFlagBitsEXT {
	VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT = VkPresentScalingFlagBitsEXT.VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT,
	VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT = VkPresentScalingFlagBitsEXT.VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT,
	VK_PRESENT_SCALING_STRETCH_BIT_EXT = VkPresentScalingFlagBitsEXT.VK_PRESENT_SCALING_STRETCH_BIT_EXT,
	VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT = VkPresentScalingFlagBitsEXT.VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT,
}
enum VkPrimitiveTopology {
	VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
	VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
	VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
	VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
	VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
	VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10,
	VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkPrimitiveTopology {
	VK_PRIMITIVE_TOPOLOGY_POINT_LIST = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_POINT_LIST,
	VK_PRIMITIVE_TOPOLOGY_LINE_LIST = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_LIST,
	VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_STRIP,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN,
	VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY,
	VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY,
	VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_PATCH_LIST,
	VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_MAX_ENUM,
}
enum VkProvokingVertexModeEXT {
	VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT = 0,
	VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT = 1,
	VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkProvokingVertexModeEXT {
	VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT = VkProvokingVertexModeEXT.VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT,
	VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT = VkProvokingVertexModeEXT.VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT,
	VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT = VkProvokingVertexModeEXT.VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT,
}
enum VkQueryControlFlagBits {
	VK_QUERY_CONTROL_PRECISE_BIT = 0x00000001,
	VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkQueryControlFlagBits {
	VK_QUERY_CONTROL_PRECISE_BIT = VkQueryControlFlagBits.VK_QUERY_CONTROL_PRECISE_BIT,
	VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = VkQueryControlFlagBits.VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM,
}
enum VkQueryPipelineStatisticFlagBits {
	VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 0x00000001,
	VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 0x00000002,
	VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 0x00000004,
	VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 0x00000008,
	VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 0x00000010,
	VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 0x00000020,
	VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 0x00000040,
	VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 0x00000080,
	VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 0x00000100,
	VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 0x00000200,
	VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 0x00000400,
	VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT = 0x00000800,
	VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT = 0x00001000,
	VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI = 0x00002000,
	VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkQueryPipelineStatisticFlagBits {
	VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT,
	VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT,
	VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT,
	VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT,
	VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT,
	VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT,
	VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT,
	VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT,
	VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT,
	VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT,
	VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT,
	VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT,
	VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT,
	VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI,
	VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM,
}
enum VkQueryPoolSamplingModeINTEL {
	VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0,
	VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = 0x7FFFFFFF,
}
enum : VkQueryPoolSamplingModeINTEL {
	VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = VkQueryPoolSamplingModeINTEL.VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL,
	VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = VkQueryPoolSamplingModeINTEL.VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL,
}
enum VkQueryResultFlagBits {
	VK_QUERY_RESULT_64_BIT = 0x00000001,
	VK_QUERY_RESULT_WAIT_BIT = 0x00000002,
	VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 0x00000004,
	VK_QUERY_RESULT_PARTIAL_BIT = 0x00000008,
	VK_QUERY_RESULT_WITH_STATUS_BIT_KHR = 0x00000010,
	VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkQueryResultFlagBits {
	VK_QUERY_RESULT_64_BIT = VkQueryResultFlagBits.VK_QUERY_RESULT_64_BIT,
	VK_QUERY_RESULT_WAIT_BIT = VkQueryResultFlagBits.VK_QUERY_RESULT_WAIT_BIT,
	VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = VkQueryResultFlagBits.VK_QUERY_RESULT_WITH_AVAILABILITY_BIT,
	VK_QUERY_RESULT_PARTIAL_BIT = VkQueryResultFlagBits.VK_QUERY_RESULT_PARTIAL_BIT,
	VK_QUERY_RESULT_WITH_STATUS_BIT_KHR = VkQueryResultFlagBits.VK_QUERY_RESULT_WITH_STATUS_BIT_KHR,
	VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = VkQueryResultFlagBits.VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM,
}
enum VkQueryResultStatusKHR {
	VK_QUERY_RESULT_STATUS_ERROR_KHR = -1,
	VK_QUERY_RESULT_STATUS_NOT_READY_KHR = 0,
	VK_QUERY_RESULT_STATUS_COMPLETE_KHR = 1,
	VK_QUERY_RESULT_STATUS_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_KHR = -1000299000,
	VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkQueryResultStatusKHR {
	VK_QUERY_RESULT_STATUS_ERROR_KHR = VkQueryResultStatusKHR.VK_QUERY_RESULT_STATUS_ERROR_KHR,
	VK_QUERY_RESULT_STATUS_NOT_READY_KHR = VkQueryResultStatusKHR.VK_QUERY_RESULT_STATUS_NOT_READY_KHR,
	VK_QUERY_RESULT_STATUS_COMPLETE_KHR = VkQueryResultStatusKHR.VK_QUERY_RESULT_STATUS_COMPLETE_KHR,
	VK_QUERY_RESULT_STATUS_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_KHR = VkQueryResultStatusKHR.VK_QUERY_RESULT_STATUS_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_KHR,
	VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR = VkQueryResultStatusKHR.VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR,
}
enum VkQueryType {
	VK_QUERY_TYPE_OCCLUSION = 0,
	VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,
	VK_QUERY_TYPE_TIMESTAMP = 2,
	VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR = 1000023000,
	VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004,
	VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000,
	VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000150000,
	VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150001,
	VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000,
	VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000,
	VK_QUERY_TYPE_VIDEO_ENCODE_FEEDBACK_KHR = 1000299000,
	VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT = 1000328000,
	VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT = 1000382000,
	VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR = 1000386000,
	VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR = 1000386001,
	VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT = 1000396000,
	VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT = 1000396001,
	VK_QUERY_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkQueryType {
	VK_QUERY_TYPE_OCCLUSION = VkQueryType.VK_QUERY_TYPE_OCCLUSION,
	VK_QUERY_TYPE_PIPELINE_STATISTICS = VkQueryType.VK_QUERY_TYPE_PIPELINE_STATISTICS,
	VK_QUERY_TYPE_TIMESTAMP = VkQueryType.VK_QUERY_TYPE_TIMESTAMP,
	VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR = VkQueryType.VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR,
	VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = VkQueryType.VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT,
	VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR = VkQueryType.VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR,
	VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = VkQueryType.VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR,
	VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = VkQueryType.VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR,
	VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = VkQueryType.VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV,
	VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = VkQueryType.VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL,
	VK_QUERY_TYPE_VIDEO_ENCODE_FEEDBACK_KHR = VkQueryType.VK_QUERY_TYPE_VIDEO_ENCODE_FEEDBACK_KHR,
	VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT = VkQueryType.VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT,
	VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT = VkQueryType.VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT,
	VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR = VkQueryType.VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR,
	VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR = VkQueryType.VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR,
	VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT = VkQueryType.VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT,
	VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT = VkQueryType.VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT,
	VK_QUERY_TYPE_MAX_ENUM = VkQueryType.VK_QUERY_TYPE_MAX_ENUM,
}
enum VkQueueFlagBits {
	VK_QUEUE_GRAPHICS_BIT = 0x00000001,
	VK_QUEUE_COMPUTE_BIT = 0x00000002,
	VK_QUEUE_TRANSFER_BIT = 0x00000004,
	VK_QUEUE_SPARSE_BINDING_BIT = 0x00000008,
	VK_QUEUE_PROTECTED_BIT = 0x00000010,
	VK_QUEUE_VIDEO_DECODE_BIT_KHR = 0x00000020,
	VK_QUEUE_VIDEO_ENCODE_BIT_KHR = 0x00000040,
	VK_QUEUE_OPTICAL_FLOW_BIT_NV = 0x00000100,
	VK_QUEUE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkQueueFlagBits {
	VK_QUEUE_GRAPHICS_BIT = VkQueueFlagBits.VK_QUEUE_GRAPHICS_BIT,
	VK_QUEUE_COMPUTE_BIT = VkQueueFlagBits.VK_QUEUE_COMPUTE_BIT,
	VK_QUEUE_TRANSFER_BIT = VkQueueFlagBits.VK_QUEUE_TRANSFER_BIT,
	VK_QUEUE_SPARSE_BINDING_BIT = VkQueueFlagBits.VK_QUEUE_SPARSE_BINDING_BIT,
	VK_QUEUE_PROTECTED_BIT = VkQueueFlagBits.VK_QUEUE_PROTECTED_BIT,
	VK_QUEUE_VIDEO_DECODE_BIT_KHR = VkQueueFlagBits.VK_QUEUE_VIDEO_DECODE_BIT_KHR,
	VK_QUEUE_VIDEO_ENCODE_BIT_KHR = VkQueueFlagBits.VK_QUEUE_VIDEO_ENCODE_BIT_KHR,
	VK_QUEUE_OPTICAL_FLOW_BIT_NV = VkQueueFlagBits.VK_QUEUE_OPTICAL_FLOW_BIT_NV,
	VK_QUEUE_FLAG_BITS_MAX_ENUM = VkQueueFlagBits.VK_QUEUE_FLAG_BITS_MAX_ENUM,
}
enum VkQueueGlobalPriority {
	VK_QUEUE_GLOBAL_PRIORITY_LOW = 128,
	VK_QUEUE_GLOBAL_PRIORITY_MEDIUM = 256,
	VK_QUEUE_GLOBAL_PRIORITY_HIGH = 512,
	VK_QUEUE_GLOBAL_PRIORITY_REALTIME = 1024,
	VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = VK_QUEUE_GLOBAL_PRIORITY_LOW,
	VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = VK_QUEUE_GLOBAL_PRIORITY_MEDIUM,
	VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = VK_QUEUE_GLOBAL_PRIORITY_HIGH,
	VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = VK_QUEUE_GLOBAL_PRIORITY_REALTIME,
	VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR = VK_QUEUE_GLOBAL_PRIORITY_LOW,
	VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR = VK_QUEUE_GLOBAL_PRIORITY_MEDIUM,
	VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR = VK_QUEUE_GLOBAL_PRIORITY_HIGH,
	VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR = VK_QUEUE_GLOBAL_PRIORITY_REALTIME,
	VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkQueueGlobalPriority {
	VK_QUEUE_GLOBAL_PRIORITY_LOW = VkQueueGlobalPriority.VK_QUEUE_GLOBAL_PRIORITY_LOW,
	VK_QUEUE_GLOBAL_PRIORITY_MEDIUM = VkQueueGlobalPriority.VK_QUEUE_GLOBAL_PRIORITY_MEDIUM,
	VK_QUEUE_GLOBAL_PRIORITY_HIGH = VkQueueGlobalPriority.VK_QUEUE_GLOBAL_PRIORITY_HIGH,
	VK_QUEUE_GLOBAL_PRIORITY_REALTIME = VkQueueGlobalPriority.VK_QUEUE_GLOBAL_PRIORITY_REALTIME,
	VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = VkQueueGlobalPriority.VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT,
	VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = VkQueueGlobalPriority.VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT,
	VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = VkQueueGlobalPriority.VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT,
	VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = VkQueueGlobalPriority.VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT,
	VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR = VkQueueGlobalPriority.VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR,
	VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR = VkQueueGlobalPriority.VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR,
	VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR = VkQueueGlobalPriority.VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR,
	VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR = VkQueueGlobalPriority.VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR,
	VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM = VkQueueGlobalPriority.VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM,
}
enum VkRasterizationOrderAMD {
	VK_RASTERIZATION_ORDER_STRICT_AMD = 0,
	VK_RASTERIZATION_ORDER_RELAXED_AMD = 1,
	VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = 0x7FFFFFFF,
}
enum : VkRasterizationOrderAMD {
	VK_RASTERIZATION_ORDER_STRICT_AMD = VkRasterizationOrderAMD.VK_RASTERIZATION_ORDER_STRICT_AMD,
	VK_RASTERIZATION_ORDER_RELAXED_AMD = VkRasterizationOrderAMD.VK_RASTERIZATION_ORDER_RELAXED_AMD,
	VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = VkRasterizationOrderAMD.VK_RASTERIZATION_ORDER_MAX_ENUM_AMD,
}
enum VkRayTracingInvocationReorderModeNV {
	VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV = 0,
	VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV = 1,
	VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkRayTracingInvocationReorderModeNV {
	VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV = VkRayTracingInvocationReorderModeNV.VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV,
	VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV = VkRayTracingInvocationReorderModeNV.VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV,
	VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV = VkRayTracingInvocationReorderModeNV.VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV,
}
enum VkRayTracingLssIndexingModeNV {
	VK_RAY_TRACING_LSS_INDEXING_MODE_LIST_NV = 0,
	VK_RAY_TRACING_LSS_INDEXING_MODE_SUCCESSIVE_NV = 1,
	VK_RAY_TRACING_LSS_INDEXING_MODE_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkRayTracingLssIndexingModeNV {
	VK_RAY_TRACING_LSS_INDEXING_MODE_LIST_NV = VkRayTracingLssIndexingModeNV.VK_RAY_TRACING_LSS_INDEXING_MODE_LIST_NV,
	VK_RAY_TRACING_LSS_INDEXING_MODE_SUCCESSIVE_NV = VkRayTracingLssIndexingModeNV.VK_RAY_TRACING_LSS_INDEXING_MODE_SUCCESSIVE_NV,
	VK_RAY_TRACING_LSS_INDEXING_MODE_MAX_ENUM_NV = VkRayTracingLssIndexingModeNV.VK_RAY_TRACING_LSS_INDEXING_MODE_MAX_ENUM_NV,
}
enum VkRayTracingLssPrimitiveEndCapsModeNV {
	VK_RAY_TRACING_LSS_PRIMITIVE_END_CAPS_MODE_NONE_NV = 0,
	VK_RAY_TRACING_LSS_PRIMITIVE_END_CAPS_MODE_CHAINED_NV = 1,
	VK_RAY_TRACING_LSS_PRIMITIVE_END_CAPS_MODE_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkRayTracingLssPrimitiveEndCapsModeNV {
	VK_RAY_TRACING_LSS_PRIMITIVE_END_CAPS_MODE_NONE_NV = VkRayTracingLssPrimitiveEndCapsModeNV.VK_RAY_TRACING_LSS_PRIMITIVE_END_CAPS_MODE_NONE_NV,
	VK_RAY_TRACING_LSS_PRIMITIVE_END_CAPS_MODE_CHAINED_NV = VkRayTracingLssPrimitiveEndCapsModeNV.VK_RAY_TRACING_LSS_PRIMITIVE_END_CAPS_MODE_CHAINED_NV,
	VK_RAY_TRACING_LSS_PRIMITIVE_END_CAPS_MODE_MAX_ENUM_NV = VkRayTracingLssPrimitiveEndCapsModeNV.VK_RAY_TRACING_LSS_PRIMITIVE_END_CAPS_MODE_MAX_ENUM_NV,
}
enum VkRayTracingShaderGroupTypeKHR {
	VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0,
	VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1,
	VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2,
	VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR,
	VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR,
	VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR,
	VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkRayTracingShaderGroupTypeKHR {
	VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR,
	VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR,
	VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR,
	VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV,
	VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV,
	VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV,
	VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR = VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR,
}
enum VkRenderPassCreateFlagBits {
	VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 0x00000002,
	VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkRenderPassCreateFlagBits {
	VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = VkRenderPassCreateFlagBits.VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM,
	VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = VkRenderPassCreateFlagBits.VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM,
}
enum VkRenderingFlagBits {
	VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT = 0x00000001,
	VK_RENDERING_SUSPENDING_BIT = 0x00000002,
	VK_RENDERING_RESUMING_BIT = 0x00000004,
	VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT = 0x00000008,
	VK_RENDERING_CONTENTS_INLINE_BIT_KHR = 0x00000010,
	VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR = VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT,
	VK_RENDERING_SUSPENDING_BIT_KHR = VK_RENDERING_SUSPENDING_BIT,
	VK_RENDERING_RESUMING_BIT_KHR = VK_RENDERING_RESUMING_BIT,
	VK_RENDERING_CONTENTS_INLINE_BIT_EXT = VK_RENDERING_CONTENTS_INLINE_BIT_KHR,
	VK_RENDERING_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkRenderingFlagBits {
	VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT = VkRenderingFlagBits.VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT,
	VK_RENDERING_SUSPENDING_BIT = VkRenderingFlagBits.VK_RENDERING_SUSPENDING_BIT,
	VK_RENDERING_RESUMING_BIT = VkRenderingFlagBits.VK_RENDERING_RESUMING_BIT,
	VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT = VkRenderingFlagBits.VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT,
	VK_RENDERING_CONTENTS_INLINE_BIT_KHR = VkRenderingFlagBits.VK_RENDERING_CONTENTS_INLINE_BIT_KHR,
	VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR = VkRenderingFlagBits.VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR,
	VK_RENDERING_SUSPENDING_BIT_KHR = VkRenderingFlagBits.VK_RENDERING_SUSPENDING_BIT_KHR,
	VK_RENDERING_RESUMING_BIT_KHR = VkRenderingFlagBits.VK_RENDERING_RESUMING_BIT_KHR,
	VK_RENDERING_CONTENTS_INLINE_BIT_EXT = VkRenderingFlagBits.VK_RENDERING_CONTENTS_INLINE_BIT_EXT,
	VK_RENDERING_FLAG_BITS_MAX_ENUM = VkRenderingFlagBits.VK_RENDERING_FLAG_BITS_MAX_ENUM,
}
enum VkResolveModeFlagBits {
	VK_RESOLVE_MODE_NONE = 0,
	VK_RESOLVE_MODE_SAMPLE_ZERO_BIT = 0x00000001,
	VK_RESOLVE_MODE_AVERAGE_BIT = 0x00000002,
	VK_RESOLVE_MODE_MIN_BIT = 0x00000004,
	VK_RESOLVE_MODE_MAX_BIT = 0x00000008,
	VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID = 0x00000010,
	VK_RESOLVE_MODE_NONE_KHR = VK_RESOLVE_MODE_NONE,
	VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = VK_RESOLVE_MODE_SAMPLE_ZERO_BIT,
	VK_RESOLVE_MODE_AVERAGE_BIT_KHR = VK_RESOLVE_MODE_AVERAGE_BIT,
	VK_RESOLVE_MODE_MIN_BIT_KHR = VK_RESOLVE_MODE_MIN_BIT,
	VK_RESOLVE_MODE_MAX_BIT_KHR = VK_RESOLVE_MODE_MAX_BIT,
	VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkResolveModeFlagBits {
	VK_RESOLVE_MODE_NONE = VkResolveModeFlagBits.VK_RESOLVE_MODE_NONE,
	VK_RESOLVE_MODE_SAMPLE_ZERO_BIT = VkResolveModeFlagBits.VK_RESOLVE_MODE_SAMPLE_ZERO_BIT,
	VK_RESOLVE_MODE_AVERAGE_BIT = VkResolveModeFlagBits.VK_RESOLVE_MODE_AVERAGE_BIT,
	VK_RESOLVE_MODE_MIN_BIT = VkResolveModeFlagBits.VK_RESOLVE_MODE_MIN_BIT,
	VK_RESOLVE_MODE_MAX_BIT = VkResolveModeFlagBits.VK_RESOLVE_MODE_MAX_BIT,
	VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID = VkResolveModeFlagBits.VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID,
	VK_RESOLVE_MODE_NONE_KHR = VkResolveModeFlagBits.VK_RESOLVE_MODE_NONE_KHR,
	VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = VkResolveModeFlagBits.VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR,
	VK_RESOLVE_MODE_AVERAGE_BIT_KHR = VkResolveModeFlagBits.VK_RESOLVE_MODE_AVERAGE_BIT_KHR,
	VK_RESOLVE_MODE_MIN_BIT_KHR = VkResolveModeFlagBits.VK_RESOLVE_MODE_MIN_BIT_KHR,
	VK_RESOLVE_MODE_MAX_BIT_KHR = VkResolveModeFlagBits.VK_RESOLVE_MODE_MAX_BIT_KHR,
	VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM = VkResolveModeFlagBits.VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM,
}
enum VkResult {
	VK_SUCCESS = 0,
	VK_NOT_READY = 1,
	VK_TIMEOUT = 2,
	VK_EVENT_SET = 3,
	VK_EVENT_RESET = 4,
	VK_INCOMPLETE = 5,
	VK_ERROR_OUT_OF_HOST_MEMORY = -1,
	VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,
	VK_ERROR_INITIALIZATION_FAILED = -3,
	VK_ERROR_DEVICE_LOST = -4,
	VK_ERROR_MEMORY_MAP_FAILED = -5,
	VK_ERROR_LAYER_NOT_PRESENT = -6,
	VK_ERROR_EXTENSION_NOT_PRESENT = -7,
	VK_ERROR_FEATURE_NOT_PRESENT = -8,
	VK_ERROR_INCOMPATIBLE_DRIVER = -9,
	VK_ERROR_TOO_MANY_OBJECTS = -10,
	VK_ERROR_FORMAT_NOT_SUPPORTED = -11,
	VK_ERROR_FRAGMENTED_POOL = -12,
	VK_ERROR_UNKNOWN = -13,
	VK_ERROR_OUT_OF_POOL_MEMORY = -1000069000,
	VK_ERROR_INVALID_EXTERNAL_HANDLE = -1000072003,
	VK_ERROR_FRAGMENTATION = -1000161000,
	VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = -1000257000,
	VK_PIPELINE_COMPILE_REQUIRED = 1000297000,
	VK_ERROR_NOT_PERMITTED = -1000174001,
	VK_ERROR_SURFACE_LOST_KHR = -1000000000,
	VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,
	VK_SUBOPTIMAL_KHR = 1000001003,
	VK_ERROR_OUT_OF_DATE_KHR = -1000001004,
	VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,
	VK_ERROR_VALIDATION_FAILED_EXT = -1000011001,
	VK_ERROR_INVALID_SHADER_NV = -1000012000,
	VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR = -1000023000,
	VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR = -1000023001,
	VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR = -1000023002,
	VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR = -1000023003,
	VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR = -1000023004,
	VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR = -1000023005,
	VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000,
	VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000,
	VK_THREAD_IDLE_KHR = 1000268000,
	VK_THREAD_DONE_KHR = 1000268001,
	VK_OPERATION_DEFERRED_KHR = 1000268002,
	VK_OPERATION_NOT_DEFERRED_KHR = 1000268003,
	VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR = -1000299000,
	VK_ERROR_COMPRESSION_EXHAUSTED_EXT = -1000338000,
	VK_INCOMPATIBLE_SHADER_BINARY_EXT = 1000482000,
	VK_PIPELINE_BINARY_MISSING_KHR = 1000483000,
	VK_ERROR_NOT_ENOUGH_SPACE_KHR = -1000483000,
	VK_ERROR_OUT_OF_POOL_MEMORY_KHR = VK_ERROR_OUT_OF_POOL_MEMORY,
	VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = VK_ERROR_INVALID_EXTERNAL_HANDLE,
	VK_ERROR_FRAGMENTATION_EXT = VK_ERROR_FRAGMENTATION,
	VK_ERROR_NOT_PERMITTED_EXT = VK_ERROR_NOT_PERMITTED,
	VK_ERROR_NOT_PERMITTED_KHR = VK_ERROR_NOT_PERMITTED,
	VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
	VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
	VK_PIPELINE_COMPILE_REQUIRED_EXT = VK_PIPELINE_COMPILE_REQUIRED,
	VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT = VK_PIPELINE_COMPILE_REQUIRED,
	VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT = VK_INCOMPATIBLE_SHADER_BINARY_EXT,
	VK_RESULT_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkResult {
	VK_SUCCESS = VkResult.VK_SUCCESS,
	VK_NOT_READY = VkResult.VK_NOT_READY,
	VK_TIMEOUT = VkResult.VK_TIMEOUT,
	VK_EVENT_SET = VkResult.VK_EVENT_SET,
	VK_EVENT_RESET = VkResult.VK_EVENT_RESET,
	VK_INCOMPLETE = VkResult.VK_INCOMPLETE,
	VK_ERROR_OUT_OF_HOST_MEMORY = VkResult.VK_ERROR_OUT_OF_HOST_MEMORY,
	VK_ERROR_OUT_OF_DEVICE_MEMORY = VkResult.VK_ERROR_OUT_OF_DEVICE_MEMORY,
	VK_ERROR_INITIALIZATION_FAILED = VkResult.VK_ERROR_INITIALIZATION_FAILED,
	VK_ERROR_DEVICE_LOST = VkResult.VK_ERROR_DEVICE_LOST,
	VK_ERROR_MEMORY_MAP_FAILED = VkResult.VK_ERROR_MEMORY_MAP_FAILED,
	VK_ERROR_LAYER_NOT_PRESENT = VkResult.VK_ERROR_LAYER_NOT_PRESENT,
	VK_ERROR_EXTENSION_NOT_PRESENT = VkResult.VK_ERROR_EXTENSION_NOT_PRESENT,
	VK_ERROR_FEATURE_NOT_PRESENT = VkResult.VK_ERROR_FEATURE_NOT_PRESENT,
	VK_ERROR_INCOMPATIBLE_DRIVER = VkResult.VK_ERROR_INCOMPATIBLE_DRIVER,
	VK_ERROR_TOO_MANY_OBJECTS = VkResult.VK_ERROR_TOO_MANY_OBJECTS,
	VK_ERROR_FORMAT_NOT_SUPPORTED = VkResult.VK_ERROR_FORMAT_NOT_SUPPORTED,
	VK_ERROR_FRAGMENTED_POOL = VkResult.VK_ERROR_FRAGMENTED_POOL,
	VK_ERROR_UNKNOWN = VkResult.VK_ERROR_UNKNOWN,
	VK_ERROR_OUT_OF_POOL_MEMORY = VkResult.VK_ERROR_OUT_OF_POOL_MEMORY,
	VK_ERROR_INVALID_EXTERNAL_HANDLE = VkResult.VK_ERROR_INVALID_EXTERNAL_HANDLE,
	VK_ERROR_FRAGMENTATION = VkResult.VK_ERROR_FRAGMENTATION,
	VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = VkResult.VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
	VK_PIPELINE_COMPILE_REQUIRED = VkResult.VK_PIPELINE_COMPILE_REQUIRED,
	VK_ERROR_NOT_PERMITTED = VkResult.VK_ERROR_NOT_PERMITTED,
	VK_ERROR_SURFACE_LOST_KHR = VkResult.VK_ERROR_SURFACE_LOST_KHR,
	VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = VkResult.VK_ERROR_NATIVE_WINDOW_IN_USE_KHR,
	VK_SUBOPTIMAL_KHR = VkResult.VK_SUBOPTIMAL_KHR,
	VK_ERROR_OUT_OF_DATE_KHR = VkResult.VK_ERROR_OUT_OF_DATE_KHR,
	VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = VkResult.VK_ERROR_INCOMPATIBLE_DISPLAY_KHR,
	VK_ERROR_VALIDATION_FAILED_EXT = VkResult.VK_ERROR_VALIDATION_FAILED_EXT,
	VK_ERROR_INVALID_SHADER_NV = VkResult.VK_ERROR_INVALID_SHADER_NV,
	VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR = VkResult.VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR,
	VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR = VkResult.VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR,
	VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR = VkResult.VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR,
	VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR = VkResult.VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR,
	VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR = VkResult.VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR,
	VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR = VkResult.VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR,
	VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = VkResult.VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT,
	VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = VkResult.VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT,
	VK_THREAD_IDLE_KHR = VkResult.VK_THREAD_IDLE_KHR,
	VK_THREAD_DONE_KHR = VkResult.VK_THREAD_DONE_KHR,
	VK_OPERATION_DEFERRED_KHR = VkResult.VK_OPERATION_DEFERRED_KHR,
	VK_OPERATION_NOT_DEFERRED_KHR = VkResult.VK_OPERATION_NOT_DEFERRED_KHR,
	VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR = VkResult.VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR,
	VK_ERROR_COMPRESSION_EXHAUSTED_EXT = VkResult.VK_ERROR_COMPRESSION_EXHAUSTED_EXT,
	VK_INCOMPATIBLE_SHADER_BINARY_EXT = VkResult.VK_INCOMPATIBLE_SHADER_BINARY_EXT,
	VK_PIPELINE_BINARY_MISSING_KHR = VkResult.VK_PIPELINE_BINARY_MISSING_KHR,
	VK_ERROR_NOT_ENOUGH_SPACE_KHR = VkResult.VK_ERROR_NOT_ENOUGH_SPACE_KHR,
	VK_ERROR_OUT_OF_POOL_MEMORY_KHR = VkResult.VK_ERROR_OUT_OF_POOL_MEMORY_KHR,
	VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = VkResult.VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR,
	VK_ERROR_FRAGMENTATION_EXT = VkResult.VK_ERROR_FRAGMENTATION_EXT,
	VK_ERROR_NOT_PERMITTED_EXT = VkResult.VK_ERROR_NOT_PERMITTED_EXT,
	VK_ERROR_NOT_PERMITTED_KHR = VkResult.VK_ERROR_NOT_PERMITTED_KHR,
	VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = VkResult.VK_ERROR_INVALID_DEVICE_ADDRESS_EXT,
	VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR = VkResult.VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR,
	VK_PIPELINE_COMPILE_REQUIRED_EXT = VkResult.VK_PIPELINE_COMPILE_REQUIRED_EXT,
	VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT = VkResult.VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT,
	VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT = VkResult.VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT,
	VK_RESULT_MAX_ENUM = VkResult.VK_RESULT_MAX_ENUM,
}
enum VkSampleCountFlagBits {
	VK_SAMPLE_COUNT_1_BIT = 0x00000001,
	VK_SAMPLE_COUNT_2_BIT = 0x00000002,
	VK_SAMPLE_COUNT_4_BIT = 0x00000004,
	VK_SAMPLE_COUNT_8_BIT = 0x00000008,
	VK_SAMPLE_COUNT_16_BIT = 0x00000010,
	VK_SAMPLE_COUNT_32_BIT = 0x00000020,
	VK_SAMPLE_COUNT_64_BIT = 0x00000040,
	VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkSampleCountFlagBits {
	VK_SAMPLE_COUNT_1_BIT = VkSampleCountFlagBits.VK_SAMPLE_COUNT_1_BIT,
	VK_SAMPLE_COUNT_2_BIT = VkSampleCountFlagBits.VK_SAMPLE_COUNT_2_BIT,
	VK_SAMPLE_COUNT_4_BIT = VkSampleCountFlagBits.VK_SAMPLE_COUNT_4_BIT,
	VK_SAMPLE_COUNT_8_BIT = VkSampleCountFlagBits.VK_SAMPLE_COUNT_8_BIT,
	VK_SAMPLE_COUNT_16_BIT = VkSampleCountFlagBits.VK_SAMPLE_COUNT_16_BIT,
	VK_SAMPLE_COUNT_32_BIT = VkSampleCountFlagBits.VK_SAMPLE_COUNT_32_BIT,
	VK_SAMPLE_COUNT_64_BIT = VkSampleCountFlagBits.VK_SAMPLE_COUNT_64_BIT,
	VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = VkSampleCountFlagBits.VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM,
}
enum VkSamplerAddressMode {
	VK_SAMPLER_ADDRESS_MODE_REPEAT = 0,
	VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
	VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
	VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,
	VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,
	VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE,
	VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkSamplerAddressMode {
	VK_SAMPLER_ADDRESS_MODE_REPEAT = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_REPEAT,
	VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT,
	VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE,
	VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER,
	VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE,
	VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR,
	VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_MAX_ENUM,
}
enum VkSamplerCreateFlagBits {
	VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 0x00000001,
	VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 0x00000002,
	VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 0x00000008,
	VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT = 0x00000004,
	VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM = 0x00000010,
	VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkSamplerCreateFlagBits {
	VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT,
	VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT,
	VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT,
	VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT = VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT,
	VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM = VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM,
	VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM,
}
enum VkSamplerMipmapMode {
	VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,
	VK_SAMPLER_MIPMAP_MODE_LINEAR = 1,
	VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkSamplerMipmapMode {
	VK_SAMPLER_MIPMAP_MODE_NEAREST = VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_NEAREST,
	VK_SAMPLER_MIPMAP_MODE_LINEAR = VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_LINEAR,
	VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_MAX_ENUM,
}
enum VkSamplerReductionMode {
	VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0,
	VK_SAMPLER_REDUCTION_MODE_MIN = 1,
	VK_SAMPLER_REDUCTION_MODE_MAX = 2,
	VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_RANGECLAMP_QCOM = 1000521000,
	VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE,
	VK_SAMPLER_REDUCTION_MODE_MIN_EXT = VK_SAMPLER_REDUCTION_MODE_MIN,
	VK_SAMPLER_REDUCTION_MODE_MAX_EXT = VK_SAMPLER_REDUCTION_MODE_MAX,
	VK_SAMPLER_REDUCTION_MODE_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkSamplerReductionMode {
	VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE,
	VK_SAMPLER_REDUCTION_MODE_MIN = VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_MIN,
	VK_SAMPLER_REDUCTION_MODE_MAX = VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_MAX,
	VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_RANGECLAMP_QCOM = VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_RANGECLAMP_QCOM,
	VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT,
	VK_SAMPLER_REDUCTION_MODE_MIN_EXT = VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_MIN_EXT,
	VK_SAMPLER_REDUCTION_MODE_MAX_EXT = VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_MAX_EXT,
	VK_SAMPLER_REDUCTION_MODE_MAX_ENUM = VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_MAX_ENUM,
}
enum VkSamplerYcbcrModelConversion {
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkSamplerYcbcrModelConversion {
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM,
}
enum VkSamplerYcbcrRange {
	VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0,
	VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1,
	VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = VK_SAMPLER_YCBCR_RANGE_ITU_FULL,
	VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = VK_SAMPLER_YCBCR_RANGE_ITU_NARROW,
	VK_SAMPLER_YCBCR_RANGE_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkSamplerYcbcrRange {
	VK_SAMPLER_YCBCR_RANGE_ITU_FULL = VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_ITU_FULL,
	VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_ITU_NARROW,
	VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR,
	VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR,
	VK_SAMPLER_YCBCR_RANGE_MAX_ENUM = VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_MAX_ENUM,
}
enum VkScopeKHR {
	VK_SCOPE_DEVICE_KHR = 1,
	VK_SCOPE_WORKGROUP_KHR = 2,
	VK_SCOPE_SUBGROUP_KHR = 3,
	VK_SCOPE_QUEUE_FAMILY_KHR = 5,
	VK_SCOPE_DEVICE_NV = VK_SCOPE_DEVICE_KHR,
	VK_SCOPE_WORKGROUP_NV = VK_SCOPE_WORKGROUP_KHR,
	VK_SCOPE_SUBGROUP_NV = VK_SCOPE_SUBGROUP_KHR,
	VK_SCOPE_QUEUE_FAMILY_NV = VK_SCOPE_QUEUE_FAMILY_KHR,
	VK_SCOPE_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkScopeKHR {
	VK_SCOPE_DEVICE_KHR = VkScopeKHR.VK_SCOPE_DEVICE_KHR,
	VK_SCOPE_WORKGROUP_KHR = VkScopeKHR.VK_SCOPE_WORKGROUP_KHR,
	VK_SCOPE_SUBGROUP_KHR = VkScopeKHR.VK_SCOPE_SUBGROUP_KHR,
	VK_SCOPE_QUEUE_FAMILY_KHR = VkScopeKHR.VK_SCOPE_QUEUE_FAMILY_KHR,
	VK_SCOPE_DEVICE_NV = VkScopeKHR.VK_SCOPE_DEVICE_NV,
	VK_SCOPE_WORKGROUP_NV = VkScopeKHR.VK_SCOPE_WORKGROUP_NV,
	VK_SCOPE_SUBGROUP_NV = VkScopeKHR.VK_SCOPE_SUBGROUP_NV,
	VK_SCOPE_QUEUE_FAMILY_NV = VkScopeKHR.VK_SCOPE_QUEUE_FAMILY_NV,
	VK_SCOPE_MAX_ENUM_KHR = VkScopeKHR.VK_SCOPE_MAX_ENUM_KHR,
}
enum VkSemaphoreImportFlagBits {
	VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 0x00000001,
	VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = VK_SEMAPHORE_IMPORT_TEMPORARY_BIT,
	VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkSemaphoreImportFlagBits {
	VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = VkSemaphoreImportFlagBits.VK_SEMAPHORE_IMPORT_TEMPORARY_BIT,
	VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = VkSemaphoreImportFlagBits.VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR,
	VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = VkSemaphoreImportFlagBits.VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM,
}
enum VkSemaphoreType {
	VK_SEMAPHORE_TYPE_BINARY = 0,
	VK_SEMAPHORE_TYPE_TIMELINE = 1,
	VK_SEMAPHORE_TYPE_BINARY_KHR = VK_SEMAPHORE_TYPE_BINARY,
	VK_SEMAPHORE_TYPE_TIMELINE_KHR = VK_SEMAPHORE_TYPE_TIMELINE,
	VK_SEMAPHORE_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkSemaphoreType {
	VK_SEMAPHORE_TYPE_BINARY = VkSemaphoreType.VK_SEMAPHORE_TYPE_BINARY,
	VK_SEMAPHORE_TYPE_TIMELINE = VkSemaphoreType.VK_SEMAPHORE_TYPE_TIMELINE,
	VK_SEMAPHORE_TYPE_BINARY_KHR = VkSemaphoreType.VK_SEMAPHORE_TYPE_BINARY_KHR,
	VK_SEMAPHORE_TYPE_TIMELINE_KHR = VkSemaphoreType.VK_SEMAPHORE_TYPE_TIMELINE_KHR,
	VK_SEMAPHORE_TYPE_MAX_ENUM = VkSemaphoreType.VK_SEMAPHORE_TYPE_MAX_ENUM,
}
enum VkSemaphoreWaitFlagBits {
	VK_SEMAPHORE_WAIT_ANY_BIT = 0x00000001,
	VK_SEMAPHORE_WAIT_ANY_BIT_KHR = VK_SEMAPHORE_WAIT_ANY_BIT,
	VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkSemaphoreWaitFlagBits {
	VK_SEMAPHORE_WAIT_ANY_BIT = VkSemaphoreWaitFlagBits.VK_SEMAPHORE_WAIT_ANY_BIT,
	VK_SEMAPHORE_WAIT_ANY_BIT_KHR = VkSemaphoreWaitFlagBits.VK_SEMAPHORE_WAIT_ANY_BIT_KHR,
	VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM = VkSemaphoreWaitFlagBits.VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM,
}
enum VkShaderCodeTypeEXT {
	VK_SHADER_CODE_TYPE_BINARY_EXT = 0,
	VK_SHADER_CODE_TYPE_SPIRV_EXT = 1,
	VK_SHADER_CODE_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkShaderCodeTypeEXT {
	VK_SHADER_CODE_TYPE_BINARY_EXT = VkShaderCodeTypeEXT.VK_SHADER_CODE_TYPE_BINARY_EXT,
	VK_SHADER_CODE_TYPE_SPIRV_EXT = VkShaderCodeTypeEXT.VK_SHADER_CODE_TYPE_SPIRV_EXT,
	VK_SHADER_CODE_TYPE_MAX_ENUM_EXT = VkShaderCodeTypeEXT.VK_SHADER_CODE_TYPE_MAX_ENUM_EXT,
}
enum VkShaderCorePropertiesFlagBitsAMD {
	VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD = 0x7FFFFFFF,
}
enum : VkShaderCorePropertiesFlagBitsAMD {
	VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD = VkShaderCorePropertiesFlagBitsAMD.VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD,
}
enum VkShaderCreateFlagBitsEXT {
	VK_SHADER_CREATE_LINK_STAGE_BIT_EXT = 0x00000001,
	VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 0x00000002,
	VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 0x00000004,
	VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT = 0x00000008,
	VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT = 0x00000010,
	VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT = 0x00000020,
	VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 0x00000040,
	VK_SHADER_CREATE_INDIRECT_BINDABLE_BIT_EXT = 0x00000080,
	VK_SHADER_CREATE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkShaderCreateFlagBitsEXT {
	VK_SHADER_CREATE_LINK_STAGE_BIT_EXT = VkShaderCreateFlagBitsEXT.VK_SHADER_CREATE_LINK_STAGE_BIT_EXT,
	VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = VkShaderCreateFlagBitsEXT.VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT,
	VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = VkShaderCreateFlagBitsEXT.VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT,
	VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT = VkShaderCreateFlagBitsEXT.VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT,
	VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT = VkShaderCreateFlagBitsEXT.VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT,
	VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT = VkShaderCreateFlagBitsEXT.VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT,
	VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = VkShaderCreateFlagBitsEXT.VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT,
	VK_SHADER_CREATE_INDIRECT_BINDABLE_BIT_EXT = VkShaderCreateFlagBitsEXT.VK_SHADER_CREATE_INDIRECT_BINDABLE_BIT_EXT,
	VK_SHADER_CREATE_FLAG_BITS_MAX_ENUM_EXT = VkShaderCreateFlagBitsEXT.VK_SHADER_CREATE_FLAG_BITS_MAX_ENUM_EXT,
}
enum VkShaderFloatControlsIndependence {
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0,
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1,
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2,
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY,
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL,
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE,
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkShaderFloatControlsIndependence {
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY,
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL,
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE,
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR,
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR,
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR,
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM = VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM,
}
enum VkShaderGroupShaderKHR {
	VK_SHADER_GROUP_SHADER_GENERAL_KHR = 0,
	VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR = 1,
	VK_SHADER_GROUP_SHADER_ANY_HIT_KHR = 2,
	VK_SHADER_GROUP_SHADER_INTERSECTION_KHR = 3,
	VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkShaderGroupShaderKHR {
	VK_SHADER_GROUP_SHADER_GENERAL_KHR = VkShaderGroupShaderKHR.VK_SHADER_GROUP_SHADER_GENERAL_KHR,
	VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR = VkShaderGroupShaderKHR.VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR,
	VK_SHADER_GROUP_SHADER_ANY_HIT_KHR = VkShaderGroupShaderKHR.VK_SHADER_GROUP_SHADER_ANY_HIT_KHR,
	VK_SHADER_GROUP_SHADER_INTERSECTION_KHR = VkShaderGroupShaderKHR.VK_SHADER_GROUP_SHADER_INTERSECTION_KHR,
	VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR = VkShaderGroupShaderKHR.VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR,
}
enum VkShaderInfoTypeAMD {
	VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0,
	VK_SHADER_INFO_TYPE_BINARY_AMD = 1,
	VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2,
	VK_SHADER_INFO_TYPE_MAX_ENUM_AMD = 0x7FFFFFFF,
}
enum : VkShaderInfoTypeAMD {
	VK_SHADER_INFO_TYPE_STATISTICS_AMD = VkShaderInfoTypeAMD.VK_SHADER_INFO_TYPE_STATISTICS_AMD,
	VK_SHADER_INFO_TYPE_BINARY_AMD = VkShaderInfoTypeAMD.VK_SHADER_INFO_TYPE_BINARY_AMD,
	VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = VkShaderInfoTypeAMD.VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD,
	VK_SHADER_INFO_TYPE_MAX_ENUM_AMD = VkShaderInfoTypeAMD.VK_SHADER_INFO_TYPE_MAX_ENUM_AMD,
}
enum VkShaderStageFlagBits {
	VK_SHADER_STAGE_VERTEX_BIT = 0x00000001,
	VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 0x00000002,
	VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 0x00000004,
	VK_SHADER_STAGE_GEOMETRY_BIT = 0x00000008,
	VK_SHADER_STAGE_FRAGMENT_BIT = 0x00000010,
	VK_SHADER_STAGE_COMPUTE_BIT = 0x00000020,
	VK_SHADER_STAGE_ALL_GRAPHICS = 0x0000001F,
	VK_SHADER_STAGE_ALL = 0x7FFFFFFF,
	VK_SHADER_STAGE_RAYGEN_BIT_KHR = 0x00000100,
	VK_SHADER_STAGE_ANY_HIT_BIT_KHR = 0x00000200,
	VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 0x00000400,
	VK_SHADER_STAGE_MISS_BIT_KHR = 0x00000800,
	VK_SHADER_STAGE_INTERSECTION_BIT_KHR = 0x00001000,
	VK_SHADER_STAGE_CALLABLE_BIT_KHR = 0x00002000,
	VK_SHADER_STAGE_TASK_BIT_EXT = 0x00000040,
	VK_SHADER_STAGE_MESH_BIT_EXT = 0x00000080,
	VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI = 0x00004000,
	VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI = 0x00080000,
	VK_SHADER_STAGE_RAYGEN_BIT_NV = VK_SHADER_STAGE_RAYGEN_BIT_KHR,
	VK_SHADER_STAGE_ANY_HIT_BIT_NV = VK_SHADER_STAGE_ANY_HIT_BIT_KHR,
	VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR,
	VK_SHADER_STAGE_MISS_BIT_NV = VK_SHADER_STAGE_MISS_BIT_KHR,
	VK_SHADER_STAGE_INTERSECTION_BIT_NV = VK_SHADER_STAGE_INTERSECTION_BIT_KHR,
	VK_SHADER_STAGE_CALLABLE_BIT_NV = VK_SHADER_STAGE_CALLABLE_BIT_KHR,
	VK_SHADER_STAGE_TASK_BIT_NV = VK_SHADER_STAGE_TASK_BIT_EXT,
	VK_SHADER_STAGE_MESH_BIT_NV = VK_SHADER_STAGE_MESH_BIT_EXT,
	VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkShaderStageFlagBits {
	VK_SHADER_STAGE_VERTEX_BIT = VkShaderStageFlagBits.VK_SHADER_STAGE_VERTEX_BIT,
	VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = VkShaderStageFlagBits.VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT,
	VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = VkShaderStageFlagBits.VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT,
	VK_SHADER_STAGE_GEOMETRY_BIT = VkShaderStageFlagBits.VK_SHADER_STAGE_GEOMETRY_BIT,
	VK_SHADER_STAGE_FRAGMENT_BIT = VkShaderStageFlagBits.VK_SHADER_STAGE_FRAGMENT_BIT,
	VK_SHADER_STAGE_COMPUTE_BIT = VkShaderStageFlagBits.VK_SHADER_STAGE_COMPUTE_BIT,
	VK_SHADER_STAGE_ALL_GRAPHICS = VkShaderStageFlagBits.VK_SHADER_STAGE_ALL_GRAPHICS,
	VK_SHADER_STAGE_ALL = VkShaderStageFlagBits.VK_SHADER_STAGE_ALL,
	VK_SHADER_STAGE_RAYGEN_BIT_KHR = VkShaderStageFlagBits.VK_SHADER_STAGE_RAYGEN_BIT_KHR,
	VK_SHADER_STAGE_ANY_HIT_BIT_KHR = VkShaderStageFlagBits.VK_SHADER_STAGE_ANY_HIT_BIT_KHR,
	VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = VkShaderStageFlagBits.VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR,
	VK_SHADER_STAGE_MISS_BIT_KHR = VkShaderStageFlagBits.VK_SHADER_STAGE_MISS_BIT_KHR,
	VK_SHADER_STAGE_INTERSECTION_BIT_KHR = VkShaderStageFlagBits.VK_SHADER_STAGE_INTERSECTION_BIT_KHR,
	VK_SHADER_STAGE_CALLABLE_BIT_KHR = VkShaderStageFlagBits.VK_SHADER_STAGE_CALLABLE_BIT_KHR,
	VK_SHADER_STAGE_TASK_BIT_EXT = VkShaderStageFlagBits.VK_SHADER_STAGE_TASK_BIT_EXT,
	VK_SHADER_STAGE_MESH_BIT_EXT = VkShaderStageFlagBits.VK_SHADER_STAGE_MESH_BIT_EXT,
	VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI = VkShaderStageFlagBits.VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI,
	VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI = VkShaderStageFlagBits.VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI,
	VK_SHADER_STAGE_RAYGEN_BIT_NV = VkShaderStageFlagBits.VK_SHADER_STAGE_RAYGEN_BIT_NV,
	VK_SHADER_STAGE_ANY_HIT_BIT_NV = VkShaderStageFlagBits.VK_SHADER_STAGE_ANY_HIT_BIT_NV,
	VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = VkShaderStageFlagBits.VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV,
	VK_SHADER_STAGE_MISS_BIT_NV = VkShaderStageFlagBits.VK_SHADER_STAGE_MISS_BIT_NV,
	VK_SHADER_STAGE_INTERSECTION_BIT_NV = VkShaderStageFlagBits.VK_SHADER_STAGE_INTERSECTION_BIT_NV,
	VK_SHADER_STAGE_CALLABLE_BIT_NV = VkShaderStageFlagBits.VK_SHADER_STAGE_CALLABLE_BIT_NV,
	VK_SHADER_STAGE_TASK_BIT_NV = VkShaderStageFlagBits.VK_SHADER_STAGE_TASK_BIT_NV,
	VK_SHADER_STAGE_MESH_BIT_NV = VkShaderStageFlagBits.VK_SHADER_STAGE_MESH_BIT_NV,
	VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = VkShaderStageFlagBits.VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM,
}
enum VkShadingRatePaletteEntryNV {
	VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0,
	VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1,
	VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2,
	VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3,
	VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11,
	VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkShadingRatePaletteEntryNV {
	VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV,
	VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV,
	VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV,
	VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV,
	VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV,
	VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV,
}
enum VkSharingMode {
	VK_SHARING_MODE_EXCLUSIVE = 0,
	VK_SHARING_MODE_CONCURRENT = 1,
	VK_SHARING_MODE_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkSharingMode {
	VK_SHARING_MODE_EXCLUSIVE = VkSharingMode.VK_SHARING_MODE_EXCLUSIVE,
	VK_SHARING_MODE_CONCURRENT = VkSharingMode.VK_SHARING_MODE_CONCURRENT,
	VK_SHARING_MODE_MAX_ENUM = VkSharingMode.VK_SHARING_MODE_MAX_ENUM,
}
enum VkSparseImageFormatFlagBits {
	VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 0x00000001,
	VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 0x00000002,
	VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 0x00000004,
	VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkSparseImageFormatFlagBits {
	VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = VkSparseImageFormatFlagBits.VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT,
	VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = VkSparseImageFormatFlagBits.VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT,
	VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = VkSparseImageFormatFlagBits.VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT,
	VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = VkSparseImageFormatFlagBits.VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM,
}
enum VkSparseMemoryBindFlagBits {
	VK_SPARSE_MEMORY_BIND_METADATA_BIT = 0x00000001,
	VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkSparseMemoryBindFlagBits {
	VK_SPARSE_MEMORY_BIND_METADATA_BIT = VkSparseMemoryBindFlagBits.VK_SPARSE_MEMORY_BIND_METADATA_BIT,
	VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = VkSparseMemoryBindFlagBits.VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM,
}
enum VkStencilFaceFlagBits {
	VK_STENCIL_FACE_FRONT_BIT = 0x00000001,
	VK_STENCIL_FACE_BACK_BIT = 0x00000002,
	VK_STENCIL_FACE_FRONT_AND_BACK = 0x00000003,
	VK_STENCIL_FRONT_AND_BACK = VK_STENCIL_FACE_FRONT_AND_BACK,
	VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkStencilFaceFlagBits {
	VK_STENCIL_FACE_FRONT_BIT = VkStencilFaceFlagBits.VK_STENCIL_FACE_FRONT_BIT,
	VK_STENCIL_FACE_BACK_BIT = VkStencilFaceFlagBits.VK_STENCIL_FACE_BACK_BIT,
	VK_STENCIL_FACE_FRONT_AND_BACK = VkStencilFaceFlagBits.VK_STENCIL_FACE_FRONT_AND_BACK,
	VK_STENCIL_FRONT_AND_BACK = VkStencilFaceFlagBits.VK_STENCIL_FRONT_AND_BACK,
	VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = VkStencilFaceFlagBits.VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM,
}
enum VkStencilOp {
	VK_STENCIL_OP_KEEP = 0,
	VK_STENCIL_OP_ZERO = 1,
	VK_STENCIL_OP_REPLACE = 2,
	VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
	VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
	VK_STENCIL_OP_INVERT = 5,
	VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,
	VK_STENCIL_OP_DECREMENT_AND_WRAP = 7,
	VK_STENCIL_OP_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkStencilOp {
	VK_STENCIL_OP_KEEP = VkStencilOp.VK_STENCIL_OP_KEEP,
	VK_STENCIL_OP_ZERO = VkStencilOp.VK_STENCIL_OP_ZERO,
	VK_STENCIL_OP_REPLACE = VkStencilOp.VK_STENCIL_OP_REPLACE,
	VK_STENCIL_OP_INCREMENT_AND_CLAMP = VkStencilOp.VK_STENCIL_OP_INCREMENT_AND_CLAMP,
	VK_STENCIL_OP_DECREMENT_AND_CLAMP = VkStencilOp.VK_STENCIL_OP_DECREMENT_AND_CLAMP,
	VK_STENCIL_OP_INVERT = VkStencilOp.VK_STENCIL_OP_INVERT,
	VK_STENCIL_OP_INCREMENT_AND_WRAP = VkStencilOp.VK_STENCIL_OP_INCREMENT_AND_WRAP,
	VK_STENCIL_OP_DECREMENT_AND_WRAP = VkStencilOp.VK_STENCIL_OP_DECREMENT_AND_WRAP,
	VK_STENCIL_OP_MAX_ENUM = VkStencilOp.VK_STENCIL_OP_MAX_ENUM,
}
enum VkStructureType {
	VK_STRUCTURE_TYPE_APPLICATION_INFO = 0,
	VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,
	VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,
	VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,
	VK_STRUCTURE_TYPE_SUBMIT_INFO = 4,
	VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,
	VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,
	VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,
	VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,
	VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,
	VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,
	VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,
	VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,
	VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,
	VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,
	VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,
	VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,
	VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
	VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
	VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
	VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
	VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
	VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
	VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
	VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
	VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,
	VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,
	VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,
	VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
	VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,
	VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,
	VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,
	VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,
	VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,
	VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,
	VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,
	VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,
	VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,
	VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,
	VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,
	VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000,
	VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000,
	VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000,
	VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000,
	VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001,
	VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006,
	VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013,
	VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001,
	VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000,
	VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001,
	VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002,
	VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003,
	VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001,
	VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002,
	VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006,
	VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000,
	VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002,
	VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003,
	VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000,
	VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002,
	VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001,
	VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002,
	VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005,
	VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000,
	VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002,
	VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004,
	VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000,
	VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001,
	VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000,
	VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001,
	VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000,
	VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000,
	VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52,
	VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000,
	VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000,
	VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001,
	VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002,
	VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003,
	VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004,
	VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005,
	VK_STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000,
	VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000,
	VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000,
	VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000,
	VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001,
	VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002,
	VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000,
	VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001,
	VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001,
	VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002,
	VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003,
	VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004,
	VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000,
	VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001,
	VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002,
	VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003,
	VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES = 53,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES = 54,
	VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO = 1000192000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES = 1000215000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES = 1000245000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES = 1000276000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES = 1000295000,
	VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO = 1000295001,
	VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO = 1000295002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES = 1000297000,
	VK_STRUCTURE_TYPE_MEMORY_BARRIER_2 = 1000314000,
	VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2 = 1000314001,
	VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2 = 1000314002,
	VK_STRUCTURE_TYPE_DEPENDENCY_INFO = 1000314003,
	VK_STRUCTURE_TYPE_SUBMIT_INFO_2 = 1000314004,
	VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO = 1000314005,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO = 1000314006,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES = 1000314007,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES = 1000325000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES = 1000335000,
	VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2 = 1000337000,
	VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2 = 1000337001,
	VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2 = 1000337002,
	VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2 = 1000337003,
	VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2 = 1000337004,
	VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2 = 1000337005,
	VK_STRUCTURE_TYPE_BUFFER_COPY_2 = 1000337006,
	VK_STRUCTURE_TYPE_IMAGE_COPY_2 = 1000337007,
	VK_STRUCTURE_TYPE_IMAGE_BLIT_2 = 1000337008,
	VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2 = 1000337009,
	VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2 = 1000337010,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES = 1000225000,
	VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO = 1000225001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES = 1000225002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES = 1000138000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES = 1000138001,
	VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK = 1000138002,
	VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO = 1000138003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES = 1000066000,
	VK_STRUCTURE_TYPE_RENDERING_INFO = 1000044000,
	VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO = 1000044001,
	VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO = 1000044002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES = 1000044003,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO = 1000044004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES = 1000280000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES = 1000280001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES = 1000281001,
	VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 = 1000360000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES = 1000413000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES = 1000413001,
	VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS = 1000413002,
	VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS = 1000413003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_FEATURES = 55,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_PROPERTIES = 56,
	VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO = 1000174000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES = 1000388000,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES = 1000388001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES = 1000416000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES = 1000528000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES = 1000544000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES = 1000259000,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO = 1000259001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES = 1000259002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES = 1000525000,
	VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO = 1000190001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES = 1000190002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES = 1000265000,
	VK_STRUCTURE_TYPE_MEMORY_MAP_INFO = 1000271000,
	VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO = 1000271001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES = 1000470000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES = 1000470001,
	VK_STRUCTURE_TYPE_RENDERING_AREA_INFO = 1000470003,
	VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO = 1000470004,
	VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2 = 1000338002,
	VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2 = 1000338003,
	VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO = 1000470005,
	VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO = 1000470006,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES = 1000080000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES = 1000232000,
	VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO = 1000232001,
	VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO = 1000232002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES = 1000545000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES = 1000545001,
	VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS = 1000545002,
	VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO = 1000545003,
	VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO = 1000545004,
	VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO = 1000545005,
	VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO = 1000545006,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES = 1000466000,
	VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO = 1000068000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES = 1000068001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES = 1000068002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES = 1000270000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES = 1000270001,
	VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY = 1000270002,
	VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY = 1000270003,
	VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO = 1000270004,
	VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO = 1000270005,
	VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO = 1000270006,
	VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO = 1000270007,
	VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE = 1000270008,
	VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY = 1000270009,
	VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000,
	VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007,
	VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008,
	VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009,
	VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012,
	VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000,
	VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001,
	VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000,
	VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,
	VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,
	VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,
	VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000,
	VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,
	VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000,
	VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000,
	VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001,
	VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002,
	VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR = 1000023000,
	VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR = 1000023001,
	VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR = 1000023002,
	VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR = 1000023003,
	VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR = 1000023004,
	VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR = 1000023005,
	VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000023006,
	VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR = 1000023007,
	VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR = 1000023008,
	VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR = 1000023009,
	VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR = 1000023010,
	VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR = 1000023011,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR = 1000023012,
	VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR = 1000023013,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR = 1000023014,
	VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR = 1000023015,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR = 1000023016,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR = 1000024000,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR = 1000024001,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR = 1000024002,
	VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000,
	VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001,
	VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002,
	VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX = 1000029000,
	VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX = 1000029001,
	VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX = 1000029002,
	VK_STRUCTURE_TYPE_CU_MODULE_TEXTURING_MODE_CREATE_INFO_NVX = 1000029004,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_KHR = 1000038000,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000038001,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR = 1000038002,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_KHR = 1000038003,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_KHR = 1000038004,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_KHR = 1000038005,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_KHR = 1000038006,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_KHR = 1000038007,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_KHR = 1000038008,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_KHR = 1000038009,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_KHR = 1000038010,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_KHR = 1000038011,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_KHR = 1000038012,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = 1000038013,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_KHR = 1000039000,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000039001,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR = 1000039002,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_KHR = 1000039003,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_KHR = 1000039004,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_KHR = 1000039005,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_KHR = 1000039006,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_KHR = 1000039007,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_KHR = 1000039009,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_KHR = 1000039010,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_KHR = 1000039011,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_KHR = 1000039012,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_KHR = 1000039013,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = 1000039014,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR = 1000040000,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR = 1000040001,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR = 1000040003,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000040004,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR = 1000040005,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR = 1000040006,
	VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000,
	VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000,
	VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000,
	VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001,
	VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000,
	VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001,
	VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000,
	VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000,
	VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001,
	VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000,
	VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001,
	VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002,
	VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003,
	VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000,
	VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001,
	VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002,
	VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000,
	VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000,
	VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001,
	VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002,
	VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003,
	VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000,
	VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001,
	VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002,
	VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000,
	VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000,
	VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000,
	VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001,
	VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002,
	VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003,
	VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000,
	VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX = 1000044009,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000,
	VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001,
	VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG = 1000110000,
	VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000,
	VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000,
	VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001,
	VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002,
	VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000,
	VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001,
	VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002,
	VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003,
	VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004,
	VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1000116005,
	VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000,
	VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001,
	VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002,
	VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000,
	VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001,
	VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002,
	VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003,
	VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004,
	VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000,
	VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000,
	VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000,
	VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001,
	VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002,
	VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003,
	VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004,
	VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000,
	VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001,
	VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002,
	VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003,
	VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004,
	VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005,
	VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID = 1000129006,
	VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD = 1000044008,
	VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000,
	VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001,
	VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003,
	VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001,
	VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002,
	VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000,
	VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000150007,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR = 1000150009,
	VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010,
	VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011,
	VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR = 1000150013,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR = 1000150014,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR = 1000150020,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR = 1000347000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR = 1000347001,
	VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1000150015,
	VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1000150016,
	VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1000150018,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR = 1000348013,
	VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001,
	VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002,
	VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003,
	VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004,
	VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005,
	VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT = 1000158006,
	VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000,
	VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005,
	VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001,
	VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003,
	VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004,
	VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005,
	VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006,
	VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009,
	VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000,
	VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000,
	VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001,
	VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000,
	VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000,
	VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR = 1000187000,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000187001,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR = 1000187002,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR = 1000187003,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR = 1000187004,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR = 1000187005,
	VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000,
	VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002,
	VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV = 1000314008,
	VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV = 1000314009,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000,
	VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000,
	VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001,
	VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002,
	VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003,
	VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004,
	VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000,
	VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000,
	VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001,
	VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000,
	VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001,
	VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002,
	VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT = 1000044007,
	VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000226000,
	VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR = 1000226001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR = 1000226002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR = 1000226003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR = 1000226004,
	VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000044006,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT = 1000234000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_QUAD_CONTROL_FEATURES_KHR = 1000235000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000,
	VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001,
	VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000,
	VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002,
	VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR = 1000248000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000,
	VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000,
	VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001,
	VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT = 1000254000,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT = 1000254001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT = 1000254002,
	VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000,
	VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002,
	VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001,
	VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = 1000260000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1000267000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000,
	VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001,
	VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002,
	VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003,
	VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004,
	VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_FEATURES_EXT = 1000272000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_PROPERTIES_EXT = 1000272001,
	VK_STRUCTURE_TYPE_MEMORY_MAP_PLACED_INFO_EXT = 1000272002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT = 1000273000,
	VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT = 1000274000,
	VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT = 1000274001,
	VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT = 1000274002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT = 1000275000,
	VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT = 1000275001,
	VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT = 1000275002,
	VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT = 1000275003,
	VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT = 1000275004,
	VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT = 1000275005,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000,
	VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001,
	VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002,
	VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003,
	VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004,
	VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1000277005,
	VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV = 1000278000,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV = 1000278001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000,
	VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT = 1000283000,
	VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT = 1000283001,
	VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT = 1000283002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT = 1000284000,
	VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT = 1000284001,
	VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT = 1000284002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001,
	VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002,
	VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV = 1000292000,
	VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV = 1000292001,
	VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV = 1000292002,
	VK_STRUCTURE_TYPE_PRESENT_ID_KHR = 1000294000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR = 1000294001,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR = 1000299000,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR = 1000299001,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR = 1000299002,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR = 1000299003,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR = 1000299004,
	VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR = 1000299005,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR = 1000299006,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR = 1000299007,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR = 1000299008,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR = 1000299009,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = 1000299010,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000,
	VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001,
	VK_STRUCTURE_TYPE_CUDA_MODULE_CREATE_INFO_NV = 1000307000,
	VK_STRUCTURE_TYPE_CUDA_FUNCTION_CREATE_INFO_NV = 1000307001,
	VK_STRUCTURE_TYPE_CUDA_LAUNCH_INFO_NV = 1000307002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_FEATURES_NV = 1000307003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_PROPERTIES_NV = 1000307004,
	VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV = 1000310000,
	VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT = 1000311000,
	VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT = 1000311001,
	VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT = 1000311002,
	VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT = 1000311003,
	VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT = 1000311004,
	VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT = 1000311005,
	VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT = 1000311006,
	VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT = 1000311007,
	VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT = 1000311008,
	VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT = 1000311009,
	VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT = 1000311010,
	VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT = 1000311011,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT = 1000316000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT = 1000316001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT = 1000316002,
	VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT = 1000316003,
	VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT = 1000316004,
	VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316005,
	VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316006,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316007,
	VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316008,
	VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT = 1000316010,
	VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT = 1000316011,
	VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT = 1000316012,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316009,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT = 1000320000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT = 1000320001,
	VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT = 1000320002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD = 1000321000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR = 1000203000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR = 1000322000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR = 1000323000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV = 1000326000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV = 1000326001,
	VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV = 1000326002,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV = 1000327000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV = 1000327001,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV = 1000327002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT = 1000328000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT = 1000328001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT = 1000330000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = 1000332000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = 1000332001,
	VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM = 1000333000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR = 1000336000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT = 1000338000,
	VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT = 1000338001,
	VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT = 1000338004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT = 1000339000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = 1000340000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT = 1000341000,
	VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT = 1000341001,
	VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT = 1000341002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT = 1000344000,
	VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = 1000346000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT = 1000352000,
	VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT = 1000352001,
	VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT = 1000352002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT = 1000353000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT = 1000354000,
	VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT = 1000354001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT = 1000355000,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT = 1000355001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT = 1000356000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_MODE_FIFO_LATEST_READY_FEATURES_EXT = 1000361000,
	VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364000,
	VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA = 1000364001,
	VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364002,
	VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365000,
	VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365001,
	VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA = 1000366000,
	VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA = 1000366001,
	VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA = 1000366002,
	VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA = 1000366003,
	VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA = 1000366004,
	VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA = 1000366005,
	VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA = 1000366006,
	VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA = 1000366007,
	VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA = 1000366008,
	VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA = 1000366009,
	VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI = 1000369000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI = 1000369001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI = 1000369002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI = 1000370000,
	VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV = 1000371000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV = 1000371001,
	VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT = 1000372000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT = 1000372001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT = 1000375000,
	VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT = 1000375001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT = 1000376000,
	VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT = 1000376001,
	VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT = 1000376002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT = 1000377000,
	VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX = 1000378000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT = 1000381000,
	VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT = 1000381001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT = 1000382000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR = 1000386000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT = 1000391000,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT = 1000391001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT = 1000392000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT = 1000392001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT = 1000393000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT = 1000395000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT = 1000395001,
	VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT = 1000396000,
	VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT = 1000396001,
	VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT = 1000396002,
	VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT = 1000396003,
	VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT = 1000396004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT = 1000396005,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT = 1000396006,
	VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT = 1000396007,
	VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT = 1000396008,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT = 1000396009,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI = 1000404000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI = 1000404001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_VRS_FEATURES_HUAWEI = 1000404002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT = 1000411000,
	VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT = 1000411001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT = 1000412000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM = 1000415000,
	VK_STRUCTURE_TYPE_DEVICE_QUEUE_SHADER_CORE_CONTROL_CREATE_INFO_ARM = 1000417000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM = 1000417001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_PROPERTIES_ARM = 1000417002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT = 1000418000,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT = 1000418001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE = 1000420000,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE = 1000420001,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE = 1000420002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT = 1000422000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM = 1000424000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_PROPERTIES_ARM = 1000424001,
	VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_BEGIN_INFO_ARM = 1000424002,
	VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_INFO_ARM = 1000424003,
	VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_SUBMIT_INFO_ARM = 1000424004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM = 1000425000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM = 1000425001,
	VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM = 1000425002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV = 1000426000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV = 1000426001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV = 1000427000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV = 1000427001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV = 1000428000,
	VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV = 1000428001,
	VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV = 1000428002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_LINEAR_SWEPT_SPHERES_FEATURES_NV = 1000429008,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_LINEAR_SWEPT_SPHERES_DATA_NV = 1000429009,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_SPHERES_DATA_NV = 1000429010,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV = 1000430000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MAXIMAL_RECONVERGENCE_FEATURES_KHR = 1000434000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT = 1000437000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM = 1000440000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM = 1000440001,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM = 1000440002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT = 1000451000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_PROPERTIES_EXT = 1000451001,
	VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT = 1000453000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT = 1000455000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT = 1000455001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT = 1000458000,
	VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT = 1000458001,
	VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000458002,
	VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT = 1000458003,
	VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG = 1000459000,
	VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG = 1000459001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT = 1000462000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT = 1000462001,
	VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT = 1000462002,
	VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT = 1000462003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT = 1000342000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV = 1000464000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV = 1000464001,
	VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV = 1000464002,
	VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV = 1000464003,
	VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV = 1000464004,
	VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV = 1000464005,
	VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV = 1000464010,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT = 1000465000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_FEATURES_ANDROID = 1000468000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_PROPERTIES_ANDROID = 1000468001,
	VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_RESOLVE_PROPERTIES_ANDROID = 1000468002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ANTI_LAG_FEATURES_AMD = 1000476000,
	VK_STRUCTURE_TYPE_ANTI_LAG_DATA_AMD = 1000476001,
	VK_STRUCTURE_TYPE_ANTI_LAG_PRESENTATION_INFO_AMD = 1000476002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR = 1000481000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT = 1000482000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT = 1000482001,
	VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT = 1000482002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_FEATURES_KHR = 1000483000,
	VK_STRUCTURE_TYPE_PIPELINE_BINARY_CREATE_INFO_KHR = 1000483001,
	VK_STRUCTURE_TYPE_PIPELINE_BINARY_INFO_KHR = 1000483002,
	VK_STRUCTURE_TYPE_PIPELINE_BINARY_KEY_KHR = 1000483003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_PROPERTIES_KHR = 1000483004,
	VK_STRUCTURE_TYPE_RELEASE_CAPTURED_PIPELINE_DATA_INFO_KHR = 1000483005,
	VK_STRUCTURE_TYPE_PIPELINE_BINARY_DATA_INFO_KHR = 1000483006,
	VK_STRUCTURE_TYPE_PIPELINE_CREATE_INFO_KHR = 1000483007,
	VK_STRUCTURE_TYPE_DEVICE_PIPELINE_BINARY_INTERNAL_CACHE_CONTROL_KHR = 1000483008,
	VK_STRUCTURE_TYPE_PIPELINE_BINARY_HANDLES_INFO_KHR = 1000483009,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM = 1000484000,
	VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM = 1000484001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC = 1000485000,
	VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC = 1000485001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM = 1000488000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV = 1000490000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV = 1000490001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_VECTOR_FEATURES_NV = 1000491000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_VECTOR_PROPERTIES_NV = 1000491001,
	VK_STRUCTURE_TYPE_COOPERATIVE_VECTOR_PROPERTIES_NV = 1000491002,
	VK_STRUCTURE_TYPE_CONVERT_COOPERATIVE_VECTOR_MATRIX_INFO_NV = 1000491004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV = 1000492000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_PROPERTIES_NV = 1000492001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT = 1000351000,
	VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT = 1000351002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_FEATURES_EXT = 1000495000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_PROPERTIES_EXT = 1000495001,
	VK_STRUCTURE_TYPE_LAYER_SETTINGS_CREATE_INFO_EXT = 1000496000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM = 1000497000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM = 1000497001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT = 1000498000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT = 1000499000,
	VK_STRUCTURE_TYPE_LATENCY_SLEEP_MODE_INFO_NV = 1000505000,
	VK_STRUCTURE_TYPE_LATENCY_SLEEP_INFO_NV = 1000505001,
	VK_STRUCTURE_TYPE_SET_LATENCY_MARKER_INFO_NV = 1000505002,
	VK_STRUCTURE_TYPE_GET_LATENCY_MARKER_INFO_NV = 1000505003,
	VK_STRUCTURE_TYPE_LATENCY_TIMINGS_FRAME_REPORT_NV = 1000505004,
	VK_STRUCTURE_TYPE_LATENCY_SUBMISSION_PRESENT_ID_NV = 1000505005,
	VK_STRUCTURE_TYPE_OUT_OF_BAND_QUEUE_TYPE_INFO_NV = 1000505006,
	VK_STRUCTURE_TYPE_SWAPCHAIN_LATENCY_CREATE_INFO_NV = 1000505007,
	VK_STRUCTURE_TYPE_LATENCY_SURFACE_CAPABILITIES_NV = 1000505008,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR = 1000506000,
	VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR = 1000506001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR = 1000506002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM = 1000510000,
	VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM = 1000510001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_KHR = 1000201000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_PROPERTIES_KHR = 1000511000,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_CAPABILITIES_KHR = 1000512000,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PICTURE_INFO_KHR = 1000512001,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PROFILE_INFO_KHR = 1000512003,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000512004,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_DPB_SLOT_INFO_KHR = 1000512005,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_CAPABILITIES_KHR = 1000513000,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000513001,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_PICTURE_INFO_KHR = 1000513002,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_DPB_SLOT_INFO_KHR = 1000513003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_AV1_FEATURES_KHR = 1000513004,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_PROFILE_INFO_KHR = 1000513005,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_RATE_CONTROL_INFO_KHR = 1000513006,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_RATE_CONTROL_LAYER_INFO_KHR = 1000513007,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_QUALITY_LEVEL_PROPERTIES_KHR = 1000513008,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_SESSION_CREATE_INFO_KHR = 1000513009,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_GOP_REMAINING_FRAME_INFO_KHR = 1000513010,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR = 1000515000,
	VK_STRUCTURE_TYPE_VIDEO_INLINE_QUERY_INFO_KHR = 1000515001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV = 1000516000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM = 1000518000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM = 1000518001,
	VK_STRUCTURE_TYPE_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM = 1000518002,
	VK_STRUCTURE_TYPE_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM = 1000519000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM = 1000519001,
	VK_STRUCTURE_TYPE_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM = 1000519002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM = 1000520000,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM = 1000520001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM = 1000521000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT = 1000524000,
	VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX = 1000529000,
	VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX = 1000529001,
	VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX = 1000529002,
	VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX = 1000529003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX = 1000529004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT = 1000530000,
	VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_KHR = 1000184000,
	VK_STRUCTURE_TYPE_SET_DESCRIPTOR_BUFFER_OFFSETS_INFO_EXT = 1000545007,
	VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_BUFFER_EMBEDDED_SAMPLERS_INFO_EXT = 1000545008,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV = 1000546000,
	VK_STRUCTURE_TYPE_DISPLAY_SURFACE_STEREO_CREATE_INFO_NV = 1000551000,
	VK_STRUCTURE_TYPE_DISPLAY_MODE_STEREO_PROPERTIES_NV = 1000551001,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_CAPABILITIES_KHR = 1000553000,
	VK_STRUCTURE_TYPE_VIDEO_FORMAT_QUANTIZATION_MAP_PROPERTIES_KHR = 1000553001,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_INFO_KHR = 1000553002,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000553005,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUANTIZATION_MAP_FEATURES_KHR = 1000553009,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUANTIZATION_MAP_CAPABILITIES_KHR = 1000553003,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUANTIZATION_MAP_CAPABILITIES_KHR = 1000553004,
	VK_STRUCTURE_TYPE_VIDEO_FORMAT_H265_QUANTIZATION_MAP_PROPERTIES_KHR = 1000553006,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_QUANTIZATION_MAP_CAPABILITIES_KHR = 1000553007,
	VK_STRUCTURE_TYPE_VIDEO_FORMAT_AV1_QUANTIZATION_MAP_PROPERTIES_KHR = 1000553008,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAW_ACCESS_CHAINS_FEATURES_NV = 1000555000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_RELAXED_EXTENDED_INSTRUCTION_FEATURES_KHR = 1000558000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMMAND_BUFFER_INHERITANCE_FEATURES_NV = 1000559000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_FEATURES_KHR = 1000562000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_PROPERTIES_KHR = 1000562001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_LIST_KHR = 1000562002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_KHR = 1000562003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_VULKAN_PROPERTIES_KHR = 1000562004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT16_VECTOR_FEATURES_NV = 1000563000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_REPLICATED_COMPOSITES_FEATURES_EXT = 1000564000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_VALIDATION_FEATURES_NV = 1000568000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_ACCELERATION_STRUCTURE_FEATURES_NV = 1000569000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_ACCELERATION_STRUCTURE_PROPERTIES_NV = 1000569001,
	VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_CLUSTERS_BOTTOM_LEVEL_INPUT_NV = 1000569002,
	VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_TRIANGLE_CLUSTER_INPUT_NV = 1000569003,
	VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_MOVE_OBJECTS_INPUT_NV = 1000569004,
	VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_INPUT_INFO_NV = 1000569005,
	VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_COMMANDS_INFO_NV = 1000569006,
	VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CLUSTER_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000569007,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PARTITIONED_ACCELERATION_STRUCTURE_FEATURES_NV = 1000570000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PARTITIONED_ACCELERATION_STRUCTURE_PROPERTIES_NV = 1000570001,
	VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_PARTITIONED_ACCELERATION_STRUCTURE_NV = 1000570002,
	VK_STRUCTURE_TYPE_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCES_INPUT_NV = 1000570003,
	VK_STRUCTURE_TYPE_BUILD_PARTITIONED_ACCELERATION_STRUCTURE_INFO_NV = 1000570004,
	VK_STRUCTURE_TYPE_PARTITIONED_ACCELERATION_STRUCTURE_FLAGS_NV = 1000570005,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_EXT = 1000572000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_EXT = 1000572001,
	VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_EXT = 1000572002,
	VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_CREATE_INFO_EXT = 1000572003,
	VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_EXT = 1000572004,
	VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_EXT = 1000572006,
	VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_EXT = 1000572007,
	VK_STRUCTURE_TYPE_WRITE_INDIRECT_EXECUTION_SET_PIPELINE_EXT = 1000572008,
	VK_STRUCTURE_TYPE_WRITE_INDIRECT_EXECUTION_SET_SHADER_EXT = 1000572009,
	VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_PIPELINE_INFO_EXT = 1000572010,
	VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_SHADER_INFO_EXT = 1000572011,
	VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_SHADER_LAYOUT_INFO_EXT = 1000572012,
	VK_STRUCTURE_TYPE_GENERATED_COMMANDS_PIPELINE_INFO_EXT = 1000572013,
	VK_STRUCTURE_TYPE_GENERATED_COMMANDS_SHADER_INFO_EXT = 1000572014,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_8_FEATURES_KHR = 1000574000,
	VK_STRUCTURE_TYPE_MEMORY_BARRIER_ACCESS_FLAGS_3_KHR = 1000574002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_FEATURES_MESA = 1000575000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_PROPERTIES_MESA = 1000575001,
	VK_STRUCTURE_TYPE_IMAGE_ALIGNMENT_CONTROL_CREATE_INFO_MESA = 1000575002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_CONTROL_FEATURES_EXT = 1000582000,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLAMP_CONTROL_CREATE_INFO_EXT = 1000582001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_2_FEATURES_KHR = 1000586000,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_INLINE_SESSION_PARAMETERS_INFO_KHR = 1000586001,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_INLINE_SESSION_PARAMETERS_INFO_KHR = 1000586002,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_INLINE_SESSION_PARAMETERS_INFO_KHR = 1000586003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HDR_VIVID_FEATURES_HUAWEI = 1000590000,
	VK_STRUCTURE_TYPE_HDR_VIVID_DYNAMIC_METADATA_HUAWEI = 1000590001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_FEATURES_NV = 1000593000,
	VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_FLEXIBLE_DIMENSIONS_PROPERTIES_NV = 1000593001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_PROPERTIES_NV = 1000593002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_OPACITY_MICROMAP_FEATURES_ARM = 1000596000,
	VK_STRUCTURE_TYPE_IMPORT_MEMORY_METAL_HANDLE_INFO_EXT = 1000602000,
	VK_STRUCTURE_TYPE_MEMORY_METAL_HANDLE_PROPERTIES_EXT = 1000602001,
	VK_STRUCTURE_TYPE_MEMORY_GET_METAL_HANDLE_INFO_EXT = 1000602002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_KHR = 1000421000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_ROBUSTNESS_FEATURES_EXT = 1000608000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES,
	VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_RENDERING_INFO_KHR = VK_STRUCTURE_TYPE_RENDERING_INFO,
	VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO,
	VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR = VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO,
	VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2,
	VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2,
	VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2,
	VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2,
	VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO,
	VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO,
	VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES,
	VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO,
	VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO,
	VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES,
	VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO,
	VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO,
	VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO,
	VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES,
	VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,
	VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,
	VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES,
	VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO,
	VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO,
	VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO,
	VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2,
	VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2,
	VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2,
	VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2,
	VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2,
	VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO,
	VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = VK_STRUCTURE_TYPE_SUBPASS_END_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO,
	VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES,
	VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,
	VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR,
	VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS,
	VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES,
	VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES,
	VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK,
	VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO,
	VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2,
	VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2,
	VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2,
	VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2,
	VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2,
	VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO,
	VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV = VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO,
	VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO,
	VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES,
	VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO,
	VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT,
	VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES,
	VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_KHR,
	VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR = VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES,
	VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES,
	VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES,
	VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES,
	VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO,
	VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO,
	VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO,
	VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO,
	VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES,
	VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES,
	VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO_KHR = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO,
	VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO_KHR = VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES,
	VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT,
	VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,
	VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES,
	VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES,
	VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
	VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO,
	VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO,
	VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES,
	VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT = VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY,
	VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT = VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY,
	VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT = VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO,
	VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT = VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO,
	VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT = VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO,
	VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT = VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO,
	VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT = VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE,
	VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT = VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY,
	VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_MAP_INFO,
	VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES,
	VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO,
	VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES,
	VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR = VK_STRUCTURE_TYPE_MEMORY_BARRIER_2,
	VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2,
	VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2,
	VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR = VK_STRUCTURE_TYPE_DEPENDENCY_INFO,
	VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR = VK_STRUCTURE_TYPE_SUBMIT_INFO_2,
	VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES,
	VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR = VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2,
	VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR = VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2,
	VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR = VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2,
	VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR = VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2,
	VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR = VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2,
	VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR = VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2,
	VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR = VK_STRUCTURE_TYPE_BUFFER_COPY_2,
	VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR = VK_STRUCTURE_TYPE_IMAGE_COPY_2,
	VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR = VK_STRUCTURE_TYPE_IMAGE_BLIT_2,
	VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR = VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2,
	VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR = VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2,
	VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT = VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2,
	VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT = VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT,
	VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE = VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3,
	VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT = VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT = VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES,
	VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR = VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS,
	VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR = VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES,
	VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR = VK_STRUCTURE_TYPE_RENDERING_AREA_INFO,
	VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO,
	VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR = VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2,
	VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR = VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2,
	VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO,
	VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO,
	VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES,
	VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES,
	VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS_KHR = VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS,
	VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO_KHR = VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO,
	VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO_KHR = VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO,
	VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO_KHR = VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO,
	VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO_KHR = VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO,
	VK_STRUCTURE_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkStructureType {
	VK_STRUCTURE_TYPE_APPLICATION_INFO = VkStructureType.VK_STRUCTURE_TYPE_APPLICATION_INFO,
	VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO,
	VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO,
	VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO,
	VK_STRUCTURE_TYPE_SUBMIT_INFO = VkStructureType.VK_STRUCTURE_TYPE_SUBMIT_INFO,
	VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO,
	VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = VkStructureType.VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE,
	VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = VkStructureType.VK_STRUCTURE_TYPE_BIND_SPARSE_INFO,
	VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_FENCE_CREATE_INFO,
	VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO,
	VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_EVENT_CREATE_INFO,
	VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO,
	VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO,
	VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO,
	VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO,
	VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO,
	VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO,
	VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO,
	VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO,
	VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO,
	VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
	VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = VkStructureType.VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET,
	VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,
	VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO,
	VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO,
	VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,
	VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER,
	VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER,
	VK_STRUCTURE_TYPE_MEMORY_BARRIER = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_BARRIER,
	VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO,
	VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES,
	VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = VkStructureType.VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO,
	VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,
	VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS,
	VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,
	VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO,
	VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = VkStructureType.VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO,
	VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO,
	VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2,
	VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2,
	VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2,
	VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2,
	VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = VkStructureType.VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2,
	VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = VkStructureType.VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2,
	VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2,
	VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = VkStructureType.VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,
	VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO,
	VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
	VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = VkStructureType.VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES,
	VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO,
	VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO,
	VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES,
	VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO,
	VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO,
	VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES,
	VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO,
	VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO,
	VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO,
	VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES,
	VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO,
	VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO,
	VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES,
	VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO,
	VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2,
	VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2,
	VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2,
	VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2,
	VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2,
	VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO,
	VK_STRUCTURE_TYPE_SUBPASS_END_INFO = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_END_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES,
	VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES,
	VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES,
	VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES,
	VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO,
	VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO,
	VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES,
	VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT,
	VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES,
	VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO,
	VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = VkStructureType.VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO,
	VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO,
	VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES,
	VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
	VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO,
	VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO,
	VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES,
	VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES,
	VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO,
	VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES,
	VK_STRUCTURE_TYPE_MEMORY_BARRIER_2 = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_BARRIER_2,
	VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2 = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2,
	VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2 = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2,
	VK_STRUCTURE_TYPE_DEPENDENCY_INFO = VkStructureType.VK_STRUCTURE_TYPE_DEPENDENCY_INFO,
	VK_STRUCTURE_TYPE_SUBMIT_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_SUBMIT_INFO_2,
	VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES,
	VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2,
	VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2,
	VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2,
	VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2,
	VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2,
	VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2,
	VK_STRUCTURE_TYPE_BUFFER_COPY_2 = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COPY_2,
	VK_STRUCTURE_TYPE_IMAGE_COPY_2 = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_COPY_2,
	VK_STRUCTURE_TYPE_IMAGE_BLIT_2 = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_BLIT_2,
	VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2 = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2,
	VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2 = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES,
	VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES,
	VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK = VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK,
	VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES,
	VK_STRUCTURE_TYPE_RENDERING_INFO = VkStructureType.VK_STRUCTURE_TYPE_RENDERING_INFO,
	VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO = VkStructureType.VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO,
	VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES,
	VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 = VkStructureType.VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES,
	VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS,
	VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_PROPERTIES,
	VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES,
	VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES,
	VK_STRUCTURE_TYPE_MEMORY_MAP_INFO = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_MAP_INFO,
	VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES,
	VK_STRUCTURE_TYPE_RENDERING_AREA_INFO = VkStructureType.VK_STRUCTURE_TYPE_RENDERING_AREA_INFO,
	VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO,
	VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2 = VkStructureType.VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2,
	VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2 = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2,
	VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO,
	VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES,
	VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO = VkStructureType.VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO,
	VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO = VkStructureType.VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES,
	VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS = VkStructureType.VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS,
	VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO = VkStructureType.VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO,
	VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO = VkStructureType.VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO,
	VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO = VkStructureType.VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO,
	VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES,
	VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES,
	VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY,
	VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY,
	VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO = VkStructureType.VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO,
	VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO = VkStructureType.VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO,
	VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO = VkStructureType.VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO,
	VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO = VkStructureType.VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO,
	VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE = VkStructureType.VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE,
	VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY = VkStructureType.VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY,
	VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PRESENT_INFO_KHR,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR,
	VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR,
	VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR,
	VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD,
	VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT,
	VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT,
	VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT,
	VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR,
	VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR,
	VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX = VkStructureType.VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX,
	VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX = VkStructureType.VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX,
	VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX = VkStructureType.VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX,
	VK_STRUCTURE_TYPE_CU_MODULE_TEXTURING_MODE_CREATE_INFO_NVX = VkStructureType.VK_STRUCTURE_TYPE_CU_MODULE_TEXTURING_MODE_CREATE_INFO_NVX,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR,
	VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = VkStructureType.VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD,
	VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = VkStructureType.VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV,
	VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV,
	VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV,
	VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV,
	VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV,
	VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = VkStructureType.VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT,
	VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = VkStructureType.VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT,
	VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR,
	VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR,
	VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR,
	VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR,
	VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR,
	VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR,
	VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR,
	VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR,
	VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR,
	VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR,
	VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR,
	VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT,
	VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT,
	VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = VkStructureType.VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT,
	VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT,
	VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT,
	VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT,
	VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = VkStructureType.VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX,
	VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX = VkStructureType.VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_HDR_METADATA_EXT = VkStructureType.VK_STRUCTURE_TYPE_HDR_METADATA_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG,
	VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR,
	VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR,
	VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR,
	VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR,
	VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR,
	VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR,
	VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR,
	VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR,
	VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR,
	VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR,
	VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR,
	VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR,
	VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR,
	VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR,
	VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR,
	VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR,
	VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = VkStructureType.VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK,
	VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = VkStructureType.VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK,
	VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT,
	VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT,
	VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT,
	VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT,
	VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = VkStructureType.VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID,
	VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = VkStructureType.VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID,
	VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = VkStructureType.VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID,
	VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID,
	VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID,
	VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID,
	VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID = VkStructureType.VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID,
	VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD = VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD,
	VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT,
	VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT,
	VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR,
	VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR,
	VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR,
	VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV,
	VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = VkStructureType.VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT,
	VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT = VkStructureType.VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT,
	VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_GEOMETRY_NV = VkStructureType.VK_STRUCTURE_TYPE_GEOMETRY_NV,
	VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = VkStructureType.VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV,
	VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = VkStructureType.VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV,
	VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV,
	VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV,
	VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV,
	VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT,
	VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT,
	VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR,
	VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = VkStructureType.VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV,
	VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = VkStructureType.VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV = VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV,
	VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV = VkStructureType.VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL,
	VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = VkStructureType.VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL,
	VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = VkStructureType.VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL,
	VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL,
	VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL,
	VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL,
	VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD,
	VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD,
	VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA,
	VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT,
	VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR,
	VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR,
	VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_QUAD_CONTROL_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_QUAD_CONTROL_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT,
	VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT,
	VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,
	VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV,
	VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV,
	VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT,
	VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT,
	VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT,
	VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR,
	VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR,
	VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR,
	VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_MEMORY_MAP_PLACED_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_MAP_PLACED_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT,
	VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT,
	VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT,
	VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT,
	VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT,
	VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT,
	VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV,
	VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = VkStructureType.VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV,
	VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV,
	VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM,
	VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT,
	VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT,
	VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT,
	VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV,
	VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV,
	VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_PRESENT_ID_KHR = VkStructureType.VK_STRUCTURE_TYPE_PRESENT_ID_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR,
	VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV,
	VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_CUDA_MODULE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_CUDA_MODULE_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_CUDA_FUNCTION_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_CUDA_FUNCTION_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_CUDA_LAUNCH_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_CUDA_LAUNCH_INFO_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_FEATURES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_PROPERTIES_NV,
	VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV = VkStructureType.VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV,
	VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT,
	VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT,
	VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT,
	VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT,
	VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT,
	VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT,
	VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT,
	VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT,
	VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT,
	VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT,
	VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT,
	VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT,
	VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT,
	VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT,
	VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT,
	VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT,
	VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT,
	VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV,
	VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM = VkStructureType.VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT,
	VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT,
	VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT,
	VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT,
	VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT,
	VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT,
	VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT = VkStructureType.VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT,
	VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT = VkStructureType.VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT,
	VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_MODE_FIFO_LATEST_READY_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_MODE_FIFO_LATEST_READY_FEATURES_EXT,
	VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA,
	VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA,
	VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA,
	VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA,
	VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA,
	VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA,
	VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA,
	VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA,
	VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA,
	VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA,
	VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA,
	VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA,
	VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA,
	VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA,
	VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA,
	VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI,
	VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV,
	VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT,
	VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT = VkStructureType.VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT,
	VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT,
	VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT,
	VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX = VkStructureType.VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT,
	VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT,
	VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT,
	VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT,
	VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_VRS_FEATURES_HUAWEI = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_VRS_FEATURES_HUAWEI,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT,
	VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM,
	VK_STRUCTURE_TYPE_DEVICE_QUEUE_SHADER_CORE_CONTROL_CREATE_INFO_ARM = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_SHADER_CORE_CONTROL_CREATE_INFO_ARM,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_PROPERTIES_ARM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_PROPERTIES_ARM,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_PROPERTIES_ARM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_PROPERTIES_ARM,
	VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_BEGIN_INFO_ARM = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_BEGIN_INFO_ARM,
	VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_INFO_ARM = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_INFO_ARM,
	VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_SUBMIT_INFO_ARM = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_SUBMIT_INFO_ARM,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM,
	VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV,
	VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV,
	VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_LINEAR_SWEPT_SPHERES_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_LINEAR_SWEPT_SPHERES_FEATURES_NV,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_LINEAR_SWEPT_SPHERES_DATA_NV = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_LINEAR_SWEPT_SPHERES_DATA_NV,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_SPHERES_DATA_NV = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_SPHERES_DATA_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MAXIMAL_RECONVERGENCE_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MAXIMAL_RECONVERGENCE_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT,
	VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT,
	VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG = VkStructureType.VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG,
	VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG = VkStructureType.VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT = VkStructureType.VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV,
	VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV,
	VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV,
	VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV,
	VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_FEATURES_ANDROID = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_FEATURES_ANDROID,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_PROPERTIES_ANDROID = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_PROPERTIES_ANDROID,
	VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_RESOLVE_PROPERTIES_ANDROID = VkStructureType.VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_RESOLVE_PROPERTIES_ANDROID,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ANTI_LAG_FEATURES_AMD = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ANTI_LAG_FEATURES_AMD,
	VK_STRUCTURE_TYPE_ANTI_LAG_DATA_AMD = VkStructureType.VK_STRUCTURE_TYPE_ANTI_LAG_DATA_AMD,
	VK_STRUCTURE_TYPE_ANTI_LAG_PRESENTATION_INFO_AMD = VkStructureType.VK_STRUCTURE_TYPE_ANTI_LAG_PRESENTATION_INFO_AMD,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PIPELINE_BINARY_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_BINARY_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_PIPELINE_BINARY_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_BINARY_INFO_KHR,
	VK_STRUCTURE_TYPE_PIPELINE_BINARY_KEY_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_BINARY_KEY_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_RELEASE_CAPTURED_PIPELINE_DATA_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_RELEASE_CAPTURED_PIPELINE_DATA_INFO_KHR,
	VK_STRUCTURE_TYPE_PIPELINE_BINARY_DATA_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_BINARY_DATA_INFO_KHR,
	VK_STRUCTURE_TYPE_PIPELINE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_DEVICE_PIPELINE_BINARY_INTERNAL_CACHE_CONTROL_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_PIPELINE_BINARY_INTERNAL_CACHE_CONTROL_KHR,
	VK_STRUCTURE_TYPE_PIPELINE_BINARY_HANDLES_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_BINARY_HANDLES_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM,
	VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM = VkStructureType.VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC,
	VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC = VkStructureType.VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_VECTOR_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_VECTOR_FEATURES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_VECTOR_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_VECTOR_PROPERTIES_NV,
	VK_STRUCTURE_TYPE_COOPERATIVE_VECTOR_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_COOPERATIVE_VECTOR_PROPERTIES_NV,
	VK_STRUCTURE_TYPE_CONVERT_COOPERATIVE_VECTOR_MATRIX_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_CONVERT_COOPERATIVE_VECTOR_MATRIX_INFO_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_PROPERTIES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT,
	VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_LAYER_SETTINGS_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_LAYER_SETTINGS_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT,
	VK_STRUCTURE_TYPE_LATENCY_SLEEP_MODE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_LATENCY_SLEEP_MODE_INFO_NV,
	VK_STRUCTURE_TYPE_LATENCY_SLEEP_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_LATENCY_SLEEP_INFO_NV,
	VK_STRUCTURE_TYPE_SET_LATENCY_MARKER_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_SET_LATENCY_MARKER_INFO_NV,
	VK_STRUCTURE_TYPE_GET_LATENCY_MARKER_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_GET_LATENCY_MARKER_INFO_NV,
	VK_STRUCTURE_TYPE_LATENCY_TIMINGS_FRAME_REPORT_NV = VkStructureType.VK_STRUCTURE_TYPE_LATENCY_TIMINGS_FRAME_REPORT_NV,
	VK_STRUCTURE_TYPE_LATENCY_SUBMISSION_PRESENT_ID_NV = VkStructureType.VK_STRUCTURE_TYPE_LATENCY_SUBMISSION_PRESENT_ID_NV,
	VK_STRUCTURE_TYPE_OUT_OF_BAND_QUEUE_TYPE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_OUT_OF_BAND_QUEUE_TYPE_INFO_NV,
	VK_STRUCTURE_TYPE_SWAPCHAIN_LATENCY_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_LATENCY_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_LATENCY_SURFACE_CAPABILITIES_NV = VkStructureType.VK_STRUCTURE_TYPE_LATENCY_SURFACE_CAPABILITIES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR,
	VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM,
	VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM = VkStructureType.VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_CAPABILITIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_CAPABILITIES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PICTURE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PICTURE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PROFILE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PROFILE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_DPB_SLOT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_DPB_SLOT_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_CAPABILITIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_CAPABILITIES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_PICTURE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_PICTURE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_DPB_SLOT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_DPB_SLOT_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_AV1_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_AV1_FEATURES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_PROFILE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_PROFILE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_RATE_CONTROL_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_RATE_CONTROL_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_RATE_CONTROL_LAYER_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_RATE_CONTROL_LAYER_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_QUALITY_LEVEL_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_QUALITY_LEVEL_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_SESSION_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_SESSION_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_GOP_REMAINING_FRAME_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_GOP_REMAINING_FRAME_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_INLINE_QUERY_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_INLINE_QUERY_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM,
	VK_STRUCTURE_TYPE_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM,
	VK_STRUCTURE_TYPE_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM,
	VK_STRUCTURE_TYPE_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM = VkStructureType.VK_STRUCTURE_TYPE_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT,
	VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX = VkStructureType.VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX,
	VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX = VkStructureType.VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX,
	VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX,
	VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT,
	VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_KHR,
	VK_STRUCTURE_TYPE_SET_DESCRIPTOR_BUFFER_OFFSETS_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SET_DESCRIPTOR_BUFFER_OFFSETS_INFO_EXT,
	VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_BUFFER_EMBEDDED_SAMPLERS_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_BUFFER_EMBEDDED_SAMPLERS_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV,
	VK_STRUCTURE_TYPE_DISPLAY_SURFACE_STEREO_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_SURFACE_STEREO_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_DISPLAY_MODE_STEREO_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_MODE_STEREO_PROPERTIES_NV,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_CAPABILITIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_CAPABILITIES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_FORMAT_QUANTIZATION_MAP_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_FORMAT_QUANTIZATION_MAP_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_SESSION_PARAMETERS_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_SESSION_PARAMETERS_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUANTIZATION_MAP_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUANTIZATION_MAP_FEATURES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUANTIZATION_MAP_CAPABILITIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUANTIZATION_MAP_CAPABILITIES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUANTIZATION_MAP_CAPABILITIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUANTIZATION_MAP_CAPABILITIES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_FORMAT_H265_QUANTIZATION_MAP_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_FORMAT_H265_QUANTIZATION_MAP_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_QUANTIZATION_MAP_CAPABILITIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_QUANTIZATION_MAP_CAPABILITIES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_FORMAT_AV1_QUANTIZATION_MAP_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_FORMAT_AV1_QUANTIZATION_MAP_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAW_ACCESS_CHAINS_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAW_ACCESS_CHAINS_FEATURES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_RELAXED_EXTENDED_INSTRUCTION_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_RELAXED_EXTENDED_INSTRUCTION_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMMAND_BUFFER_INHERITANCE_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMMAND_BUFFER_INHERITANCE_FEATURES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_LIST_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_LIST_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_VULKAN_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_VULKAN_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT16_VECTOR_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT16_VECTOR_FEATURES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_REPLICATED_COMPOSITES_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_REPLICATED_COMPOSITES_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_VALIDATION_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_VALIDATION_FEATURES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_ACCELERATION_STRUCTURE_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_ACCELERATION_STRUCTURE_FEATURES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_ACCELERATION_STRUCTURE_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_ACCELERATION_STRUCTURE_PROPERTIES_NV,
	VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_CLUSTERS_BOTTOM_LEVEL_INPUT_NV = VkStructureType.VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_CLUSTERS_BOTTOM_LEVEL_INPUT_NV,
	VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_TRIANGLE_CLUSTER_INPUT_NV = VkStructureType.VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_TRIANGLE_CLUSTER_INPUT_NV,
	VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_MOVE_OBJECTS_INPUT_NV = VkStructureType.VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_MOVE_OBJECTS_INPUT_NV,
	VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_INPUT_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_INPUT_INFO_NV,
	VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_COMMANDS_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_COMMANDS_INFO_NV,
	VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CLUSTER_ACCELERATION_STRUCTURE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CLUSTER_ACCELERATION_STRUCTURE_CREATE_INFO_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PARTITIONED_ACCELERATION_STRUCTURE_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PARTITIONED_ACCELERATION_STRUCTURE_FEATURES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PARTITIONED_ACCELERATION_STRUCTURE_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PARTITIONED_ACCELERATION_STRUCTURE_PROPERTIES_NV,
	VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_PARTITIONED_ACCELERATION_STRUCTURE_NV = VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_PARTITIONED_ACCELERATION_STRUCTURE_NV,
	VK_STRUCTURE_TYPE_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCES_INPUT_NV = VkStructureType.VK_STRUCTURE_TYPE_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCES_INPUT_NV,
	VK_STRUCTURE_TYPE_BUILD_PARTITIONED_ACCELERATION_STRUCTURE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_BUILD_PARTITIONED_ACCELERATION_STRUCTURE_INFO_NV,
	VK_STRUCTURE_TYPE_PARTITIONED_ACCELERATION_STRUCTURE_FLAGS_NV = VkStructureType.VK_STRUCTURE_TYPE_PARTITIONED_ACCELERATION_STRUCTURE_FLAGS_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_EXT,
	VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_EXT,
	VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_EXT = VkStructureType.VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_EXT,
	VK_STRUCTURE_TYPE_WRITE_INDIRECT_EXECUTION_SET_PIPELINE_EXT = VkStructureType.VK_STRUCTURE_TYPE_WRITE_INDIRECT_EXECUTION_SET_PIPELINE_EXT,
	VK_STRUCTURE_TYPE_WRITE_INDIRECT_EXECUTION_SET_SHADER_EXT = VkStructureType.VK_STRUCTURE_TYPE_WRITE_INDIRECT_EXECUTION_SET_SHADER_EXT,
	VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_PIPELINE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_PIPELINE_INFO_EXT,
	VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_SHADER_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_SHADER_INFO_EXT,
	VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_SHADER_LAYOUT_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_SHADER_LAYOUT_INFO_EXT,
	VK_STRUCTURE_TYPE_GENERATED_COMMANDS_PIPELINE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_GENERATED_COMMANDS_PIPELINE_INFO_EXT,
	VK_STRUCTURE_TYPE_GENERATED_COMMANDS_SHADER_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_GENERATED_COMMANDS_SHADER_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_8_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_8_FEATURES_KHR,
	VK_STRUCTURE_TYPE_MEMORY_BARRIER_ACCESS_FLAGS_3_KHR = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_BARRIER_ACCESS_FLAGS_3_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_FEATURES_MESA = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_FEATURES_MESA,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_PROPERTIES_MESA = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_PROPERTIES_MESA,
	VK_STRUCTURE_TYPE_IMAGE_ALIGNMENT_CONTROL_CREATE_INFO_MESA = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_ALIGNMENT_CONTROL_CREATE_INFO_MESA,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_CONTROL_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_CONTROL_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLAMP_CONTROL_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLAMP_CONTROL_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_2_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_2_FEATURES_KHR,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_INLINE_SESSION_PARAMETERS_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_INLINE_SESSION_PARAMETERS_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_INLINE_SESSION_PARAMETERS_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_INLINE_SESSION_PARAMETERS_INFO_KHR,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_INLINE_SESSION_PARAMETERS_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_INLINE_SESSION_PARAMETERS_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HDR_VIVID_FEATURES_HUAWEI = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HDR_VIVID_FEATURES_HUAWEI,
	VK_STRUCTURE_TYPE_HDR_VIVID_DYNAMIC_METADATA_HUAWEI = VkStructureType.VK_STRUCTURE_TYPE_HDR_VIVID_DYNAMIC_METADATA_HUAWEI,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_FEATURES_NV,
	VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_FLEXIBLE_DIMENSIONS_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_FLEXIBLE_DIMENSIONS_PROPERTIES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_PROPERTIES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_OPACITY_MICROMAP_FEATURES_ARM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_OPACITY_MICROMAP_FEATURES_ARM,
	VK_STRUCTURE_TYPE_IMPORT_MEMORY_METAL_HANDLE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_METAL_HANDLE_INFO_EXT,
	VK_STRUCTURE_TYPE_MEMORY_METAL_HANDLE_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_METAL_HANDLE_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_MEMORY_GET_METAL_HANDLE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_METAL_HANDLE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_ROBUSTNESS_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_ROBUSTNESS_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES,
	VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_RENDERING_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_RENDERING_INFO_KHR,
	VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR,
	VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR,
	VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR,
	VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR,
	VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR,
	VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR,
	VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR,
	VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR,
	VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR,
	VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR,
	VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR,
	VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR,
	VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR,
	VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR,
	VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR,
	VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR,
	VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR,
	VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR,
	VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR,
	VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR,
	VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR,
	VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR,
	VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR,
	VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR,
	VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT,
	VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR,
	VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR,
	VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR,
	VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR,
	VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR,
	VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR,
	VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR,
	VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR,
	VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR,
	VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR,
	VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT,
	VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR,
	VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR,
	VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR,
	VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = VkStructureType.VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES_KHR,
	VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO_KHR,
	VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR,
	VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR = VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR,
	VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR = VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT,
	VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR,
	VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR,
	VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR,
	VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT,
	VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT,
	VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT,
	VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT,
	VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT,
	VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT,
	VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT = VkStructureType.VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT,
	VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT = VkStructureType.VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT,
	VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR,
	VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT,
	VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT,
	VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR,
	VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR,
	VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR,
	VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR,
	VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR,
	VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT,
	VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR,
	VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR,
	VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR,
	VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR,
	VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR,
	VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR,
	VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR,
	VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR,
	VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR,
	VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR,
	VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR,
	VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT = VkStructureType.VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT,
	VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE,
	VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE = VkStructureType.VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE,
	VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR = VkStructureType.VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR,
	VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR,
	VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR,
	VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR,
	VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR,
	VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR,
	VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS_KHR = VkStructureType.VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS_KHR,
	VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO_KHR,
	VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO_KHR,
	VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO_KHR,
	VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO_KHR,
	VK_STRUCTURE_TYPE_MAX_ENUM = VkStructureType.VK_STRUCTURE_TYPE_MAX_ENUM,
}
enum VkSubgroupFeatureFlagBits {
	VK_SUBGROUP_FEATURE_BASIC_BIT = 0x00000001,
	VK_SUBGROUP_FEATURE_VOTE_BIT = 0x00000002,
	VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 0x00000004,
	VK_SUBGROUP_FEATURE_BALLOT_BIT = 0x00000008,
	VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 0x00000010,
	VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 0x00000020,
	VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 0x00000040,
	VK_SUBGROUP_FEATURE_QUAD_BIT = 0x00000080,
	VK_SUBGROUP_FEATURE_ROTATE_BIT = 0x00000200,
	VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT = 0x00000400,
	VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 0x00000100,
	VK_SUBGROUP_FEATURE_ROTATE_BIT_KHR = VK_SUBGROUP_FEATURE_ROTATE_BIT,
	VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT_KHR = VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT,
	VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkSubgroupFeatureFlagBits {
	VK_SUBGROUP_FEATURE_BASIC_BIT = VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_BASIC_BIT,
	VK_SUBGROUP_FEATURE_VOTE_BIT = VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_VOTE_BIT,
	VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_ARITHMETIC_BIT,
	VK_SUBGROUP_FEATURE_BALLOT_BIT = VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_BALLOT_BIT,
	VK_SUBGROUP_FEATURE_SHUFFLE_BIT = VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_SHUFFLE_BIT,
	VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT,
	VK_SUBGROUP_FEATURE_CLUSTERED_BIT = VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_CLUSTERED_BIT,
	VK_SUBGROUP_FEATURE_QUAD_BIT = VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_QUAD_BIT,
	VK_SUBGROUP_FEATURE_ROTATE_BIT = VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_ROTATE_BIT,
	VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT = VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT,
	VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV,
	VK_SUBGROUP_FEATURE_ROTATE_BIT_KHR = VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_ROTATE_BIT_KHR,
	VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT_KHR = VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT_KHR,
	VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM,
}
enum VkSubmitFlagBits {
	VK_SUBMIT_PROTECTED_BIT = 0x00000001,
	VK_SUBMIT_PROTECTED_BIT_KHR = VK_SUBMIT_PROTECTED_BIT,
	VK_SUBMIT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkSubmitFlagBits {
	VK_SUBMIT_PROTECTED_BIT = VkSubmitFlagBits.VK_SUBMIT_PROTECTED_BIT,
	VK_SUBMIT_PROTECTED_BIT_KHR = VkSubmitFlagBits.VK_SUBMIT_PROTECTED_BIT_KHR,
	VK_SUBMIT_FLAG_BITS_MAX_ENUM = VkSubmitFlagBits.VK_SUBMIT_FLAG_BITS_MAX_ENUM,
}
enum VkSubpassContents {
	VK_SUBPASS_CONTENTS_INLINE = 0,
	VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,
	VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_KHR = 1000451000,
	VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_EXT = VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_KHR,
	VK_SUBPASS_CONTENTS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkSubpassContents {
	VK_SUBPASS_CONTENTS_INLINE = VkSubpassContents.VK_SUBPASS_CONTENTS_INLINE,
	VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = VkSubpassContents.VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS,
	VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_KHR = VkSubpassContents.VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_KHR,
	VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_EXT = VkSubpassContents.VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_EXT,
	VK_SUBPASS_CONTENTS_MAX_ENUM = VkSubpassContents.VK_SUBPASS_CONTENTS_MAX_ENUM,
}
enum VkSubpassDescriptionFlagBits {
	VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 0x00000001,
	VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 0x00000002,
	VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 0x00000004,
	VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 0x00000008,
	VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT = 0x00000010,
	VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = 0x00000020,
	VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = 0x00000040,
	VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT = 0x00000080,
	VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM = VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT,
	VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT,
	VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT,
	VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkSubpassDescriptionFlagBits {
	VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX,
	VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX,
	VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM,
	VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM,
	VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT = VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT,
	VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT,
	VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT,
	VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT = VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT,
	VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM = VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM,
	VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM,
	VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM,
	VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM,
}
enum VkSubpassMergeStatusEXT {
	VK_SUBPASS_MERGE_STATUS_MERGED_EXT = 0,
	VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT = 1,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT = 2,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT = 3,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT = 4,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT = 5,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT = 6,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT = 7,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT = 8,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT = 9,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT = 10,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT = 11,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT = 12,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT = 13,
	VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkSubpassMergeStatusEXT {
	VK_SUBPASS_MERGE_STATUS_MERGED_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_MERGED_EXT,
	VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT,
	VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT,
}
enum VkSurfaceCounterFlagBitsEXT {
	VK_SURFACE_COUNTER_VBLANK_BIT_EXT = 0x00000001,
	VK_SURFACE_COUNTER_VBLANK_EXT = VK_SURFACE_COUNTER_VBLANK_BIT_EXT,
	VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkSurfaceCounterFlagBitsEXT {
	VK_SURFACE_COUNTER_VBLANK_BIT_EXT = VkSurfaceCounterFlagBitsEXT.VK_SURFACE_COUNTER_VBLANK_BIT_EXT,
	VK_SURFACE_COUNTER_VBLANK_EXT = VkSurfaceCounterFlagBitsEXT.VK_SURFACE_COUNTER_VBLANK_EXT,
	VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = VkSurfaceCounterFlagBitsEXT.VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT,
}
enum VkSurfaceTransformFlagBitsKHR {
	VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 0x00000001,
	VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 0x00000002,
	VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 0x00000004,
	VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 0x00000008,
	VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 0x00000010,
	VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 0x00000020,
	VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 0x00000040,
	VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 0x00000080,
	VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 0x00000100,
	VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkSurfaceTransformFlagBitsKHR {
	VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR,
	VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR,
	VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR,
	VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR,
	VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR,
	VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR,
	VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR,
	VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR,
	VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR,
	VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkSwapchainCreateFlagBitsKHR {
	VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 0x00000001,
	VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 0x00000002,
	VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 0x00000004,
	VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT = 0x00000008,
	VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkSwapchainCreateFlagBitsKHR {
	VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR,
	VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR,
	VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR,
	VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT = VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT,
	VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkSystemAllocationScope {
	VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,
	VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,
	VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2,
	VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,
	VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,
	VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkSystemAllocationScope {
	VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_COMMAND,
	VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_OBJECT,
	VK_SYSTEM_ALLOCATION_SCOPE_CACHE = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_CACHE,
	VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_DEVICE,
	VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE,
	VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM,
}
enum VkTessellationDomainOrigin {
	VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0,
	VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1,
	VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT,
	VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT,
	VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkTessellationDomainOrigin {
	VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT,
	VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT,
	VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR,
	VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR,
	VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM,
}
enum VkTimeDomainKHR {
	VK_TIME_DOMAIN_DEVICE_KHR = 0,
	VK_TIME_DOMAIN_CLOCK_MONOTONIC_KHR = 1,
	VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR = 2,
	VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR = 3,
	VK_TIME_DOMAIN_DEVICE_EXT = VK_TIME_DOMAIN_DEVICE_KHR,
	VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = VK_TIME_DOMAIN_CLOCK_MONOTONIC_KHR,
	VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR,
	VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR,
	VK_TIME_DOMAIN_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkTimeDomainKHR {
	VK_TIME_DOMAIN_DEVICE_KHR = VkTimeDomainKHR.VK_TIME_DOMAIN_DEVICE_KHR,
	VK_TIME_DOMAIN_CLOCK_MONOTONIC_KHR = VkTimeDomainKHR.VK_TIME_DOMAIN_CLOCK_MONOTONIC_KHR,
	VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR = VkTimeDomainKHR.VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR,
	VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR = VkTimeDomainKHR.VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR,
	VK_TIME_DOMAIN_DEVICE_EXT = VkTimeDomainKHR.VK_TIME_DOMAIN_DEVICE_EXT,
	VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = VkTimeDomainKHR.VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT,
	VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = VkTimeDomainKHR.VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT,
	VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = VkTimeDomainKHR.VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT,
	VK_TIME_DOMAIN_MAX_ENUM_KHR = VkTimeDomainKHR.VK_TIME_DOMAIN_MAX_ENUM_KHR,
}
enum VkToolPurposeFlagBits {
	VK_TOOL_PURPOSE_VALIDATION_BIT = 0x00000001,
	VK_TOOL_PURPOSE_PROFILING_BIT = 0x00000002,
	VK_TOOL_PURPOSE_TRACING_BIT = 0x00000004,
	VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT = 0x00000008,
	VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT = 0x00000010,
	VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 0x00000020,
	VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 0x00000040,
	VK_TOOL_PURPOSE_VALIDATION_BIT_EXT = VK_TOOL_PURPOSE_VALIDATION_BIT,
	VK_TOOL_PURPOSE_PROFILING_BIT_EXT = VK_TOOL_PURPOSE_PROFILING_BIT,
	VK_TOOL_PURPOSE_TRACING_BIT_EXT = VK_TOOL_PURPOSE_TRACING_BIT,
	VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT,
	VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT,
	VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkToolPurposeFlagBits {
	VK_TOOL_PURPOSE_VALIDATION_BIT = VkToolPurposeFlagBits.VK_TOOL_PURPOSE_VALIDATION_BIT,
	VK_TOOL_PURPOSE_PROFILING_BIT = VkToolPurposeFlagBits.VK_TOOL_PURPOSE_PROFILING_BIT,
	VK_TOOL_PURPOSE_TRACING_BIT = VkToolPurposeFlagBits.VK_TOOL_PURPOSE_TRACING_BIT,
	VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT = VkToolPurposeFlagBits.VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT,
	VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT = VkToolPurposeFlagBits.VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT,
	VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = VkToolPurposeFlagBits.VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT,
	VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = VkToolPurposeFlagBits.VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT,
	VK_TOOL_PURPOSE_VALIDATION_BIT_EXT = VkToolPurposeFlagBits.VK_TOOL_PURPOSE_VALIDATION_BIT_EXT,
	VK_TOOL_PURPOSE_PROFILING_BIT_EXT = VkToolPurposeFlagBits.VK_TOOL_PURPOSE_PROFILING_BIT_EXT,
	VK_TOOL_PURPOSE_TRACING_BIT_EXT = VkToolPurposeFlagBits.VK_TOOL_PURPOSE_TRACING_BIT_EXT,
	VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = VkToolPurposeFlagBits.VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT,
	VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = VkToolPurposeFlagBits.VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT,
	VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM = VkToolPurposeFlagBits.VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM,
}
enum VkValidationCacheHeaderVersionEXT {
	VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1,
	VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkValidationCacheHeaderVersionEXT {
	VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = VkValidationCacheHeaderVersionEXT.VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT,
	VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = VkValidationCacheHeaderVersionEXT.VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT,
}
enum VkValidationCheckEXT {
	VK_VALIDATION_CHECK_ALL_EXT = 0,
	VK_VALIDATION_CHECK_SHADERS_EXT = 1,
	VK_VALIDATION_CHECK_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkValidationCheckEXT {
	VK_VALIDATION_CHECK_ALL_EXT = VkValidationCheckEXT.VK_VALIDATION_CHECK_ALL_EXT,
	VK_VALIDATION_CHECK_SHADERS_EXT = VkValidationCheckEXT.VK_VALIDATION_CHECK_SHADERS_EXT,
	VK_VALIDATION_CHECK_MAX_ENUM_EXT = VkValidationCheckEXT.VK_VALIDATION_CHECK_MAX_ENUM_EXT,
}
enum VkValidationFeatureDisableEXT {
	VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0,
	VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1,
	VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2,
	VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3,
	VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4,
	VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5,
	VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6,
	VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT = 7,
	VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkValidationFeatureDisableEXT {
	VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_ALL_EXT,
	VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT,
	VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT,
	VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT,
	VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT,
	VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT,
	VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT,
	VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT = VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT,
	VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT,
}
enum VkValidationFeatureEnableEXT {
	VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0,
	VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1,
	VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2,
	VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3,
	VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4,
	VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
enum : VkValidationFeatureEnableEXT {
	VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT,
	VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT,
	VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT,
	VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT,
	VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT,
	VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT,
}
enum VkVendorId {
	VK_VENDOR_ID_KHRONOS = 0x10000,
	VK_VENDOR_ID_VIV = 0x10001,
	VK_VENDOR_ID_VSI = 0x10002,
	VK_VENDOR_ID_KAZAN = 0x10003,
	VK_VENDOR_ID_CODEPLAY = 0x10004,
	VK_VENDOR_ID_MESA = 0x10005,
	VK_VENDOR_ID_POCL = 0x10006,
	VK_VENDOR_ID_MOBILEYE = 0x10007,
	VK_VENDOR_ID_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkVendorId {
	VK_VENDOR_ID_KHRONOS = VkVendorId.VK_VENDOR_ID_KHRONOS,
	VK_VENDOR_ID_VIV = VkVendorId.VK_VENDOR_ID_VIV,
	VK_VENDOR_ID_VSI = VkVendorId.VK_VENDOR_ID_VSI,
	VK_VENDOR_ID_KAZAN = VkVendorId.VK_VENDOR_ID_KAZAN,
	VK_VENDOR_ID_CODEPLAY = VkVendorId.VK_VENDOR_ID_CODEPLAY,
	VK_VENDOR_ID_MESA = VkVendorId.VK_VENDOR_ID_MESA,
	VK_VENDOR_ID_POCL = VkVendorId.VK_VENDOR_ID_POCL,
	VK_VENDOR_ID_MOBILEYE = VkVendorId.VK_VENDOR_ID_MOBILEYE,
	VK_VENDOR_ID_MAX_ENUM = VkVendorId.VK_VENDOR_ID_MAX_ENUM,
}
enum VkVertexInputRate {
	VK_VERTEX_INPUT_RATE_VERTEX = 0,
	VK_VERTEX_INPUT_RATE_INSTANCE = 1,
	VK_VERTEX_INPUT_RATE_MAX_ENUM = 0x7FFFFFFF,
}
enum : VkVertexInputRate {
	VK_VERTEX_INPUT_RATE_VERTEX = VkVertexInputRate.VK_VERTEX_INPUT_RATE_VERTEX,
	VK_VERTEX_INPUT_RATE_INSTANCE = VkVertexInputRate.VK_VERTEX_INPUT_RATE_INSTANCE,
	VK_VERTEX_INPUT_RATE_MAX_ENUM = VkVertexInputRate.VK_VERTEX_INPUT_RATE_MAX_ENUM,
}
enum VkVideoCapabilityFlagBitsKHR {
	VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR = 0x00000001,
	VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR = 0x00000002,
	VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoCapabilityFlagBitsKHR {
	VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR = VkVideoCapabilityFlagBitsKHR.VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR,
	VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR = VkVideoCapabilityFlagBitsKHR.VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR,
	VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = VkVideoCapabilityFlagBitsKHR.VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoChromaSubsamplingFlagBitsKHR {
	VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR = 0,
	VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR = 0x00000001,
	VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR = 0x00000002,
	VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR = 0x00000004,
	VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR = 0x00000008,
	VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoChromaSubsamplingFlagBitsKHR {
	VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR = VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR,
	VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR = VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR,
	VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR = VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR,
	VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR = VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR,
	VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR = VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR,
	VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR = VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoCodecOperationFlagBitsKHR {
	VK_VIDEO_CODEC_OPERATION_NONE_KHR = 0,
	VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR = 0x00010000,
	VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR = 0x00020000,
	VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR = 0x00000001,
	VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR = 0x00000002,
	VK_VIDEO_CODEC_OPERATION_DECODE_AV1_BIT_KHR = 0x00000004,
	VK_VIDEO_CODEC_OPERATION_ENCODE_AV1_BIT_KHR = 0x00040000,
	VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoCodecOperationFlagBitsKHR {
	VK_VIDEO_CODEC_OPERATION_NONE_KHR = VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_NONE_KHR,
	VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR = VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR,
	VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR = VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR,
	VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR = VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR,
	VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR = VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR,
	VK_VIDEO_CODEC_OPERATION_DECODE_AV1_BIT_KHR = VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_DECODE_AV1_BIT_KHR,
	VK_VIDEO_CODEC_OPERATION_ENCODE_AV1_BIT_KHR = VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_ENCODE_AV1_BIT_KHR,
	VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR = VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoCodingControlFlagBitsKHR {
	VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR = 0x00000001,
	VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR = 0x00000002,
	VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR = 0x00000004,
	VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoCodingControlFlagBitsKHR {
	VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR = VkVideoCodingControlFlagBitsKHR.VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR,
	VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR = VkVideoCodingControlFlagBitsKHR.VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR,
	VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR = VkVideoCodingControlFlagBitsKHR.VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR,
	VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR = VkVideoCodingControlFlagBitsKHR.VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoComponentBitDepthFlagBitsKHR {
	VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR = 0,
	VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR = 0x00000001,
	VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR = 0x00000004,
	VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR = 0x00000010,
	VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoComponentBitDepthFlagBitsKHR {
	VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR = VkVideoComponentBitDepthFlagBitsKHR.VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR,
	VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR = VkVideoComponentBitDepthFlagBitsKHR.VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR,
	VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR = VkVideoComponentBitDepthFlagBitsKHR.VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR,
	VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR = VkVideoComponentBitDepthFlagBitsKHR.VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR,
	VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR = VkVideoComponentBitDepthFlagBitsKHR.VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoDecodeCapabilityFlagBitsKHR {
	VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR = 0x00000001,
	VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR = 0x00000002,
	VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoDecodeCapabilityFlagBitsKHR {
	VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR = VkVideoDecodeCapabilityFlagBitsKHR.VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR,
	VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR = VkVideoDecodeCapabilityFlagBitsKHR.VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR,
	VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = VkVideoDecodeCapabilityFlagBitsKHR.VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoDecodeH264PictureLayoutFlagBitsKHR {
	VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR = 0,
	VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR = 0x00000001,
	VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR = 0x00000002,
	VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoDecodeH264PictureLayoutFlagBitsKHR {
	VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR = VkVideoDecodeH264PictureLayoutFlagBitsKHR.VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR,
	VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR = VkVideoDecodeH264PictureLayoutFlagBitsKHR.VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR,
	VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR = VkVideoDecodeH264PictureLayoutFlagBitsKHR.VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR,
	VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR = VkVideoDecodeH264PictureLayoutFlagBitsKHR.VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoDecodeUsageFlagBitsKHR {
	VK_VIDEO_DECODE_USAGE_DEFAULT_KHR = 0,
	VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR = 0x00000001,
	VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR = 0x00000002,
	VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR = 0x00000004,
	VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoDecodeUsageFlagBitsKHR {
	VK_VIDEO_DECODE_USAGE_DEFAULT_KHR = VkVideoDecodeUsageFlagBitsKHR.VK_VIDEO_DECODE_USAGE_DEFAULT_KHR,
	VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR = VkVideoDecodeUsageFlagBitsKHR.VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR,
	VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR = VkVideoDecodeUsageFlagBitsKHR.VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR,
	VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR = VkVideoDecodeUsageFlagBitsKHR.VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR,
	VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR = VkVideoDecodeUsageFlagBitsKHR.VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoEncodeAV1CapabilityFlagBitsKHR {
	VK_VIDEO_ENCODE_AV1_CAPABILITY_PER_RATE_CONTROL_GROUP_MIN_MAX_Q_INDEX_BIT_KHR = 0x00000001,
	VK_VIDEO_ENCODE_AV1_CAPABILITY_GENERATE_OBU_EXTENSION_HEADER_BIT_KHR = 0x00000002,
	VK_VIDEO_ENCODE_AV1_CAPABILITY_PRIMARY_REFERENCE_CDF_ONLY_BIT_KHR = 0x00000004,
	VK_VIDEO_ENCODE_AV1_CAPABILITY_FRAME_SIZE_OVERRIDE_BIT_KHR = 0x00000008,
	VK_VIDEO_ENCODE_AV1_CAPABILITY_MOTION_VECTOR_SCALING_BIT_KHR = 0x00000010,
	VK_VIDEO_ENCODE_AV1_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoEncodeAV1CapabilityFlagBitsKHR {
	VK_VIDEO_ENCODE_AV1_CAPABILITY_PER_RATE_CONTROL_GROUP_MIN_MAX_Q_INDEX_BIT_KHR = VkVideoEncodeAV1CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_AV1_CAPABILITY_PER_RATE_CONTROL_GROUP_MIN_MAX_Q_INDEX_BIT_KHR,
	VK_VIDEO_ENCODE_AV1_CAPABILITY_GENERATE_OBU_EXTENSION_HEADER_BIT_KHR = VkVideoEncodeAV1CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_AV1_CAPABILITY_GENERATE_OBU_EXTENSION_HEADER_BIT_KHR,
	VK_VIDEO_ENCODE_AV1_CAPABILITY_PRIMARY_REFERENCE_CDF_ONLY_BIT_KHR = VkVideoEncodeAV1CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_AV1_CAPABILITY_PRIMARY_REFERENCE_CDF_ONLY_BIT_KHR,
	VK_VIDEO_ENCODE_AV1_CAPABILITY_FRAME_SIZE_OVERRIDE_BIT_KHR = VkVideoEncodeAV1CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_AV1_CAPABILITY_FRAME_SIZE_OVERRIDE_BIT_KHR,
	VK_VIDEO_ENCODE_AV1_CAPABILITY_MOTION_VECTOR_SCALING_BIT_KHR = VkVideoEncodeAV1CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_AV1_CAPABILITY_MOTION_VECTOR_SCALING_BIT_KHR,
	VK_VIDEO_ENCODE_AV1_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = VkVideoEncodeAV1CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_AV1_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoEncodeAV1PredictionModeKHR {
	VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_INTRA_ONLY_KHR = 0,
	VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_SINGLE_REFERENCE_KHR = 1,
	VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_UNIDIRECTIONAL_COMPOUND_KHR = 2,
	VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_BIDIRECTIONAL_COMPOUND_KHR = 3,
	VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoEncodeAV1PredictionModeKHR {
	VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_INTRA_ONLY_KHR = VkVideoEncodeAV1PredictionModeKHR.VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_INTRA_ONLY_KHR,
	VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_SINGLE_REFERENCE_KHR = VkVideoEncodeAV1PredictionModeKHR.VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_SINGLE_REFERENCE_KHR,
	VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_UNIDIRECTIONAL_COMPOUND_KHR = VkVideoEncodeAV1PredictionModeKHR.VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_UNIDIRECTIONAL_COMPOUND_KHR,
	VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_BIDIRECTIONAL_COMPOUND_KHR = VkVideoEncodeAV1PredictionModeKHR.VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_BIDIRECTIONAL_COMPOUND_KHR,
	VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_MAX_ENUM_KHR = VkVideoEncodeAV1PredictionModeKHR.VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_MAX_ENUM_KHR,
}
enum VkVideoEncodeAV1RateControlFlagBitsKHR {
	VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REGULAR_GOP_BIT_KHR = 0x00000001,
	VK_VIDEO_ENCODE_AV1_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR = 0x00000002,
	VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR = 0x00000004,
	VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR = 0x00000008,
	VK_VIDEO_ENCODE_AV1_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoEncodeAV1RateControlFlagBitsKHR {
	VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REGULAR_GOP_BIT_KHR = VkVideoEncodeAV1RateControlFlagBitsKHR.VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REGULAR_GOP_BIT_KHR,
	VK_VIDEO_ENCODE_AV1_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR = VkVideoEncodeAV1RateControlFlagBitsKHR.VK_VIDEO_ENCODE_AV1_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR,
	VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR = VkVideoEncodeAV1RateControlFlagBitsKHR.VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR,
	VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR = VkVideoEncodeAV1RateControlFlagBitsKHR.VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR,
	VK_VIDEO_ENCODE_AV1_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR = VkVideoEncodeAV1RateControlFlagBitsKHR.VK_VIDEO_ENCODE_AV1_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoEncodeAV1RateControlGroupKHR {
	VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_INTRA_KHR = 0,
	VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_PREDICTIVE_KHR = 1,
	VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_BIPREDICTIVE_KHR = 2,
	VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoEncodeAV1RateControlGroupKHR {
	VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_INTRA_KHR = VkVideoEncodeAV1RateControlGroupKHR.VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_INTRA_KHR,
	VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_PREDICTIVE_KHR = VkVideoEncodeAV1RateControlGroupKHR.VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_PREDICTIVE_KHR,
	VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_BIPREDICTIVE_KHR = VkVideoEncodeAV1RateControlGroupKHR.VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_BIPREDICTIVE_KHR,
	VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_MAX_ENUM_KHR = VkVideoEncodeAV1RateControlGroupKHR.VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_MAX_ENUM_KHR,
}
enum VkVideoEncodeAV1StdFlagBitsKHR {
	VK_VIDEO_ENCODE_AV1_STD_UNIFORM_TILE_SPACING_FLAG_SET_BIT_KHR = 0x00000001,
	VK_VIDEO_ENCODE_AV1_STD_SKIP_MODE_PRESENT_UNSET_BIT_KHR = 0x00000002,
	VK_VIDEO_ENCODE_AV1_STD_PRIMARY_REF_FRAME_BIT_KHR = 0x00000004,
	VK_VIDEO_ENCODE_AV1_STD_DELTA_Q_BIT_KHR = 0x00000008,
	VK_VIDEO_ENCODE_AV1_STD_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoEncodeAV1StdFlagBitsKHR {
	VK_VIDEO_ENCODE_AV1_STD_UNIFORM_TILE_SPACING_FLAG_SET_BIT_KHR = VkVideoEncodeAV1StdFlagBitsKHR.VK_VIDEO_ENCODE_AV1_STD_UNIFORM_TILE_SPACING_FLAG_SET_BIT_KHR,
	VK_VIDEO_ENCODE_AV1_STD_SKIP_MODE_PRESENT_UNSET_BIT_KHR = VkVideoEncodeAV1StdFlagBitsKHR.VK_VIDEO_ENCODE_AV1_STD_SKIP_MODE_PRESENT_UNSET_BIT_KHR,
	VK_VIDEO_ENCODE_AV1_STD_PRIMARY_REF_FRAME_BIT_KHR = VkVideoEncodeAV1StdFlagBitsKHR.VK_VIDEO_ENCODE_AV1_STD_PRIMARY_REF_FRAME_BIT_KHR,
	VK_VIDEO_ENCODE_AV1_STD_DELTA_Q_BIT_KHR = VkVideoEncodeAV1StdFlagBitsKHR.VK_VIDEO_ENCODE_AV1_STD_DELTA_Q_BIT_KHR,
	VK_VIDEO_ENCODE_AV1_STD_FLAG_BITS_MAX_ENUM_KHR = VkVideoEncodeAV1StdFlagBitsKHR.VK_VIDEO_ENCODE_AV1_STD_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoEncodeAV1SuperblockSizeFlagBitsKHR {
	VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_64_BIT_KHR = 0x00000001,
	VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_128_BIT_KHR = 0x00000002,
	VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoEncodeAV1SuperblockSizeFlagBitsKHR {
	VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_64_BIT_KHR = VkVideoEncodeAV1SuperblockSizeFlagBitsKHR.VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_64_BIT_KHR,
	VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_128_BIT_KHR = VkVideoEncodeAV1SuperblockSizeFlagBitsKHR.VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_128_BIT_KHR,
	VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR = VkVideoEncodeAV1SuperblockSizeFlagBitsKHR.VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoEncodeCapabilityFlagBitsKHR {
	VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR = 0x00000001,
	VK_VIDEO_ENCODE_CAPABILITY_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_DETECTION_BIT_KHR = 0x00000002,
	VK_VIDEO_ENCODE_CAPABILITY_QUANTIZATION_DELTA_MAP_BIT_KHR = 0x00000004,
	VK_VIDEO_ENCODE_CAPABILITY_EMPHASIS_MAP_BIT_KHR = 0x00000008,
	VK_VIDEO_ENCODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoEncodeCapabilityFlagBitsKHR {
	VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR = VkVideoEncodeCapabilityFlagBitsKHR.VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR,
	VK_VIDEO_ENCODE_CAPABILITY_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_DETECTION_BIT_KHR = VkVideoEncodeCapabilityFlagBitsKHR.VK_VIDEO_ENCODE_CAPABILITY_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_DETECTION_BIT_KHR,
	VK_VIDEO_ENCODE_CAPABILITY_QUANTIZATION_DELTA_MAP_BIT_KHR = VkVideoEncodeCapabilityFlagBitsKHR.VK_VIDEO_ENCODE_CAPABILITY_QUANTIZATION_DELTA_MAP_BIT_KHR,
	VK_VIDEO_ENCODE_CAPABILITY_EMPHASIS_MAP_BIT_KHR = VkVideoEncodeCapabilityFlagBitsKHR.VK_VIDEO_ENCODE_CAPABILITY_EMPHASIS_MAP_BIT_KHR,
	VK_VIDEO_ENCODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = VkVideoEncodeCapabilityFlagBitsKHR.VK_VIDEO_ENCODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoEncodeContentFlagBitsKHR {
	VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR = 0,
	VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR = 0x00000001,
	VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR = 0x00000002,
	VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR = 0x00000004,
	VK_VIDEO_ENCODE_CONTENT_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoEncodeContentFlagBitsKHR {
	VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR = VkVideoEncodeContentFlagBitsKHR.VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR,
	VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR = VkVideoEncodeContentFlagBitsKHR.VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR,
	VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR = VkVideoEncodeContentFlagBitsKHR.VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR,
	VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR = VkVideoEncodeContentFlagBitsKHR.VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR,
	VK_VIDEO_ENCODE_CONTENT_FLAG_BITS_MAX_ENUM_KHR = VkVideoEncodeContentFlagBitsKHR.VK_VIDEO_ENCODE_CONTENT_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoEncodeFeedbackFlagBitsKHR {
	VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR = 0x00000001,
	VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR = 0x00000002,
	VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR = 0x00000004,
	VK_VIDEO_ENCODE_FEEDBACK_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoEncodeFeedbackFlagBitsKHR {
	VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR = VkVideoEncodeFeedbackFlagBitsKHR.VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR,
	VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR = VkVideoEncodeFeedbackFlagBitsKHR.VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR,
	VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR = VkVideoEncodeFeedbackFlagBitsKHR.VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR,
	VK_VIDEO_ENCODE_FEEDBACK_FLAG_BITS_MAX_ENUM_KHR = VkVideoEncodeFeedbackFlagBitsKHR.VK_VIDEO_ENCODE_FEEDBACK_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoEncodeFlagBitsKHR {
	VK_VIDEO_ENCODE_WITH_QUANTIZATION_DELTA_MAP_BIT_KHR = 0x00000001,
	VK_VIDEO_ENCODE_WITH_EMPHASIS_MAP_BIT_KHR = 0x00000002,
	VK_VIDEO_ENCODE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoEncodeFlagBitsKHR {
	VK_VIDEO_ENCODE_WITH_QUANTIZATION_DELTA_MAP_BIT_KHR = VkVideoEncodeFlagBitsKHR.VK_VIDEO_ENCODE_WITH_QUANTIZATION_DELTA_MAP_BIT_KHR,
	VK_VIDEO_ENCODE_WITH_EMPHASIS_MAP_BIT_KHR = VkVideoEncodeFlagBitsKHR.VK_VIDEO_ENCODE_WITH_EMPHASIS_MAP_BIT_KHR,
	VK_VIDEO_ENCODE_FLAG_BITS_MAX_ENUM_KHR = VkVideoEncodeFlagBitsKHR.VK_VIDEO_ENCODE_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoEncodeH264CapabilityFlagBitsKHR {
	VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_KHR = 0x00000001,
	VK_VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR = 0x00000002,
	VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_KHR = 0x00000004,
	VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_KHR = 0x00000008,
	VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR = 0x00000010,
	VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR = 0x00000020,
	VK_VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR = 0x00000040,
	VK_VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_KHR = 0x00000080,
	VK_VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_KHR = 0x00000100,
	VK_VIDEO_ENCODE_H264_CAPABILITY_MB_QP_DIFF_WRAPAROUND_BIT_KHR = 0x00000200,
	VK_VIDEO_ENCODE_H264_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoEncodeH264CapabilityFlagBitsKHR {
	VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_KHR = VkVideoEncodeH264CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_KHR,
	VK_VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR = VkVideoEncodeH264CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR,
	VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_KHR = VkVideoEncodeH264CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_KHR,
	VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_KHR = VkVideoEncodeH264CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_KHR,
	VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR = VkVideoEncodeH264CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR,
	VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR = VkVideoEncodeH264CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR,
	VK_VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR = VkVideoEncodeH264CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR,
	VK_VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_KHR = VkVideoEncodeH264CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_KHR,
	VK_VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_KHR = VkVideoEncodeH264CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_KHR,
	VK_VIDEO_ENCODE_H264_CAPABILITY_MB_QP_DIFF_WRAPAROUND_BIT_KHR = VkVideoEncodeH264CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H264_CAPABILITY_MB_QP_DIFF_WRAPAROUND_BIT_KHR,
	VK_VIDEO_ENCODE_H264_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = VkVideoEncodeH264CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H264_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoEncodeH264RateControlFlagBitsKHR {
	VK_VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR = 0x00000001,
	VK_VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_KHR = 0x00000002,
	VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR = 0x00000004,
	VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR = 0x00000008,
	VK_VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR = 0x00000010,
	VK_VIDEO_ENCODE_H264_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoEncodeH264RateControlFlagBitsKHR {
	VK_VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR = VkVideoEncodeH264RateControlFlagBitsKHR.VK_VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR,
	VK_VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_KHR = VkVideoEncodeH264RateControlFlagBitsKHR.VK_VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_KHR,
	VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR = VkVideoEncodeH264RateControlFlagBitsKHR.VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR,
	VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR = VkVideoEncodeH264RateControlFlagBitsKHR.VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR,
	VK_VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR = VkVideoEncodeH264RateControlFlagBitsKHR.VK_VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR,
	VK_VIDEO_ENCODE_H264_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR = VkVideoEncodeH264RateControlFlagBitsKHR.VK_VIDEO_ENCODE_H264_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoEncodeH264StdFlagBitsKHR {
	VK_VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR = 0x00000001,
	VK_VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_KHR = 0x00000002,
	VK_VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_KHR = 0x00000004,
	VK_VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_KHR = 0x00000008,
	VK_VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_KHR = 0x00000010,
	VK_VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_KHR = 0x00000020,
	VK_VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR = 0x00000040,
	VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_KHR = 0x00000080,
	VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_KHR = 0x00000100,
	VK_VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_KHR = 0x00000200,
	VK_VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_KHR = 0x00000400,
	VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_KHR = 0x00000800,
	VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_KHR = 0x00001000,
	VK_VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_KHR = 0x00002000,
	VK_VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR = 0x00004000,
	VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_KHR = 0x00008000,
	VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_KHR = 0x00010000,
	VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_KHR = 0x00020000,
	VK_VIDEO_ENCODE_H264_STD_SLICE_QP_DELTA_BIT_KHR = 0x00080000,
	VK_VIDEO_ENCODE_H264_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR = 0x00100000,
	VK_VIDEO_ENCODE_H264_STD_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoEncodeH264StdFlagBitsKHR {
	VK_VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR = VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR,
	VK_VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_KHR = VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_KHR,
	VK_VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_KHR = VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_KHR,
	VK_VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_KHR = VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_KHR,
	VK_VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_KHR = VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_KHR,
	VK_VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_KHR = VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_KHR,
	VK_VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR = VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR,
	VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_KHR = VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_KHR,
	VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_KHR = VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_KHR,
	VK_VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_KHR = VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_KHR,
	VK_VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_KHR = VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_KHR,
	VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_KHR = VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_KHR,
	VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_KHR = VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_KHR,
	VK_VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_KHR = VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_KHR,
	VK_VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR = VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR,
	VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_KHR = VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_KHR,
	VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_KHR = VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_KHR,
	VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_KHR = VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_KHR,
	VK_VIDEO_ENCODE_H264_STD_SLICE_QP_DELTA_BIT_KHR = VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_SLICE_QP_DELTA_BIT_KHR,
	VK_VIDEO_ENCODE_H264_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR = VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR,
	VK_VIDEO_ENCODE_H264_STD_FLAG_BITS_MAX_ENUM_KHR = VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoEncodeH265CapabilityFlagBitsKHR {
	VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR = 0x00000001,
	VK_VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR = 0x00000002,
	VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_KHR = 0x00000004,
	VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_KHR = 0x00000008,
	VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR = 0x00000010,
	VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR = 0x00000020,
	VK_VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR = 0x00000040,
	VK_VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_KHR = 0x00000080,
	VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_KHR = 0x00000100,
	VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_KHR = 0x00000200,
	VK_VIDEO_ENCODE_H265_CAPABILITY_CU_QP_DIFF_WRAPAROUND_BIT_KHR = 0x00000400,
	VK_VIDEO_ENCODE_H265_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoEncodeH265CapabilityFlagBitsKHR {
	VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR = VkVideoEncodeH265CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR,
	VK_VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR = VkVideoEncodeH265CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR,
	VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_KHR = VkVideoEncodeH265CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_KHR,
	VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_KHR = VkVideoEncodeH265CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_KHR,
	VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR = VkVideoEncodeH265CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR,
	VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR = VkVideoEncodeH265CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR,
	VK_VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR = VkVideoEncodeH265CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR,
	VK_VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_KHR = VkVideoEncodeH265CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_KHR,
	VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_KHR = VkVideoEncodeH265CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_KHR,
	VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_KHR = VkVideoEncodeH265CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_KHR,
	VK_VIDEO_ENCODE_H265_CAPABILITY_CU_QP_DIFF_WRAPAROUND_BIT_KHR = VkVideoEncodeH265CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H265_CAPABILITY_CU_QP_DIFF_WRAPAROUND_BIT_KHR,
	VK_VIDEO_ENCODE_H265_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = VkVideoEncodeH265CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H265_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoEncodeH265CtbSizeFlagBitsKHR {
	VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_KHR = 0x00000001,
	VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_KHR = 0x00000002,
	VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_KHR = 0x00000004,
	VK_VIDEO_ENCODE_H265_CTB_SIZE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoEncodeH265CtbSizeFlagBitsKHR {
	VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_KHR = VkVideoEncodeH265CtbSizeFlagBitsKHR.VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_KHR,
	VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_KHR = VkVideoEncodeH265CtbSizeFlagBitsKHR.VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_KHR,
	VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_KHR = VkVideoEncodeH265CtbSizeFlagBitsKHR.VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_KHR,
	VK_VIDEO_ENCODE_H265_CTB_SIZE_FLAG_BITS_MAX_ENUM_KHR = VkVideoEncodeH265CtbSizeFlagBitsKHR.VK_VIDEO_ENCODE_H265_CTB_SIZE_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoEncodeH265RateControlFlagBitsKHR {
	VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR = 0x00000001,
	VK_VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_KHR = 0x00000002,
	VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR = 0x00000004,
	VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR = 0x00000008,
	VK_VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_KHR = 0x00000010,
	VK_VIDEO_ENCODE_H265_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoEncodeH265RateControlFlagBitsKHR {
	VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR = VkVideoEncodeH265RateControlFlagBitsKHR.VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR,
	VK_VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_KHR = VkVideoEncodeH265RateControlFlagBitsKHR.VK_VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_KHR,
	VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR = VkVideoEncodeH265RateControlFlagBitsKHR.VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR,
	VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR = VkVideoEncodeH265RateControlFlagBitsKHR.VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR,
	VK_VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_KHR = VkVideoEncodeH265RateControlFlagBitsKHR.VK_VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_KHR,
	VK_VIDEO_ENCODE_H265_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR = VkVideoEncodeH265RateControlFlagBitsKHR.VK_VIDEO_ENCODE_H265_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoEncodeH265StdFlagBitsKHR {
	VK_VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR = 0x00000001,
	VK_VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_KHR = 0x00000002,
	VK_VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_KHR = 0x00000004,
	VK_VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_KHR = 0x00000008,
	VK_VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_KHR = 0x00000010,
	VK_VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_KHR = 0x00000020,
	VK_VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR = 0x00000040,
	VK_VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_KHR = 0x00000080,
	VK_VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_KHR = 0x00000100,
	VK_VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_KHR = 0x00000200,
	VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_KHR = 0x00000400,
	VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_KHR = 0x00000800,
	VK_VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_KHR = 0x00001000,
	VK_VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_KHR = 0x00002000,
	VK_VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR = 0x00004000,
	VK_VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_KHR = 0x00008000,
	VK_VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_KHR = 0x00010000,
	VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_KHR = 0x00020000,
	VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_KHR = 0x00040000,
	VK_VIDEO_ENCODE_H265_STD_SLICE_QP_DELTA_BIT_KHR = 0x00080000,
	VK_VIDEO_ENCODE_H265_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR = 0x00100000,
	VK_VIDEO_ENCODE_H265_STD_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoEncodeH265StdFlagBitsKHR {
	VK_VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR = VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR,
	VK_VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_KHR = VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_KHR,
	VK_VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_KHR = VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_KHR,
	VK_VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_KHR = VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_KHR,
	VK_VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_KHR = VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_KHR,
	VK_VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_KHR = VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_KHR,
	VK_VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR = VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR,
	VK_VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_KHR = VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_KHR,
	VK_VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_KHR = VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_KHR,
	VK_VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_KHR = VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_KHR,
	VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_KHR = VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_KHR,
	VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_KHR = VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_KHR,
	VK_VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_KHR = VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_KHR,
	VK_VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_KHR = VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_KHR,
	VK_VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR = VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR,
	VK_VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_KHR = VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_KHR,
	VK_VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_KHR = VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_KHR,
	VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_KHR = VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_KHR,
	VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_KHR = VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_KHR,
	VK_VIDEO_ENCODE_H265_STD_SLICE_QP_DELTA_BIT_KHR = VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_SLICE_QP_DELTA_BIT_KHR,
	VK_VIDEO_ENCODE_H265_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR = VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR,
	VK_VIDEO_ENCODE_H265_STD_FLAG_BITS_MAX_ENUM_KHR = VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoEncodeH265TransformBlockSizeFlagBitsKHR {
	VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_KHR = 0x00000001,
	VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_KHR = 0x00000002,
	VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_KHR = 0x00000004,
	VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_KHR = 0x00000008,
	VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoEncodeH265TransformBlockSizeFlagBitsKHR {
	VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_KHR = VkVideoEncodeH265TransformBlockSizeFlagBitsKHR.VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_KHR,
	VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_KHR = VkVideoEncodeH265TransformBlockSizeFlagBitsKHR.VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_KHR,
	VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_KHR = VkVideoEncodeH265TransformBlockSizeFlagBitsKHR.VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_KHR,
	VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_KHR = VkVideoEncodeH265TransformBlockSizeFlagBitsKHR.VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_KHR,
	VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR = VkVideoEncodeH265TransformBlockSizeFlagBitsKHR.VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoEncodeRateControlModeFlagBitsKHR {
	VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR = 0,
	VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR = 0x00000001,
	VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR = 0x00000002,
	VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR = 0x00000004,
	VK_VIDEO_ENCODE_RATE_CONTROL_MODE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoEncodeRateControlModeFlagBitsKHR {
	VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR = VkVideoEncodeRateControlModeFlagBitsKHR.VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR,
	VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR = VkVideoEncodeRateControlModeFlagBitsKHR.VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR,
	VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR = VkVideoEncodeRateControlModeFlagBitsKHR.VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR,
	VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR = VkVideoEncodeRateControlModeFlagBitsKHR.VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR,
	VK_VIDEO_ENCODE_RATE_CONTROL_MODE_FLAG_BITS_MAX_ENUM_KHR = VkVideoEncodeRateControlModeFlagBitsKHR.VK_VIDEO_ENCODE_RATE_CONTROL_MODE_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoEncodeTuningModeKHR {
	VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR = 0,
	VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR = 1,
	VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR = 2,
	VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR = 3,
	VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR = 4,
	VK_VIDEO_ENCODE_TUNING_MODE_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoEncodeTuningModeKHR {
	VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR = VkVideoEncodeTuningModeKHR.VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR,
	VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR = VkVideoEncodeTuningModeKHR.VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR,
	VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR = VkVideoEncodeTuningModeKHR.VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR,
	VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR = VkVideoEncodeTuningModeKHR.VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR,
	VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR = VkVideoEncodeTuningModeKHR.VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR,
	VK_VIDEO_ENCODE_TUNING_MODE_MAX_ENUM_KHR = VkVideoEncodeTuningModeKHR.VK_VIDEO_ENCODE_TUNING_MODE_MAX_ENUM_KHR,
}
enum VkVideoEncodeUsageFlagBitsKHR {
	VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR = 0,
	VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR = 0x00000001,
	VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR = 0x00000002,
	VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR = 0x00000004,
	VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR = 0x00000008,
	VK_VIDEO_ENCODE_USAGE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoEncodeUsageFlagBitsKHR {
	VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR = VkVideoEncodeUsageFlagBitsKHR.VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR,
	VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR = VkVideoEncodeUsageFlagBitsKHR.VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR,
	VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR = VkVideoEncodeUsageFlagBitsKHR.VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR,
	VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR = VkVideoEncodeUsageFlagBitsKHR.VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR,
	VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR = VkVideoEncodeUsageFlagBitsKHR.VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR,
	VK_VIDEO_ENCODE_USAGE_FLAG_BITS_MAX_ENUM_KHR = VkVideoEncodeUsageFlagBitsKHR.VK_VIDEO_ENCODE_USAGE_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoSessionCreateFlagBitsKHR {
	VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR = 0x00000001,
	VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR = 0x00000002,
	VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR = 0x00000004,
	VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR = 0x00000008,
	VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_EMPHASIS_MAP_BIT_KHR = 0x00000010,
	VK_VIDEO_SESSION_CREATE_INLINE_SESSION_PARAMETERS_BIT_KHR = 0x00000020,
	VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoSessionCreateFlagBitsKHR {
	VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR = VkVideoSessionCreateFlagBitsKHR.VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR,
	VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR = VkVideoSessionCreateFlagBitsKHR.VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR,
	VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR = VkVideoSessionCreateFlagBitsKHR.VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR,
	VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR = VkVideoSessionCreateFlagBitsKHR.VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR,
	VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_EMPHASIS_MAP_BIT_KHR = VkVideoSessionCreateFlagBitsKHR.VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_EMPHASIS_MAP_BIT_KHR,
	VK_VIDEO_SESSION_CREATE_INLINE_SESSION_PARAMETERS_BIT_KHR = VkVideoSessionCreateFlagBitsKHR.VK_VIDEO_SESSION_CREATE_INLINE_SESSION_PARAMETERS_BIT_KHR,
	VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR = VkVideoSessionCreateFlagBitsKHR.VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkVideoSessionParametersCreateFlagBitsKHR {
	VK_VIDEO_SESSION_PARAMETERS_CREATE_QUANTIZATION_MAP_COMPATIBLE_BIT_KHR = 0x00000001,
	VK_VIDEO_SESSION_PARAMETERS_CREATE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
enum : VkVideoSessionParametersCreateFlagBitsKHR {
	VK_VIDEO_SESSION_PARAMETERS_CREATE_QUANTIZATION_MAP_COMPATIBLE_BIT_KHR = VkVideoSessionParametersCreateFlagBitsKHR.VK_VIDEO_SESSION_PARAMETERS_CREATE_QUANTIZATION_MAP_COMPATIBLE_BIT_KHR,
	VK_VIDEO_SESSION_PARAMETERS_CREATE_FLAG_BITS_MAX_ENUM_KHR = VkVideoSessionParametersCreateFlagBitsKHR.VK_VIDEO_SESSION_PARAMETERS_CREATE_FLAG_BITS_MAX_ENUM_KHR,
}
enum VkViewportCoordinateSwizzleNV {
	VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0,
	VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1,
	VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2,
	VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3,
	VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4,
	VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5,
	VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6,
	VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7,
	VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = 0x7FFFFFFF,
}
enum : VkViewportCoordinateSwizzleNV {
	VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV,
	VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV,
	VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV,
	VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV,
	VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV,
	VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV,
	VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV,
	VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV,
	VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV,
}

// Unions
union VkAccelerationStructureGeometryDataKHR {
	VkAccelerationStructureGeometryTrianglesDataKHR triangles;
	VkAccelerationStructureGeometryAabbsDataKHR aabbs;
	VkAccelerationStructureGeometryInstancesDataKHR instances;
}
union VkAccelerationStructureMotionInstanceDataNV {
	VkAccelerationStructureInstanceKHR staticInstance;
	VkAccelerationStructureMatrixMotionInstanceNV matrixMotionInstance;
	VkAccelerationStructureSRTMotionInstanceNV srtMotionInstance;
}
union VkClearColorValue {
	float[4] float32;
	int32_t[4] int32;
	uint32_t[4] uint32;
}
union VkClearValue {
	VkClearColorValue color;
	VkClearDepthStencilValue depthStencil;
}
union VkClusterAccelerationStructureOpInputNV {
	VkClusterAccelerationStructureClustersBottomLevelInputNV* pClustersBottomLevel;
	VkClusterAccelerationStructureTriangleClusterInputNV* pTriangleClusters;
	VkClusterAccelerationStructureMoveObjectsInputNV* pMoveObjects;
}
union VkDescriptorDataEXT {
	VkSampler* pSampler;
	VkDescriptorImageInfo* pCombinedImageSampler;
	VkDescriptorImageInfo* pInputAttachmentImage;
	VkDescriptorImageInfo* pSampledImage;
	VkDescriptorImageInfo* pStorageImage;
	VkDescriptorAddressInfoEXT* pUniformTexelBuffer;
	VkDescriptorAddressInfoEXT* pStorageTexelBuffer;
	VkDescriptorAddressInfoEXT* pUniformBuffer;
	VkDescriptorAddressInfoEXT* pStorageBuffer;
	VkDeviceAddress accelerationStructure;
}
union VkDeviceOrHostAddressConstKHR {
	VkDeviceAddress deviceAddress;
	void* hostAddress;
}
union VkDeviceOrHostAddressKHR {
	VkDeviceAddress deviceAddress;
	void* hostAddress;
}
union VkIndirectCommandsTokenDataEXT {
	VkIndirectCommandsPushConstantTokenEXT* pPushConstant;
	VkIndirectCommandsVertexBufferTokenEXT* pVertexBuffer;
	VkIndirectCommandsIndexBufferTokenEXT* pIndexBuffer;
	VkIndirectCommandsExecutionSetTokenEXT* pExecutionSet;
}
union VkIndirectExecutionSetInfoEXT {
	VkIndirectExecutionSetPipelineInfoEXT* pPipelineInfo;
	VkIndirectExecutionSetShaderInfoEXT* pShaderInfo;
}
union VkPerformanceCounterResultKHR {
	int32_t int32;
	int64_t int64;
	uint32_t uint32;
	uint64_t uint64;
	float float32;
	double float64;
}
union VkPerformanceValueDataINTEL {
	uint32_t value32;
	uint64_t value64;
	float valueFloat;
	VkBool32 valueBool;
	immutable(char)* valueString;
}
union VkPipelineExecutableStatisticValueKHR {
	VkBool32 b32;
	int64_t i64;
	uint64_t u64;
	double f64;
}

// Structs
struct StdVideoAV1CDEF {
	uint8_t cdef_damping_minus_3;
	uint8_t cdef_bits;
	uint8_t[8] cdef_y_pri_strength;
	uint8_t[8] cdef_y_sec_strength;
	uint8_t[8] cdef_uv_pri_strength;
	uint8_t[8] cdef_uv_sec_strength;
}
struct StdVideoAV1ColorConfig {
	StdVideoAV1ColorConfigFlags flags;
	uint8_t BitDepth;
	uint8_t subsampling_x;
	uint8_t subsampling_y;
	uint8_t reserved1;
	StdVideoAV1ColorPrimaries color_primaries;
	StdVideoAV1TransferCharacteristics transfer_characteristics;
	StdVideoAV1MatrixCoefficients matrix_coefficients;
	StdVideoAV1ChromaSamplePosition chroma_sample_position;
}
struct StdVideoAV1ColorConfigFlags {
	uint32_t mono_chrome;
	uint32_t color_range;
	uint32_t separate_uv_delta_q;
	uint32_t color_description_present_flag;
	uint32_t reserved;
}
struct StdVideoAV1FilmGrain {
	StdVideoAV1FilmGrainFlags flags;
	uint8_t grain_scaling_minus_8;
	uint8_t ar_coeff_lag;
	uint8_t ar_coeff_shift_minus_6;
	uint8_t grain_scale_shift;
	uint16_t grain_seed;
	uint8_t film_grain_params_ref_idx;
	uint8_t num_y_points;
	uint8_t[14] point_y_value;
	uint8_t[14] point_y_scaling;
	uint8_t num_cb_points;
	uint8_t[10] point_cb_value;
	uint8_t[10] point_cb_scaling;
	uint8_t num_cr_points;
	uint8_t[10] point_cr_value;
	uint8_t[10] point_cr_scaling;
	int8_t[24] ar_coeffs_y_plus_128;
	int8_t[25] ar_coeffs_cb_plus_128;
	int8_t[25] ar_coeffs_cr_plus_128;
	uint8_t cb_mult;
	uint8_t cb_luma_mult;
	uint16_t cb_offset;
	uint8_t cr_mult;
	uint8_t cr_luma_mult;
	uint16_t cr_offset;
}
struct StdVideoAV1FilmGrainFlags {
	uint32_t chroma_scaling_from_luma;
	uint32_t overlap_flag;
	uint32_t clip_to_restricted_range;
	uint32_t update_grain;
	uint32_t reserved;
}
struct StdVideoAV1GlobalMotion {
	uint8_t[8] GmType;
	int32_t[6][8] gm_params;
}
struct StdVideoAV1LoopFilter {
	StdVideoAV1LoopFilterFlags flags;
	uint8_t[4] loop_filter_level;
	uint8_t loop_filter_sharpness;
	uint8_t update_ref_delta;
	int8_t[8] loop_filter_ref_deltas;
	uint8_t update_mode_delta;
	int8_t[2] loop_filter_mode_deltas;
}
struct StdVideoAV1LoopFilterFlags {
	uint32_t loop_filter_delta_enabled;
	uint32_t loop_filter_delta_update;
	uint32_t reserved;
}
struct StdVideoAV1LoopRestoration {
	StdVideoAV1FrameRestorationType[3] FrameRestorationType;
	uint16_t[3] LoopRestorationSize;
}
struct StdVideoAV1Quantization {
	StdVideoAV1QuantizationFlags flags;
	uint8_t base_q_idx;
	int8_t DeltaQYDc;
	int8_t DeltaQUDc;
	int8_t DeltaQUAc;
	int8_t DeltaQVDc;
	int8_t DeltaQVAc;
	uint8_t qm_y;
	uint8_t qm_u;
	uint8_t qm_v;
}
struct StdVideoAV1QuantizationFlags {
	uint32_t using_qmatrix;
	uint32_t diff_uv_delta;
	uint32_t reserved;
}
struct StdVideoAV1Segmentation {
	uint8_t[8] FeatureEnabled;
	int16_t[8][8] FeatureData;
}
struct StdVideoAV1SequenceHeader {
	StdVideoAV1SequenceHeaderFlags flags;
	StdVideoAV1Profile seq_profile;
	uint8_t frame_width_bits_minus_1;
	uint8_t frame_height_bits_minus_1;
	uint16_t max_frame_width_minus_1;
	uint16_t max_frame_height_minus_1;
	uint8_t delta_frame_id_length_minus_2;
	uint8_t additional_frame_id_length_minus_1;
	uint8_t order_hint_bits_minus_1;
	uint8_t seq_force_integer_mv;
	uint8_t seq_force_screen_content_tools;
	uint8_t[5] reserved1;
	StdVideoAV1ColorConfig* pColorConfig;
	StdVideoAV1TimingInfo* pTimingInfo;
}
struct StdVideoAV1SequenceHeaderFlags {
	uint32_t still_picture;
	uint32_t reduced_still_picture_header;
	uint32_t use_128x128_superblock;
	uint32_t enable_filter_intra;
	uint32_t enable_intra_edge_filter;
	uint32_t enable_interintra_compound;
	uint32_t enable_masked_compound;
	uint32_t enable_warped_motion;
	uint32_t enable_dual_filter;
	uint32_t enable_order_hint;
	uint32_t enable_jnt_comp;
	uint32_t enable_ref_frame_mvs;
	uint32_t frame_id_numbers_present_flag;
	uint32_t enable_superres;
	uint32_t enable_cdef;
	uint32_t enable_restoration;
	uint32_t film_grain_params_present;
	uint32_t timing_info_present_flag;
	uint32_t initial_display_delay_present_flag;
	uint32_t reserved;
}
struct StdVideoAV1TileInfo {
	StdVideoAV1TileInfoFlags flags;
	uint8_t TileCols;
	uint8_t TileRows;
	uint16_t context_update_tile_id;
	uint8_t tile_size_bytes_minus_1;
	uint8_t[7] reserved1;
	uint16_t* pMiColStarts;
	uint16_t* pMiRowStarts;
	uint16_t* pWidthInSbsMinus1;
	uint16_t* pHeightInSbsMinus1;
}
struct StdVideoAV1TileInfoFlags {
	uint32_t uniform_tile_spacing_flag;
	uint32_t reserved;
}
struct StdVideoAV1TimingInfo {
	StdVideoAV1TimingInfoFlags flags;
	uint32_t num_units_in_display_tick;
	uint32_t time_scale;
	uint32_t num_ticks_per_picture_minus_1;
}
struct StdVideoAV1TimingInfoFlags {
	uint32_t equal_picture_interval;
	uint32_t reserved;
}
struct StdVideoDecodeAV1PictureInfo {
	StdVideoDecodeAV1PictureInfoFlags flags;
	StdVideoAV1FrameType frame_type;
	uint32_t current_frame_id;
	uint8_t OrderHint;
	uint8_t primary_ref_frame;
	uint8_t refresh_frame_flags;
	uint8_t reserved1;
	StdVideoAV1InterpolationFilter interpolation_filter;
	StdVideoAV1TxMode TxMode;
	uint8_t delta_q_res;
	uint8_t delta_lf_res;
	uint8_t[2] SkipModeFrame;
	uint8_t coded_denom;
	uint8_t[3] reserved2;
	uint8_t[8] OrderHints;
	uint32_t[8] expectedFrameId;
	StdVideoAV1TileInfo* pTileInfo;
	StdVideoAV1Quantization* pQuantization;
	StdVideoAV1Segmentation* pSegmentation;
	StdVideoAV1LoopFilter* pLoopFilter;
	StdVideoAV1CDEF* pCDEF;
	StdVideoAV1LoopRestoration* pLoopRestoration;
	StdVideoAV1GlobalMotion* pGlobalMotion;
	StdVideoAV1FilmGrain* pFilmGrain;
}
struct StdVideoDecodeAV1PictureInfoFlags {
	uint32_t error_resilient_mode;
	uint32_t disable_cdf_update;
	uint32_t use_superres;
	uint32_t render_and_frame_size_different;
	uint32_t allow_screen_content_tools;
	uint32_t is_filter_switchable;
	uint32_t force_integer_mv;
	uint32_t frame_size_override_flag;
	uint32_t buffer_removal_time_present_flag;
	uint32_t allow_intrabc;
	uint32_t frame_refs_short_signaling;
	uint32_t allow_high_precision_mv;
	uint32_t is_motion_mode_switchable;
	uint32_t use_ref_frame_mvs;
	uint32_t disable_frame_end_update_cdf;
	uint32_t allow_warped_motion;
	uint32_t reduced_tx_set;
	uint32_t reference_select;
	uint32_t skip_mode_present;
	uint32_t delta_q_present;
	uint32_t delta_lf_present;
	uint32_t delta_lf_multi;
	uint32_t segmentation_enabled;
	uint32_t segmentation_update_map;
	uint32_t segmentation_temporal_update;
	uint32_t segmentation_update_data;
	uint32_t UsesLr;
	uint32_t usesChromaLr;
	uint32_t apply_grain;
	uint32_t reserved;
}
struct StdVideoDecodeAV1ReferenceInfo {
	StdVideoDecodeAV1ReferenceInfoFlags flags;
	uint8_t frame_type;
	uint8_t RefFrameSignBias;
	uint8_t OrderHint;
	uint8_t[8] SavedOrderHints;
}
struct StdVideoDecodeAV1ReferenceInfoFlags {
	uint32_t disable_frame_end_update_cdf;
	uint32_t segmentation_enabled;
	uint32_t reserved;
}
struct StdVideoDecodeH264PictureInfo {
	StdVideoDecodeH264PictureInfoFlags flags;
	uint8_t seq_parameter_set_id;
	uint8_t pic_parameter_set_id;
	uint8_t reserved1;
	uint8_t reserved2;
	uint16_t frame_num;
	uint16_t idr_pic_id;
	int32_t[2] PicOrderCnt;
}
struct StdVideoDecodeH264PictureInfoFlags {
	uint32_t field_pic_flag;
	uint32_t is_intra;
	uint32_t IdrPicFlag;
	uint32_t bottom_field_flag;
	uint32_t is_reference;
	uint32_t complementary_field_pair;
}
struct StdVideoDecodeH264ReferenceInfo {
	StdVideoDecodeH264ReferenceInfoFlags flags;
	uint16_t FrameNum;
	uint16_t reserved;
	int32_t[2] PicOrderCnt;
}
struct StdVideoDecodeH264ReferenceInfoFlags {
	uint32_t top_field_flag;
	uint32_t bottom_field_flag;
	uint32_t used_for_long_term_reference;
	uint32_t is_non_existing;
}
struct StdVideoDecodeH265PictureInfo {
	StdVideoDecodeH265PictureInfoFlags flags;
	uint8_t sps_video_parameter_set_id;
	uint8_t pps_seq_parameter_set_id;
	uint8_t pps_pic_parameter_set_id;
	uint8_t NumDeltaPocsOfRefRpsIdx;
	int32_t PicOrderCntVal;
	uint16_t NumBitsForSTRefPicSetInSlice;
	uint16_t reserved;
	uint8_t[8] RefPicSetStCurrBefore;
	uint8_t[8] RefPicSetStCurrAfter;
	uint8_t[8] RefPicSetLtCurr;
}
struct StdVideoDecodeH265PictureInfoFlags {
	uint32_t IrapPicFlag;
	uint32_t IdrPicFlag;
	uint32_t IsReference;
	uint32_t short_term_ref_pic_set_sps_flag;
}
struct StdVideoDecodeH265ReferenceInfo {
	StdVideoDecodeH265ReferenceInfoFlags flags;
	int32_t PicOrderCntVal;
}
struct StdVideoDecodeH265ReferenceInfoFlags {
	uint32_t used_for_long_term_reference;
	uint32_t unused_for_reference;
}
struct StdVideoEncodeAV1DecoderModelInfo {
	uint8_t buffer_delay_length_minus_1;
	uint8_t buffer_removal_time_length_minus_1;
	uint8_t frame_presentation_time_length_minus_1;
	uint8_t reserved1;
	uint32_t num_units_in_decoding_tick;
}
struct StdVideoEncodeAV1ExtensionHeader {
	uint8_t temporal_id;
	uint8_t spatial_id;
}
struct StdVideoEncodeAV1OperatingPointInfo {
	StdVideoEncodeAV1OperatingPointInfoFlags flags;
	uint16_t operating_point_idc;
	uint8_t seq_level_idx;
	uint8_t seq_tier;
	uint32_t decoder_buffer_delay;
	uint32_t encoder_buffer_delay;
	uint8_t initial_display_delay_minus_1;
}
struct StdVideoEncodeAV1OperatingPointInfoFlags {
	uint32_t decoder_model_present_for_this_op;
	uint32_t low_delay_mode_flag;
	uint32_t initial_display_delay_present_for_this_op;
	uint32_t reserved;
}
struct StdVideoEncodeAV1PictureInfo {
	StdVideoEncodeAV1PictureInfoFlags flags;
	StdVideoAV1FrameType frame_type;
	uint32_t frame_presentation_time;
	uint32_t current_frame_id;
	uint8_t order_hint;
	uint8_t primary_ref_frame;
	uint8_t refresh_frame_flags;
	uint8_t coded_denom;
	uint16_t render_width_minus_1;
	uint16_t render_height_minus_1;
	StdVideoAV1InterpolationFilter interpolation_filter;
	StdVideoAV1TxMode TxMode;
	uint8_t delta_q_res;
	uint8_t delta_lf_res;
	uint8_t[8] ref_order_hint;
	int8_t[7] ref_frame_idx;
	uint8_t[3] reserved1;
	uint32_t[7] delta_frame_id_minus_1;
	StdVideoAV1TileInfo* pTileInfo;
	StdVideoAV1Quantization* pQuantization;
	StdVideoAV1Segmentation* pSegmentation;
	StdVideoAV1LoopFilter* pLoopFilter;
	StdVideoAV1CDEF* pCDEF;
	StdVideoAV1LoopRestoration* pLoopRestoration;
	StdVideoAV1GlobalMotion* pGlobalMotion;
	StdVideoEncodeAV1ExtensionHeader* pExtensionHeader;
	uint32_t* pBufferRemovalTimes;
}
struct StdVideoEncodeAV1PictureInfoFlags {
	uint32_t error_resilient_mode;
	uint32_t disable_cdf_update;
	uint32_t use_superres;
	uint32_t render_and_frame_size_different;
	uint32_t allow_screen_content_tools;
	uint32_t is_filter_switchable;
	uint32_t force_integer_mv;
	uint32_t frame_size_override_flag;
	uint32_t buffer_removal_time_present_flag;
	uint32_t allow_intrabc;
	uint32_t frame_refs_short_signaling;
	uint32_t allow_high_precision_mv;
	uint32_t is_motion_mode_switchable;
	uint32_t use_ref_frame_mvs;
	uint32_t disable_frame_end_update_cdf;
	uint32_t allow_warped_motion;
	uint32_t reduced_tx_set;
	uint32_t skip_mode_present;
	uint32_t delta_q_present;
	uint32_t delta_lf_present;
	uint32_t delta_lf_multi;
	uint32_t segmentation_enabled;
	uint32_t segmentation_update_map;
	uint32_t segmentation_temporal_update;
	uint32_t segmentation_update_data;
	uint32_t UsesLr;
	uint32_t usesChromaLr;
	uint32_t show_frame;
	uint32_t showable_frame;
	uint32_t reserved;
}
struct StdVideoEncodeAV1ReferenceInfo {
	StdVideoEncodeAV1ReferenceInfoFlags flags;
	uint32_t RefFrameId;
	StdVideoAV1FrameType frame_type;
	uint8_t OrderHint;
	uint8_t[3] reserved1;
	StdVideoEncodeAV1ExtensionHeader* pExtensionHeader;
}
struct StdVideoEncodeAV1ReferenceInfoFlags {
	uint32_t disable_frame_end_update_cdf;
	uint32_t segmentation_enabled;
	uint32_t reserved;
}
struct StdVideoEncodeH264PictureInfo {
	StdVideoEncodeH264PictureInfoFlags flags;
	uint8_t seq_parameter_set_id;
	uint8_t pic_parameter_set_id;
	uint16_t idr_pic_id;
	StdVideoH264PictureType primary_pic_type;
	uint32_t frame_num;
	int32_t PicOrderCnt;
	uint8_t temporal_id;
	uint8_t[3] reserved1;
	StdVideoEncodeH264ReferenceListsInfo* pRefLists;
}
struct StdVideoEncodeH264PictureInfoFlags {
	uint32_t IdrPicFlag;
	uint32_t is_reference;
	uint32_t no_output_of_prior_pics_flag;
	uint32_t long_term_reference_flag;
	uint32_t adaptive_ref_pic_marking_mode_flag;
	uint32_t reserved;
}
struct StdVideoEncodeH264RefListModEntry {
	StdVideoH264ModificationOfPicNumsIdc modification_of_pic_nums_idc;
	uint16_t abs_diff_pic_num_minus1;
	uint16_t long_term_pic_num;
}
struct StdVideoEncodeH264RefPicMarkingEntry {
	StdVideoH264MemMgmtControlOp memory_management_control_operation;
	uint16_t difference_of_pic_nums_minus1;
	uint16_t long_term_pic_num;
	uint16_t long_term_frame_idx;
	uint16_t max_long_term_frame_idx_plus1;
}
struct StdVideoEncodeH264ReferenceInfo {
	StdVideoEncodeH264ReferenceInfoFlags flags;
	StdVideoH264PictureType primary_pic_type;
	uint32_t FrameNum;
	int32_t PicOrderCnt;
	uint16_t long_term_pic_num;
	uint16_t long_term_frame_idx;
	uint8_t temporal_id;
}
struct StdVideoEncodeH264ReferenceInfoFlags {
	uint32_t used_for_long_term_reference;
	uint32_t reserved;
}
struct StdVideoEncodeH264ReferenceListsInfo {
	StdVideoEncodeH264ReferenceListsInfoFlags flags;
	uint8_t num_ref_idx_l0_active_minus1;
	uint8_t num_ref_idx_l1_active_minus1;
	uint8_t[32] RefPicList0;
	uint8_t[32] RefPicList1;
	uint8_t refList0ModOpCount;
	uint8_t refList1ModOpCount;
	uint8_t refPicMarkingOpCount;
	uint8_t[7] reserved1;
	StdVideoEncodeH264RefListModEntry* pRefList0ModOperations;
	StdVideoEncodeH264RefListModEntry* pRefList1ModOperations;
	StdVideoEncodeH264RefPicMarkingEntry* pRefPicMarkingOperations;
}
struct StdVideoEncodeH264ReferenceListsInfoFlags {
	uint32_t ref_pic_list_modification_flag_l0;
	uint32_t ref_pic_list_modification_flag_l1;
	uint32_t reserved;
}
struct StdVideoEncodeH264SliceHeader {
	StdVideoEncodeH264SliceHeaderFlags flags;
	uint32_t first_mb_in_slice;
	StdVideoH264SliceType slice_type;
	int8_t slice_alpha_c0_offset_div2;
	int8_t slice_beta_offset_div2;
	int8_t slice_qp_delta;
	uint8_t reserved1;
	StdVideoH264CabacInitIdc cabac_init_idc;
	StdVideoH264DisableDeblockingFilterIdc disable_deblocking_filter_idc;
	StdVideoEncodeH264WeightTable* pWeightTable;
}
struct StdVideoEncodeH264SliceHeaderFlags {
	uint32_t direct_spatial_mv_pred_flag;
	uint32_t num_ref_idx_active_override_flag;
	uint32_t reserved;
}
struct StdVideoEncodeH264WeightTable {
	StdVideoEncodeH264WeightTableFlags flags;
	uint8_t luma_log2_weight_denom;
	uint8_t chroma_log2_weight_denom;
	int8_t[32] luma_weight_l0;
	int8_t[32] luma_offset_l0;
	int8_t[2][32] chroma_weight_l0;
	int8_t[2][32] chroma_offset_l0;
	int8_t[32] luma_weight_l1;
	int8_t[32] luma_offset_l1;
	int8_t[2][32] chroma_weight_l1;
	int8_t[2][32] chroma_offset_l1;
}
struct StdVideoEncodeH264WeightTableFlags {
	uint32_t luma_weight_l0_flag;
	uint32_t chroma_weight_l0_flag;
	uint32_t luma_weight_l1_flag;
	uint32_t chroma_weight_l1_flag;
}
struct StdVideoEncodeH265LongTermRefPics {
	uint8_t num_long_term_sps;
	uint8_t num_long_term_pics;
	uint8_t[32] lt_idx_sps;
	uint8_t[16] poc_lsb_lt;
	uint16_t used_by_curr_pic_lt_flag;
	uint8_t[48] delta_poc_msb_present_flag;
	uint8_t[48] delta_poc_msb_cycle_lt;
}
struct StdVideoEncodeH265PictureInfo {
	StdVideoEncodeH265PictureInfoFlags flags;
	StdVideoH265PictureType pic_type;
	uint8_t sps_video_parameter_set_id;
	uint8_t pps_seq_parameter_set_id;
	uint8_t pps_pic_parameter_set_id;
	uint8_t short_term_ref_pic_set_idx;
	int32_t PicOrderCntVal;
	uint8_t TemporalId;
	uint8_t[7] reserved1;
	StdVideoEncodeH265ReferenceListsInfo* pRefLists;
	StdVideoH265ShortTermRefPicSet* pShortTermRefPicSet;
	StdVideoEncodeH265LongTermRefPics* pLongTermRefPics;
}
struct StdVideoEncodeH265PictureInfoFlags {
	uint32_t is_reference;
	uint32_t IrapPicFlag;
	uint32_t used_for_long_term_reference;
	uint32_t discardable_flag;
	uint32_t cross_layer_bla_flag;
	uint32_t pic_output_flag;
	uint32_t no_output_of_prior_pics_flag;
	uint32_t short_term_ref_pic_set_sps_flag;
	uint32_t slice_temporal_mvp_enabled_flag;
	uint32_t reserved;
}
struct StdVideoEncodeH265ReferenceInfo {
	StdVideoEncodeH265ReferenceInfoFlags flags;
	StdVideoH265PictureType pic_type;
	int32_t PicOrderCntVal;
	uint8_t TemporalId;
}
struct StdVideoEncodeH265ReferenceInfoFlags {
	uint32_t used_for_long_term_reference;
	uint32_t unused_for_reference;
	uint32_t reserved;
}
struct StdVideoEncodeH265ReferenceListsInfo {
	StdVideoEncodeH265ReferenceListsInfoFlags flags;
	uint8_t num_ref_idx_l0_active_minus1;
	uint8_t num_ref_idx_l1_active_minus1;
	uint8_t[15] RefPicList0;
	uint8_t[15] RefPicList1;
	uint8_t[15] list_entry_l0;
	uint8_t[15] list_entry_l1;
}
struct StdVideoEncodeH265ReferenceListsInfoFlags {
	uint32_t ref_pic_list_modification_flag_l0;
	uint32_t ref_pic_list_modification_flag_l1;
	uint32_t reserved;
}
struct StdVideoEncodeH265SliceSegmentHeader {
	StdVideoEncodeH265SliceSegmentHeaderFlags flags;
	StdVideoH265SliceType slice_type;
	uint32_t slice_segment_address;
	uint8_t collocated_ref_idx;
	uint8_t MaxNumMergeCand;
	int8_t slice_cb_qp_offset;
	int8_t slice_cr_qp_offset;
	int8_t slice_beta_offset_div2;
	int8_t slice_tc_offset_div2;
	int8_t slice_act_y_qp_offset;
	int8_t slice_act_cb_qp_offset;
	int8_t slice_act_cr_qp_offset;
	int8_t slice_qp_delta;
	uint16_t reserved1;
	StdVideoEncodeH265WeightTable* pWeightTable;
}
struct StdVideoEncodeH265SliceSegmentHeaderFlags {
	uint32_t first_slice_segment_in_pic_flag;
	uint32_t dependent_slice_segment_flag;
	uint32_t slice_sao_luma_flag;
	uint32_t slice_sao_chroma_flag;
	uint32_t num_ref_idx_active_override_flag;
	uint32_t mvd_l1_zero_flag;
	uint32_t cabac_init_flag;
	uint32_t cu_chroma_qp_offset_enabled_flag;
	uint32_t deblocking_filter_override_flag;
	uint32_t slice_deblocking_filter_disabled_flag;
	uint32_t collocated_from_l0_flag;
	uint32_t slice_loop_filter_across_slices_enabled_flag;
	uint32_t reserved;
}
struct StdVideoEncodeH265WeightTable {
	StdVideoEncodeH265WeightTableFlags flags;
	uint8_t luma_log2_weight_denom;
	int8_t delta_chroma_log2_weight_denom;
	int8_t[15] delta_luma_weight_l0;
	int8_t[15] luma_offset_l0;
	int8_t[2][15] delta_chroma_weight_l0;
	int8_t[2][15] delta_chroma_offset_l0;
	int8_t[15] delta_luma_weight_l1;
	int8_t[15] luma_offset_l1;
	int8_t[2][15] delta_chroma_weight_l1;
	int8_t[2][15] delta_chroma_offset_l1;
}
struct StdVideoEncodeH265WeightTableFlags {
	uint16_t luma_weight_l0_flag;
	uint16_t chroma_weight_l0_flag;
	uint16_t luma_weight_l1_flag;
	uint16_t chroma_weight_l1_flag;
}
struct StdVideoH264HrdParameters {
	uint8_t cpb_cnt_minus1;
	uint8_t bit_rate_scale;
	uint8_t cpb_size_scale;
	uint8_t reserved1;
	uint32_t[32] bit_rate_value_minus1;
	uint32_t[32] cpb_size_value_minus1;
	uint8_t[32] cbr_flag;
	uint32_t initial_cpb_removal_delay_length_minus1;
	uint32_t cpb_removal_delay_length_minus1;
	uint32_t dpb_output_delay_length_minus1;
	uint32_t time_offset_length;
}
struct StdVideoH264PictureParameterSet {
	StdVideoH264PpsFlags flags;
	uint8_t seq_parameter_set_id;
	uint8_t pic_parameter_set_id;
	uint8_t num_ref_idx_l0_default_active_minus1;
	uint8_t num_ref_idx_l1_default_active_minus1;
	StdVideoH264WeightedBipredIdc weighted_bipred_idc;
	int8_t pic_init_qp_minus26;
	int8_t pic_init_qs_minus26;
	int8_t chroma_qp_index_offset;
	int8_t second_chroma_qp_index_offset;
	StdVideoH264ScalingLists* pScalingLists;
}
struct StdVideoH264PpsFlags {
	uint32_t transform_8x8_mode_flag;
	uint32_t redundant_pic_cnt_present_flag;
	uint32_t constrained_intra_pred_flag;
	uint32_t deblocking_filter_control_present_flag;
	uint32_t weighted_pred_flag;
	uint32_t bottom_field_pic_order_in_frame_present_flag;
	uint32_t entropy_coding_mode_flag;
	uint32_t pic_scaling_matrix_present_flag;
}
struct StdVideoH264ScalingLists {
	uint16_t scaling_list_present_mask;
	uint16_t use_default_scaling_matrix_mask;
	uint8_t[16][6] ScalingList4x4;
	uint8_t[64][6] ScalingList8x8;
}
struct StdVideoH264SequenceParameterSet {
	StdVideoH264SpsFlags flags;
	StdVideoH264ProfileIdc profile_idc;
	StdVideoH264LevelIdc level_idc;
	StdVideoH264ChromaFormatIdc chroma_format_idc;
	uint8_t seq_parameter_set_id;
	uint8_t bit_depth_luma_minus8;
	uint8_t bit_depth_chroma_minus8;
	uint8_t log2_max_frame_num_minus4;
	StdVideoH264PocType pic_order_cnt_type;
	int32_t offset_for_non_ref_pic;
	int32_t offset_for_top_to_bottom_field;
	uint8_t log2_max_pic_order_cnt_lsb_minus4;
	uint8_t num_ref_frames_in_pic_order_cnt_cycle;
	uint8_t max_num_ref_frames;
	uint8_t reserved1;
	uint32_t pic_width_in_mbs_minus1;
	uint32_t pic_height_in_map_units_minus1;
	uint32_t frame_crop_left_offset;
	uint32_t frame_crop_right_offset;
	uint32_t frame_crop_top_offset;
	uint32_t frame_crop_bottom_offset;
	uint32_t reserved2;
	int32_t* pOffsetForRefFrame;
	StdVideoH264ScalingLists* pScalingLists;
	StdVideoH264SequenceParameterSetVui* pSequenceParameterSetVui;
}
struct StdVideoH264SequenceParameterSetVui {
	StdVideoH264SpsVuiFlags flags;
	StdVideoH264AspectRatioIdc aspect_ratio_idc;
	uint16_t sar_width;
	uint16_t sar_height;
	uint8_t video_format;
	uint8_t colour_primaries;
	uint8_t transfer_characteristics;
	uint8_t matrix_coefficients;
	uint32_t num_units_in_tick;
	uint32_t time_scale;
	uint8_t max_num_reorder_frames;
	uint8_t max_dec_frame_buffering;
	uint8_t chroma_sample_loc_type_top_field;
	uint8_t chroma_sample_loc_type_bottom_field;
	uint32_t reserved1;
	StdVideoH264HrdParameters* pHrdParameters;
}
struct StdVideoH264SpsFlags {
	uint32_t constraint_set0_flag;
	uint32_t constraint_set1_flag;
	uint32_t constraint_set2_flag;
	uint32_t constraint_set3_flag;
	uint32_t constraint_set4_flag;
	uint32_t constraint_set5_flag;
	uint32_t direct_8x8_inference_flag;
	uint32_t mb_adaptive_frame_field_flag;
	uint32_t frame_mbs_only_flag;
	uint32_t delta_pic_order_always_zero_flag;
	uint32_t separate_colour_plane_flag;
	uint32_t gaps_in_frame_num_value_allowed_flag;
	uint32_t qpprime_y_zero_transform_bypass_flag;
	uint32_t frame_cropping_flag;
	uint32_t seq_scaling_matrix_present_flag;
	uint32_t vui_parameters_present_flag;
}
struct StdVideoH264SpsVuiFlags {
	uint32_t aspect_ratio_info_present_flag;
	uint32_t overscan_info_present_flag;
	uint32_t overscan_appropriate_flag;
	uint32_t video_signal_type_present_flag;
	uint32_t video_full_range_flag;
	uint32_t color_description_present_flag;
	uint32_t chroma_loc_info_present_flag;
	uint32_t timing_info_present_flag;
	uint32_t fixed_frame_rate_flag;
	uint32_t bitstream_restriction_flag;
	uint32_t nal_hrd_parameters_present_flag;
	uint32_t vcl_hrd_parameters_present_flag;
}
struct StdVideoH265DecPicBufMgr {
	uint32_t[7] max_latency_increase_plus1;
	uint8_t[7] max_dec_pic_buffering_minus1;
	uint8_t[7] max_num_reorder_pics;
}
struct StdVideoH265HrdFlags {
	uint32_t nal_hrd_parameters_present_flag;
	uint32_t vcl_hrd_parameters_present_flag;
	uint32_t sub_pic_hrd_params_present_flag;
	uint32_t sub_pic_cpb_params_in_pic_timing_sei_flag;
	uint32_t fixed_pic_rate_general_flag;
	uint32_t fixed_pic_rate_within_cvs_flag;
	uint32_t low_delay_hrd_flag;
}
struct StdVideoH265HrdParameters {
	StdVideoH265HrdFlags flags;
	uint8_t tick_divisor_minus2;
	uint8_t du_cpb_removal_delay_increment_length_minus1;
	uint8_t dpb_output_delay_du_length_minus1;
	uint8_t bit_rate_scale;
	uint8_t cpb_size_scale;
	uint8_t cpb_size_du_scale;
	uint8_t initial_cpb_removal_delay_length_minus1;
	uint8_t au_cpb_removal_delay_length_minus1;
	uint8_t dpb_output_delay_length_minus1;
	uint8_t[7] cpb_cnt_minus1;
	uint16_t[7] elemental_duration_in_tc_minus1;
	uint16_t[3] reserved;
	StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersNal;
	StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersVcl;
}
struct StdVideoH265LongTermRefPicsSps {
	uint32_t used_by_curr_pic_lt_sps_flag;
	uint32_t[32] lt_ref_pic_poc_lsb_sps;
}
struct StdVideoH265PictureParameterSet {
	StdVideoH265PpsFlags flags;
	uint8_t pps_pic_parameter_set_id;
	uint8_t pps_seq_parameter_set_id;
	uint8_t sps_video_parameter_set_id;
	uint8_t num_extra_slice_header_bits;
	uint8_t num_ref_idx_l0_default_active_minus1;
	uint8_t num_ref_idx_l1_default_active_minus1;
	int8_t init_qp_minus26;
	uint8_t diff_cu_qp_delta_depth;
	int8_t pps_cb_qp_offset;
	int8_t pps_cr_qp_offset;
	int8_t pps_beta_offset_div2;
	int8_t pps_tc_offset_div2;
	uint8_t log2_parallel_merge_level_minus2;
	uint8_t log2_max_transform_skip_block_size_minus2;
	uint8_t diff_cu_chroma_qp_offset_depth;
	uint8_t chroma_qp_offset_list_len_minus1;
	int8_t[6] cb_qp_offset_list;
	int8_t[6] cr_qp_offset_list;
	uint8_t log2_sao_offset_scale_luma;
	uint8_t log2_sao_offset_scale_chroma;
	int8_t pps_act_y_qp_offset_plus5;
	int8_t pps_act_cb_qp_offset_plus5;
	int8_t pps_act_cr_qp_offset_plus3;
	uint8_t pps_num_palette_predictor_initializers;
	uint8_t luma_bit_depth_entry_minus8;
	uint8_t chroma_bit_depth_entry_minus8;
	uint8_t num_tile_columns_minus1;
	uint8_t num_tile_rows_minus1;
	uint8_t reserved1;
	uint8_t reserved2;
	uint16_t[19] column_width_minus1;
	uint16_t[21] row_height_minus1;
	uint32_t reserved3;
	StdVideoH265ScalingLists* pScalingLists;
	StdVideoH265PredictorPaletteEntries* pPredictorPaletteEntries;
}
struct StdVideoH265PpsFlags {
	uint32_t dependent_slice_segments_enabled_flag;
	uint32_t output_flag_present_flag;
	uint32_t sign_data_hiding_enabled_flag;
	uint32_t cabac_init_present_flag;
	uint32_t constrained_intra_pred_flag;
	uint32_t transform_skip_enabled_flag;
	uint32_t cu_qp_delta_enabled_flag;
	uint32_t pps_slice_chroma_qp_offsets_present_flag;
	uint32_t weighted_pred_flag;
	uint32_t weighted_bipred_flag;
	uint32_t transquant_bypass_enabled_flag;
	uint32_t tiles_enabled_flag;
	uint32_t entropy_coding_sync_enabled_flag;
	uint32_t uniform_spacing_flag;
	uint32_t loop_filter_across_tiles_enabled_flag;
	uint32_t pps_loop_filter_across_slices_enabled_flag;
	uint32_t deblocking_filter_control_present_flag;
	uint32_t deblocking_filter_override_enabled_flag;
	uint32_t pps_deblocking_filter_disabled_flag;
	uint32_t pps_scaling_list_data_present_flag;
	uint32_t lists_modification_present_flag;
	uint32_t slice_segment_header_extension_present_flag;
	uint32_t pps_extension_present_flag;
	uint32_t cross_component_prediction_enabled_flag;
	uint32_t chroma_qp_offset_list_enabled_flag;
	uint32_t pps_curr_pic_ref_enabled_flag;
	uint32_t residual_adaptive_colour_transform_enabled_flag;
	uint32_t pps_slice_act_qp_offsets_present_flag;
	uint32_t pps_palette_predictor_initializers_present_flag;
	uint32_t monochrome_palette_flag;
	uint32_t pps_range_extension_flag;
}
struct StdVideoH265PredictorPaletteEntries {
	uint16_t[128][3] PredictorPaletteEntries;
}
struct StdVideoH265ProfileTierLevel {
	StdVideoH265ProfileTierLevelFlags flags;
	StdVideoH265ProfileIdc general_profile_idc;
	StdVideoH265LevelIdc general_level_idc;
}
struct StdVideoH265ProfileTierLevelFlags {
	uint32_t general_tier_flag;
	uint32_t general_progressive_source_flag;
	uint32_t general_interlaced_source_flag;
	uint32_t general_non_packed_constraint_flag;
	uint32_t general_frame_only_constraint_flag;
}
struct StdVideoH265ScalingLists {
	uint8_t[16][6] ScalingList4x4;
	uint8_t[64][6] ScalingList8x8;
	uint8_t[64][6] ScalingList16x16;
	uint8_t[64][2] ScalingList32x32;
	uint8_t[6] ScalingListDCCoef16x16;
	uint8_t[2] ScalingListDCCoef32x32;
}
struct StdVideoH265SequenceParameterSet {
	StdVideoH265SpsFlags flags;
	StdVideoH265ChromaFormatIdc chroma_format_idc;
	uint32_t pic_width_in_luma_samples;
	uint32_t pic_height_in_luma_samples;
	uint8_t sps_video_parameter_set_id;
	uint8_t sps_max_sub_layers_minus1;
	uint8_t sps_seq_parameter_set_id;
	uint8_t bit_depth_luma_minus8;
	uint8_t bit_depth_chroma_minus8;
	uint8_t log2_max_pic_order_cnt_lsb_minus4;
	uint8_t log2_min_luma_coding_block_size_minus3;
	uint8_t log2_diff_max_min_luma_coding_block_size;
	uint8_t log2_min_luma_transform_block_size_minus2;
	uint8_t log2_diff_max_min_luma_transform_block_size;
	uint8_t max_transform_hierarchy_depth_inter;
	uint8_t max_transform_hierarchy_depth_intra;
	uint8_t num_short_term_ref_pic_sets;
	uint8_t num_long_term_ref_pics_sps;
	uint8_t pcm_sample_bit_depth_luma_minus1;
	uint8_t pcm_sample_bit_depth_chroma_minus1;
	uint8_t log2_min_pcm_luma_coding_block_size_minus3;
	uint8_t log2_diff_max_min_pcm_luma_coding_block_size;
	uint8_t reserved1;
	uint8_t reserved2;
	uint8_t palette_max_size;
	uint8_t delta_palette_max_predictor_size;
	uint8_t motion_vector_resolution_control_idc;
	uint8_t sps_num_palette_predictor_initializers_minus1;
	uint32_t conf_win_left_offset;
	uint32_t conf_win_right_offset;
	uint32_t conf_win_top_offset;
	uint32_t conf_win_bottom_offset;
	StdVideoH265ProfileTierLevel* pProfileTierLevel;
	StdVideoH265DecPicBufMgr* pDecPicBufMgr;
	StdVideoH265ScalingLists* pScalingLists;
	StdVideoH265ShortTermRefPicSet* pShortTermRefPicSet;
	StdVideoH265LongTermRefPicsSps* pLongTermRefPicsSps;
	StdVideoH265SequenceParameterSetVui* pSequenceParameterSetVui;
	StdVideoH265PredictorPaletteEntries* pPredictorPaletteEntries;
}
struct StdVideoH265SequenceParameterSetVui {
	StdVideoH265SpsVuiFlags flags;
	StdVideoH265AspectRatioIdc aspect_ratio_idc;
	uint16_t sar_width;
	uint16_t sar_height;
	uint8_t video_format;
	uint8_t colour_primaries;
	uint8_t transfer_characteristics;
	uint8_t matrix_coeffs;
	uint8_t chroma_sample_loc_type_top_field;
	uint8_t chroma_sample_loc_type_bottom_field;
	uint8_t reserved1;
	uint8_t reserved2;
	uint16_t def_disp_win_left_offset;
	uint16_t def_disp_win_right_offset;
	uint16_t def_disp_win_top_offset;
	uint16_t def_disp_win_bottom_offset;
	uint32_t vui_num_units_in_tick;
	uint32_t vui_time_scale;
	uint32_t vui_num_ticks_poc_diff_one_minus1;
	uint16_t min_spatial_segmentation_idc;
	uint16_t reserved3;
	uint8_t max_bytes_per_pic_denom;
	uint8_t max_bits_per_min_cu_denom;
	uint8_t log2_max_mv_length_horizontal;
	uint8_t log2_max_mv_length_vertical;
	StdVideoH265HrdParameters* pHrdParameters;
}
struct StdVideoH265ShortTermRefPicSet {
	StdVideoH265ShortTermRefPicSetFlags flags;
	uint32_t delta_idx_minus1;
	uint16_t use_delta_flag;
	uint16_t abs_delta_rps_minus1;
	uint16_t used_by_curr_pic_flag;
	uint16_t used_by_curr_pic_s0_flag;
	uint16_t used_by_curr_pic_s1_flag;
	uint16_t reserved1;
	uint8_t reserved2;
	uint8_t reserved3;
	uint8_t num_negative_pics;
	uint8_t num_positive_pics;
	uint16_t[16] delta_poc_s0_minus1;
	uint16_t[16] delta_poc_s1_minus1;
}
struct StdVideoH265ShortTermRefPicSetFlags {
	uint32_t inter_ref_pic_set_prediction_flag;
	uint32_t delta_rps_sign;
}
struct StdVideoH265SpsFlags {
	uint32_t sps_temporal_id_nesting_flag;
	uint32_t separate_colour_plane_flag;
	uint32_t conformance_window_flag;
	uint32_t sps_sub_layer_ordering_info_present_flag;
	uint32_t scaling_list_enabled_flag;
	uint32_t sps_scaling_list_data_present_flag;
	uint32_t amp_enabled_flag;
	uint32_t sample_adaptive_offset_enabled_flag;
	uint32_t pcm_enabled_flag;
	uint32_t pcm_loop_filter_disabled_flag;
	uint32_t long_term_ref_pics_present_flag;
	uint32_t sps_temporal_mvp_enabled_flag;
	uint32_t strong_intra_smoothing_enabled_flag;
	uint32_t vui_parameters_present_flag;
	uint32_t sps_extension_present_flag;
	uint32_t sps_range_extension_flag;
	uint32_t transform_skip_rotation_enabled_flag;
	uint32_t transform_skip_context_enabled_flag;
	uint32_t implicit_rdpcm_enabled_flag;
	uint32_t explicit_rdpcm_enabled_flag;
	uint32_t extended_precision_processing_flag;
	uint32_t intra_smoothing_disabled_flag;
	uint32_t high_precision_offsets_enabled_flag;
	uint32_t persistent_rice_adaptation_enabled_flag;
	uint32_t cabac_bypass_alignment_enabled_flag;
	uint32_t sps_scc_extension_flag;
	uint32_t sps_curr_pic_ref_enabled_flag;
	uint32_t palette_mode_enabled_flag;
	uint32_t sps_palette_predictor_initializers_present_flag;
	uint32_t intra_boundary_filtering_disabled_flag;
}
struct StdVideoH265SpsVuiFlags {
	uint32_t aspect_ratio_info_present_flag;
	uint32_t overscan_info_present_flag;
	uint32_t overscan_appropriate_flag;
	uint32_t video_signal_type_present_flag;
	uint32_t video_full_range_flag;
	uint32_t colour_description_present_flag;
	uint32_t chroma_loc_info_present_flag;
	uint32_t neutral_chroma_indication_flag;
	uint32_t field_seq_flag;
	uint32_t frame_field_info_present_flag;
	uint32_t default_display_window_flag;
	uint32_t vui_timing_info_present_flag;
	uint32_t vui_poc_proportional_to_timing_flag;
	uint32_t vui_hrd_parameters_present_flag;
	uint32_t bitstream_restriction_flag;
	uint32_t tiles_fixed_structure_flag;
	uint32_t motion_vectors_over_pic_boundaries_flag;
	uint32_t restricted_ref_pic_lists_flag;
}
struct StdVideoH265SubLayerHrdParameters {
	uint32_t[32] bit_rate_value_minus1;
	uint32_t[32] cpb_size_value_minus1;
	uint32_t[32] cpb_size_du_value_minus1;
	uint32_t[32] bit_rate_du_value_minus1;
	uint32_t cbr_flag;
}
struct StdVideoH265VideoParameterSet {
	StdVideoH265VpsFlags flags;
	uint8_t vps_video_parameter_set_id;
	uint8_t vps_max_sub_layers_minus1;
	uint8_t reserved1;
	uint8_t reserved2;
	uint32_t vps_num_units_in_tick;
	uint32_t vps_time_scale;
	uint32_t vps_num_ticks_poc_diff_one_minus1;
	uint32_t reserved3;
	StdVideoH265DecPicBufMgr* pDecPicBufMgr;
	StdVideoH265HrdParameters* pHrdParameters;
	StdVideoH265ProfileTierLevel* pProfileTierLevel;
}
struct StdVideoH265VpsFlags {
	uint32_t vps_temporal_id_nesting_flag;
	uint32_t vps_sub_layer_ordering_info_present_flag;
	uint32_t vps_timing_info_present_flag;
	uint32_t vps_poc_proportional_to_timing_flag;
}
struct VkAabbPositionsKHR {
	float minX;
	float minY;
	float minZ;
	float maxX;
	float maxY;
	float maxZ;
}
struct VkAccelerationStructureBuildGeometryInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkAccelerationStructureTypeKHR type;
	VkBuildAccelerationStructureFlagsKHR flags;
	VkBuildAccelerationStructureModeKHR mode;
	VkAccelerationStructureKHR srcAccelerationStructure;
	VkAccelerationStructureKHR dstAccelerationStructure;
	uint32_t geometryCount;
	VkAccelerationStructureGeometryKHR* pGeometries;
	VkAccelerationStructureGeometryKHR** ppGeometries;
	VkDeviceOrHostAddressKHR scratchData;
}
struct VkAccelerationStructureBuildRangeInfoKHR {
	uint32_t primitiveCount;
	uint32_t primitiveOffset;
	uint32_t firstVertex;
	uint32_t transformOffset;
}
struct VkAccelerationStructureBuildSizesInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkDeviceSize accelerationStructureSize;
	VkDeviceSize updateScratchSize;
	VkDeviceSize buildScratchSize;
}
struct VkAccelerationStructureCaptureDescriptorDataInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkAccelerationStructureKHR accelerationStructure;
	VkAccelerationStructureNV accelerationStructureNV;
}
struct VkAccelerationStructureCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkAccelerationStructureCreateFlagsKHR createFlags;
	VkBuffer buffer;
	VkDeviceSize offset;
	VkDeviceSize size;
	VkAccelerationStructureTypeKHR type;
	VkDeviceAddress deviceAddress;
}
struct VkAccelerationStructureCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	VkDeviceSize compactedSize;
	VkAccelerationStructureInfoNV info;
}
struct VkAccelerationStructureDeviceAddressInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkAccelerationStructureKHR accelerationStructure;
}
struct VkAccelerationStructureGeometryAabbsDataKHR {
	VkStructureType sType;
	void* pNext;
	VkDeviceOrHostAddressConstKHR data;
	VkDeviceSize stride;
}
struct VkAccelerationStructureGeometryInstancesDataKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 arrayOfPointers;
	VkDeviceOrHostAddressConstKHR data;
}
struct VkAccelerationStructureGeometryKHR {
	VkStructureType sType;
	void* pNext;
	VkGeometryTypeKHR geometryType;
	VkAccelerationStructureGeometryDataKHR geometry;
	VkGeometryFlagsKHR flags;
}
struct VkAccelerationStructureGeometryLinearSweptSpheresDataNV {
	VkStructureType sType;
	void* pNext;
	VkFormat vertexFormat;
	VkDeviceOrHostAddressConstKHR vertexData;
	VkDeviceSize vertexStride;
	VkFormat radiusFormat;
	VkDeviceOrHostAddressConstKHR radiusData;
	VkDeviceSize radiusStride;
	VkIndexType indexType;
	VkDeviceOrHostAddressConstKHR indexData;
	VkDeviceSize indexStride;
	VkRayTracingLssIndexingModeNV indexingMode;
	VkRayTracingLssPrimitiveEndCapsModeNV endCapsMode;
}
struct VkAccelerationStructureGeometryMotionTrianglesDataNV {
	VkStructureType sType;
	void* pNext;
	VkDeviceOrHostAddressConstKHR vertexData;
}
struct VkAccelerationStructureGeometrySpheresDataNV {
	VkStructureType sType;
	void* pNext;
	VkFormat vertexFormat;
	VkDeviceOrHostAddressConstKHR vertexData;
	VkDeviceSize vertexStride;
	VkFormat radiusFormat;
	VkDeviceOrHostAddressConstKHR radiusData;
	VkDeviceSize radiusStride;
	VkIndexType indexType;
	VkDeviceOrHostAddressConstKHR indexData;
	VkDeviceSize indexStride;
}
struct VkAccelerationStructureGeometryTrianglesDataKHR {
	VkStructureType sType;
	void* pNext;
	VkFormat vertexFormat;
	VkDeviceOrHostAddressConstKHR vertexData;
	VkDeviceSize vertexStride;
	uint32_t maxVertex;
	VkIndexType indexType;
	VkDeviceOrHostAddressConstKHR indexData;
	VkDeviceOrHostAddressConstKHR transformData;
}
struct VkAccelerationStructureInfoNV {
	VkStructureType sType;
	void* pNext;
	VkAccelerationStructureTypeNV type;
	VkBuildAccelerationStructureFlagsNV flags;
	uint32_t instanceCount;
	uint32_t geometryCount;
	VkGeometryNV* pGeometries;
}
struct VkAccelerationStructureInstanceKHR {
	VkTransformMatrixKHR transform;
	uint32_t instanceCustomIndex;
	uint32_t mask;
	uint32_t instanceShaderBindingTableRecordOffset;
	VkGeometryInstanceFlagsKHR flags;
	uint64_t accelerationStructureReference;
}
struct VkAccelerationStructureKHR_T {
}
struct VkAccelerationStructureMatrixMotionInstanceNV {
	VkTransformMatrixKHR transformT0;
	VkTransformMatrixKHR transformT1;
	uint32_t instanceCustomIndex;
	uint32_t mask;
	uint32_t instanceShaderBindingTableRecordOffset;
	VkGeometryInstanceFlagsKHR flags;
	uint64_t accelerationStructureReference;
}
struct VkAccelerationStructureMemoryRequirementsInfoNV {
	VkStructureType sType;
	void* pNext;
	VkAccelerationStructureMemoryRequirementsTypeNV type;
	VkAccelerationStructureNV accelerationStructure;
}
struct VkAccelerationStructureMotionInfoNV {
	VkStructureType sType;
	void* pNext;
	uint32_t maxInstances;
	VkAccelerationStructureMotionInfoFlagsNV flags;
}
struct VkAccelerationStructureMotionInstanceNV {
	VkAccelerationStructureMotionInstanceTypeNV type;
	VkAccelerationStructureMotionInstanceFlagsNV flags;
	VkAccelerationStructureMotionInstanceDataNV data;
}
struct VkAccelerationStructureNV_T {
}
struct VkAccelerationStructureSRTMotionInstanceNV {
	VkSRTDataNV transformT0;
	VkSRTDataNV transformT1;
	uint32_t instanceCustomIndex;
	uint32_t mask;
	uint32_t instanceShaderBindingTableRecordOffset;
	VkGeometryInstanceFlagsKHR flags;
	uint64_t accelerationStructureReference;
}
struct VkAccelerationStructureTrianglesOpacityMicromapEXT {
	VkStructureType sType;
	void* pNext;
	VkIndexType indexType;
	VkDeviceOrHostAddressConstKHR indexBuffer;
	VkDeviceSize indexStride;
	uint32_t baseTriangle;
	uint32_t usageCountsCount;
	VkMicromapUsageEXT* pUsageCounts;
	VkMicromapUsageEXT** ppUsageCounts;
	VkMicromapEXT micromap;
}
struct VkAccelerationStructureVersionInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint8_t* pVersionData;
}
struct VkAcquireNextImageInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkSwapchainKHR swapchain;
	uint64_t timeout;
	VkSemaphore semaphore;
	VkFence fence;
	uint32_t deviceMask;
}
struct VkAcquireProfilingLockInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkAcquireProfilingLockFlagsKHR flags;
	uint64_t timeout;
}
struct VkAllocationCallbacks {
	void* pUserData;
	PFN_vkAllocationFunction pfnAllocation;
	PFN_vkReallocationFunction pfnReallocation;
	PFN_vkFreeFunction pfnFree;
	PFN_vkInternalAllocationNotification pfnInternalAllocation;
	PFN_vkInternalFreeNotification pfnInternalFree;
}
struct VkAmigoProfilingSubmitInfoSEC {
	VkStructureType sType;
	void* pNext;
	uint64_t firstDrawTimestamp;
	uint64_t swapBufferTimestamp;
}
struct VkAntiLagDataAMD {
	VkStructureType sType;
	void* pNext;
	VkAntiLagModeAMD mode;
	uint32_t maxFPS;
	VkAntiLagPresentationInfoAMD* pPresentationInfo;
}
struct VkAntiLagPresentationInfoAMD {
	VkStructureType sType;
	void* pNext;
	VkAntiLagStageAMD stage;
	uint64_t frameIndex;
}
struct VkApplicationInfo {
	VkStructureType sType;
	void* pNext;
	immutable(char)* pApplicationName;
	uint32_t applicationVersion;
	immutable(char)* pEngineName;
	uint32_t engineVersion;
	uint32_t apiVersion;
}
struct VkAttachmentDescription {
	VkAttachmentDescriptionFlags flags;
	VkFormat format;
	VkSampleCountFlagBits samples;
	VkAttachmentLoadOp loadOp;
	VkAttachmentStoreOp storeOp;
	VkAttachmentLoadOp stencilLoadOp;
	VkAttachmentStoreOp stencilStoreOp;
	VkImageLayout initialLayout;
	VkImageLayout finalLayout;
}
struct VkAttachmentDescription2 {
	VkStructureType sType;
	void* pNext;
	VkAttachmentDescriptionFlags flags;
	VkFormat format;
	VkSampleCountFlagBits samples;
	VkAttachmentLoadOp loadOp;
	VkAttachmentStoreOp storeOp;
	VkAttachmentLoadOp stencilLoadOp;
	VkAttachmentStoreOp stencilStoreOp;
	VkImageLayout initialLayout;
	VkImageLayout finalLayout;
}
struct VkAttachmentDescriptionStencilLayout {
	VkStructureType sType;
	void* pNext;
	VkImageLayout stencilInitialLayout;
	VkImageLayout stencilFinalLayout;
}
struct VkAttachmentReference {
	uint32_t attachment;
	VkImageLayout layout;
}
struct VkAttachmentReference2 {
	VkStructureType sType;
	void* pNext;
	uint32_t attachment;
	VkImageLayout layout;
	VkImageAspectFlags aspectMask;
}
struct VkAttachmentReferenceStencilLayout {
	VkStructureType sType;
	void* pNext;
	VkImageLayout stencilLayout;
}
struct VkAttachmentSampleCountInfoAMD {
	VkStructureType sType;
	void* pNext;
	uint32_t colorAttachmentCount;
	VkSampleCountFlagBits* pColorAttachmentSamples;
	VkSampleCountFlagBits depthStencilAttachmentSamples;
}
struct VkAttachmentSampleLocationsEXT {
	uint32_t attachmentIndex;
	VkSampleLocationsInfoEXT sampleLocationsInfo;
}
struct VkBaseInStructure {
	VkStructureType sType;
	VkBaseInStructure* pNext;
}
struct VkBaseOutStructure {
	VkStructureType sType;
	VkBaseOutStructure* pNext;
}
struct VkBindAccelerationStructureMemoryInfoNV {
	VkStructureType sType;
	void* pNext;
	VkAccelerationStructureNV accelerationStructure;
	VkDeviceMemory memory;
	VkDeviceSize memoryOffset;
	uint32_t deviceIndexCount;
	uint32_t* pDeviceIndices;
}
struct VkBindBufferMemoryDeviceGroupInfo {
	VkStructureType sType;
	void* pNext;
	uint32_t deviceIndexCount;
	uint32_t* pDeviceIndices;
}
struct VkBindBufferMemoryInfo {
	VkStructureType sType;
	void* pNext;
	VkBuffer buffer;
	VkDeviceMemory memory;
	VkDeviceSize memoryOffset;
}
struct VkBindDescriptorBufferEmbeddedSamplersInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkShaderStageFlags stageFlags;
	VkPipelineLayout layout;
	uint32_t set;
}
struct VkBindDescriptorSetsInfo {
	VkStructureType sType;
	void* pNext;
	VkShaderStageFlags stageFlags;
	VkPipelineLayout layout;
	uint32_t firstSet;
	uint32_t descriptorSetCount;
	VkDescriptorSet* pDescriptorSets;
	uint32_t dynamicOffsetCount;
	uint32_t* pDynamicOffsets;
}
struct VkBindImageMemoryDeviceGroupInfo {
	VkStructureType sType;
	void* pNext;
	uint32_t deviceIndexCount;
	uint32_t* pDeviceIndices;
	uint32_t splitInstanceBindRegionCount;
	VkRect2D* pSplitInstanceBindRegions;
}
struct VkBindImageMemoryInfo {
	VkStructureType sType;
	void* pNext;
	VkImage image;
	VkDeviceMemory memory;
	VkDeviceSize memoryOffset;
}
struct VkBindImageMemorySwapchainInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkSwapchainKHR swapchain;
	uint32_t imageIndex;
}
struct VkBindImagePlaneMemoryInfo {
	VkStructureType sType;
	void* pNext;
	VkImageAspectFlagBits planeAspect;
}
struct VkBindIndexBufferIndirectCommandEXT {
	VkDeviceAddress bufferAddress;
	uint32_t size;
	VkIndexType indexType;
}
struct VkBindIndexBufferIndirectCommandNV {
	VkDeviceAddress bufferAddress;
	uint32_t size;
	VkIndexType indexType;
}
struct VkBindMemoryStatus {
	VkStructureType sType;
	void* pNext;
	VkResult* pResult;
}
struct VkBindPipelineIndirectCommandNV {
	VkDeviceAddress pipelineAddress;
}
struct VkBindShaderGroupIndirectCommandNV {
	uint32_t groupIndex;
}
struct VkBindSparseInfo {
	VkStructureType sType;
	void* pNext;
	uint32_t waitSemaphoreCount;
	VkSemaphore* pWaitSemaphores;
	uint32_t bufferBindCount;
	VkSparseBufferMemoryBindInfo* pBufferBinds;
	uint32_t imageOpaqueBindCount;
	VkSparseImageOpaqueMemoryBindInfo* pImageOpaqueBinds;
	uint32_t imageBindCount;
	VkSparseImageMemoryBindInfo* pImageBinds;
	uint32_t signalSemaphoreCount;
	VkSemaphore* pSignalSemaphores;
}
struct VkBindVertexBufferIndirectCommandEXT {
	VkDeviceAddress bufferAddress;
	uint32_t size;
	uint32_t stride;
}
struct VkBindVertexBufferIndirectCommandNV {
	VkDeviceAddress bufferAddress;
	uint32_t size;
	uint32_t stride;
}
struct VkBindVideoSessionMemoryInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t memoryBindIndex;
	VkDeviceMemory memory;
	VkDeviceSize memoryOffset;
	VkDeviceSize memorySize;
}
struct VkBlitImageCubicWeightsInfoQCOM {
	VkStructureType sType;
	void* pNext;
	VkCubicFilterWeightsQCOM cubicWeights;
}
struct VkBlitImageInfo2 {
	VkStructureType sType;
	void* pNext;
	VkImage srcImage;
	VkImageLayout srcImageLayout;
	VkImage dstImage;
	VkImageLayout dstImageLayout;
	uint32_t regionCount;
	VkImageBlit2* pRegions;
	VkFilter filter;
}
struct VkBufferCaptureDescriptorDataInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkBuffer buffer;
}
struct VkBufferCopy {
	VkDeviceSize srcOffset;
	VkDeviceSize dstOffset;
	VkDeviceSize size;
}
struct VkBufferCopy2 {
	VkStructureType sType;
	void* pNext;
	VkDeviceSize srcOffset;
	VkDeviceSize dstOffset;
	VkDeviceSize size;
}
struct VkBufferCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkBufferCreateFlags flags;
	VkDeviceSize size;
	VkBufferUsageFlags usage;
	VkSharingMode sharingMode;
	uint32_t queueFamilyIndexCount;
	uint32_t* pQueueFamilyIndices;
}
struct VkBufferDeviceAddressCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkDeviceAddress deviceAddress;
}
struct VkBufferDeviceAddressInfo {
	VkStructureType sType;
	void* pNext;
	VkBuffer buffer;
}
struct VkBufferImageCopy {
	VkDeviceSize bufferOffset;
	uint32_t bufferRowLength;
	uint32_t bufferImageHeight;
	VkImageSubresourceLayers imageSubresource;
	VkOffset3D imageOffset;
	VkExtent3D imageExtent;
}
struct VkBufferImageCopy2 {
	VkStructureType sType;
	void* pNext;
	VkDeviceSize bufferOffset;
	uint32_t bufferRowLength;
	uint32_t bufferImageHeight;
	VkImageSubresourceLayers imageSubresource;
	VkOffset3D imageOffset;
	VkExtent3D imageExtent;
}
struct VkBufferMemoryBarrier {
	VkStructureType sType;
	void* pNext;
	VkAccessFlags srcAccessMask;
	VkAccessFlags dstAccessMask;
	uint32_t srcQueueFamilyIndex;
	uint32_t dstQueueFamilyIndex;
	VkBuffer buffer;
	VkDeviceSize offset;
	VkDeviceSize size;
}
struct VkBufferMemoryBarrier2 {
	VkStructureType sType;
	void* pNext;
	VkPipelineStageFlags2 srcStageMask;
	VkAccessFlags2 srcAccessMask;
	VkPipelineStageFlags2 dstStageMask;
	VkAccessFlags2 dstAccessMask;
	uint32_t srcQueueFamilyIndex;
	uint32_t dstQueueFamilyIndex;
	VkBuffer buffer;
	VkDeviceSize offset;
	VkDeviceSize size;
}
struct VkBufferMemoryRequirementsInfo2 {
	VkStructureType sType;
	void* pNext;
	VkBuffer buffer;
}
struct VkBufferOpaqueCaptureAddressCreateInfo {
	VkStructureType sType;
	void* pNext;
	uint64_t opaqueCaptureAddress;
}
struct VkBufferUsageFlags2CreateInfo {
	VkStructureType sType;
	void* pNext;
	VkBufferUsageFlags2 usage;
}
struct VkBufferViewCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkBufferViewCreateFlags flags;
	VkBuffer buffer;
	VkFormat format;
	VkDeviceSize offset;
	VkDeviceSize range;
}
struct VkBufferView_T {
}
struct VkBuffer_T {
}
struct VkBuildPartitionedAccelerationStructureIndirectCommandNV {
	VkPartitionedAccelerationStructureOpTypeNV opType;
	uint32_t argCount;
	VkStridedDeviceAddressNV argData;
}
struct VkBuildPartitionedAccelerationStructureInfoNV {
	VkStructureType sType;
	void* pNext;
	VkPartitionedAccelerationStructureInstancesInputNV input;
	VkDeviceAddress srcAccelerationStructureData;
	VkDeviceAddress dstAccelerationStructureData;
	VkDeviceAddress scratchData;
	VkDeviceAddress srcInfos;
	VkDeviceAddress srcInfosCount;
}
struct VkCalibratedTimestampInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkTimeDomainKHR timeDomain;
}
struct VkCheckpointData2NV {
	VkStructureType sType;
	void* pNext;
	VkPipelineStageFlags2 stage;
	void* pCheckpointMarker;
}
struct VkCheckpointDataNV {
	VkStructureType sType;
	void* pNext;
	VkPipelineStageFlagBits stage;
	void* pCheckpointMarker;
}
struct VkClearAttachment {
	VkImageAspectFlags aspectMask;
	uint32_t colorAttachment;
	VkClearValue clearValue;
}
struct VkClearDepthStencilValue {
	float depth;
	uint32_t stencil;
}
struct VkClearRect {
	VkRect2D rect;
	uint32_t baseArrayLayer;
	uint32_t layerCount;
}
struct VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV {
	uint32_t clusterReferencesCount;
	uint32_t clusterReferencesStride;
	VkDeviceAddress clusterReferences;
}
struct VkClusterAccelerationStructureBuildTriangleClusterInfoNV {
	uint32_t clusterID;
	VkClusterAccelerationStructureClusterFlagsNV clusterFlags;
	uint32_t triangleCount;
	uint32_t vertexCount;
	uint32_t positionTruncateBitCount;
	uint32_t indexType;
	uint32_t opacityMicromapIndexType;
	VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV baseGeometryIndexAndGeometryFlags;
	uint16_t indexBufferStride;
	uint16_t vertexBufferStride;
	uint16_t geometryIndexAndFlagsBufferStride;
	uint16_t opacityMicromapIndexBufferStride;
	VkDeviceAddress indexBuffer;
	VkDeviceAddress vertexBuffer;
	VkDeviceAddress geometryIndexAndFlagsBuffer;
	VkDeviceAddress opacityMicromapArray;
	VkDeviceAddress opacityMicromapIndexBuffer;
}
struct VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV {
	uint32_t clusterID;
	VkClusterAccelerationStructureClusterFlagsNV clusterFlags;
	uint32_t triangleCount;
	uint32_t vertexCount;
	uint32_t positionTruncateBitCount;
	uint32_t indexType;
	uint32_t opacityMicromapIndexType;
	VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV baseGeometryIndexAndGeometryFlags;
	uint16_t indexBufferStride;
	uint16_t vertexBufferStride;
	uint16_t geometryIndexAndFlagsBufferStride;
	uint16_t opacityMicromapIndexBufferStride;
	VkDeviceAddress indexBuffer;
	VkDeviceAddress vertexBuffer;
	VkDeviceAddress geometryIndexAndFlagsBuffer;
	VkDeviceAddress opacityMicromapArray;
	VkDeviceAddress opacityMicromapIndexBuffer;
	VkDeviceAddress instantiationBoundingBoxLimit;
}
struct VkClusterAccelerationStructureClustersBottomLevelInputNV {
	VkStructureType sType;
	void* pNext;
	uint32_t maxTotalClusterCount;
	uint32_t maxClusterCountPerAccelerationStructure;
}
struct VkClusterAccelerationStructureCommandsInfoNV {
	VkStructureType sType;
	void* pNext;
	VkClusterAccelerationStructureInputInfoNV input;
	VkDeviceAddress dstImplicitData;
	VkDeviceAddress scratchData;
	VkStridedDeviceAddressRegionKHR dstAddressesArray;
	VkStridedDeviceAddressRegionKHR dstSizesArray;
	VkStridedDeviceAddressRegionKHR srcInfosArray;
	VkDeviceAddress srcInfosCount;
	VkClusterAccelerationStructureAddressResolutionFlagsNV addressResolutionFlags;
}
struct VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV {
	uint32_t geometryIndex;
	uint32_t reserved;
	uint32_t geometryFlags;
}
struct VkClusterAccelerationStructureInputInfoNV {
	VkStructureType sType;
	void* pNext;
	uint32_t maxAccelerationStructureCount;
	VkBuildAccelerationStructureFlagsKHR flags;
	VkClusterAccelerationStructureOpTypeNV opType;
	VkClusterAccelerationStructureOpModeNV opMode;
	VkClusterAccelerationStructureOpInputNV opInput;
}
struct VkClusterAccelerationStructureInstantiateClusterInfoNV {
	uint32_t clusterIdOffset;
	uint32_t geometryIndexOffset;
	uint32_t reserved;
	VkDeviceAddress clusterTemplateAddress;
	VkStridedDeviceAddressNV vertexBuffer;
}
struct VkClusterAccelerationStructureMoveObjectsInfoNV {
	VkDeviceAddress srcAccelerationStructure;
}
struct VkClusterAccelerationStructureMoveObjectsInputNV {
	VkStructureType sType;
	void* pNext;
	VkClusterAccelerationStructureTypeNV type;
	VkBool32 noMoveOverlap;
	VkDeviceSize maxMovedBytes;
}
struct VkClusterAccelerationStructureTriangleClusterInputNV {
	VkStructureType sType;
	void* pNext;
	VkFormat vertexFormat;
	uint32_t maxGeometryIndexValue;
	uint32_t maxClusterUniqueGeometryCount;
	uint32_t maxClusterTriangleCount;
	uint32_t maxClusterVertexCount;
	uint32_t maxTotalTriangleCount;
	uint32_t maxTotalVertexCount;
	uint32_t minPositionTruncateBitCount;
}
struct VkCoarseSampleLocationNV {
	uint32_t pixelX;
	uint32_t pixelY;
	uint32_t sample;
}
struct VkCoarseSampleOrderCustomNV {
	VkShadingRatePaletteEntryNV shadingRate;
	uint32_t sampleCount;
	uint32_t sampleLocationCount;
	VkCoarseSampleLocationNV* pSampleLocations;
}
struct VkColorBlendAdvancedEXT {
	VkBlendOp advancedBlendOp;
	VkBool32 srcPremultiplied;
	VkBool32 dstPremultiplied;
	VkBlendOverlapEXT blendOverlap;
	VkBool32 clampResults;
}
struct VkColorBlendEquationEXT {
	VkBlendFactor srcColorBlendFactor;
	VkBlendFactor dstColorBlendFactor;
	VkBlendOp colorBlendOp;
	VkBlendFactor srcAlphaBlendFactor;
	VkBlendFactor dstAlphaBlendFactor;
	VkBlendOp alphaBlendOp;
}
struct VkCommandBufferAllocateInfo {
	VkStructureType sType;
	void* pNext;
	VkCommandPool commandPool;
	VkCommandBufferLevel level;
	uint32_t commandBufferCount;
}
struct VkCommandBufferBeginInfo {
	VkStructureType sType;
	void* pNext;
	VkCommandBufferUsageFlags flags;
	VkCommandBufferInheritanceInfo* pInheritanceInfo;
}
struct VkCommandBufferInheritanceConditionalRenderingInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 conditionalRenderingEnable;
}
struct VkCommandBufferInheritanceInfo {
	VkStructureType sType;
	void* pNext;
	VkRenderPass renderPass;
	uint32_t subpass;
	VkFramebuffer framebuffer;
	VkBool32 occlusionQueryEnable;
	VkQueryControlFlags queryFlags;
	VkQueryPipelineStatisticFlags pipelineStatistics;
}
struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM {
	VkStructureType sType;
	void* pNext;
	VkSurfaceTransformFlagBitsKHR transform;
	VkRect2D renderArea;
}
struct VkCommandBufferInheritanceRenderingInfo {
	VkStructureType sType;
	void* pNext;
	VkRenderingFlags flags;
	uint32_t viewMask;
	uint32_t colorAttachmentCount;
	VkFormat* pColorAttachmentFormats;
	VkFormat depthAttachmentFormat;
	VkFormat stencilAttachmentFormat;
	VkSampleCountFlagBits rasterizationSamples;
}
struct VkCommandBufferInheritanceViewportScissorInfoNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 viewportScissor2D;
	uint32_t viewportDepthCount;
	VkViewport* pViewportDepths;
}
struct VkCommandBufferSubmitInfo {
	VkStructureType sType;
	void* pNext;
	VkCommandBuffer commandBuffer;
	uint32_t deviceMask;
}
struct VkCommandBuffer_T {
}
struct VkCommandPoolCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkCommandPoolCreateFlags flags;
	uint32_t queueFamilyIndex;
}
struct VkCommandPool_T {
}
struct VkComponentMapping {
	VkComponentSwizzle r;
	VkComponentSwizzle g;
	VkComponentSwizzle b;
	VkComponentSwizzle a;
}
struct VkComputePipelineCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkPipelineCreateFlags flags;
	VkPipelineShaderStageCreateInfo stage;
	VkPipelineLayout layout;
	VkPipeline basePipelineHandle;
	int32_t basePipelineIndex;
}
struct VkComputePipelineIndirectBufferInfoNV {
	VkStructureType sType;
	void* pNext;
	VkDeviceAddress deviceAddress;
	VkDeviceSize size;
	VkDeviceAddress pipelineDeviceAddressCaptureReplay;
}
struct VkConditionalRenderingBeginInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkBuffer buffer;
	VkDeviceSize offset;
	VkConditionalRenderingFlagsEXT flags;
}
struct VkConformanceVersion {
	uint8_t major;
	uint8_t minor;
	uint8_t subminor;
	uint8_t patch;
}
struct VkConvertCooperativeVectorMatrixInfoNV {
	VkStructureType sType;
	void* pNext;
	size_t srcSize;
	VkDeviceOrHostAddressConstKHR srcData;
	size_t* pDstSize;
	VkDeviceOrHostAddressKHR dstData;
	VkComponentTypeKHR srcComponentType;
	VkComponentTypeKHR dstComponentType;
	uint32_t numRows;
	uint32_t numColumns;
	VkCooperativeVectorMatrixLayoutNV srcLayout;
	size_t srcStride;
	VkCooperativeVectorMatrixLayoutNV dstLayout;
	size_t dstStride;
}
struct VkCooperativeMatrixFlexibleDimensionsPropertiesNV {
	VkStructureType sType;
	void* pNext;
	uint32_t MGranularity;
	uint32_t NGranularity;
	uint32_t KGranularity;
	VkComponentTypeKHR AType;
	VkComponentTypeKHR BType;
	VkComponentTypeKHR CType;
	VkComponentTypeKHR ResultType;
	VkBool32 saturatingAccumulation;
	VkScopeKHR scope_;
	uint32_t workgroupInvocations;
}
struct VkCooperativeMatrixPropertiesKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t MSize;
	uint32_t NSize;
	uint32_t KSize;
	VkComponentTypeKHR AType;
	VkComponentTypeKHR BType;
	VkComponentTypeKHR CType;
	VkComponentTypeKHR ResultType;
	VkBool32 saturatingAccumulation;
	VkScopeKHR scope_;
}
struct VkCooperativeMatrixPropertiesNV {
	VkStructureType sType;
	void* pNext;
	uint32_t MSize;
	uint32_t NSize;
	uint32_t KSize;
	VkComponentTypeNV AType;
	VkComponentTypeNV BType;
	VkComponentTypeNV CType;
	VkComponentTypeNV DType;
	VkScopeNV scope_;
}
struct VkCooperativeVectorPropertiesNV {
	VkStructureType sType;
	void* pNext;
	VkComponentTypeKHR inputType;
	VkComponentTypeKHR inputInterpretation;
	VkComponentTypeKHR matrixInterpretation;
	VkComponentTypeKHR biasInterpretation;
	VkComponentTypeKHR resultType;
	VkBool32 transpose;
}
struct VkCopyAccelerationStructureInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkAccelerationStructureKHR src;
	VkAccelerationStructureKHR dst;
	VkCopyAccelerationStructureModeKHR mode;
}
struct VkCopyAccelerationStructureToMemoryInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkAccelerationStructureKHR src;
	VkDeviceOrHostAddressKHR dst;
	VkCopyAccelerationStructureModeKHR mode;
}
struct VkCopyBufferInfo2 {
	VkStructureType sType;
	void* pNext;
	VkBuffer srcBuffer;
	VkBuffer dstBuffer;
	uint32_t regionCount;
	VkBufferCopy2* pRegions;
}
struct VkCopyBufferToImageInfo2 {
	VkStructureType sType;
	void* pNext;
	VkBuffer srcBuffer;
	VkImage dstImage;
	VkImageLayout dstImageLayout;
	uint32_t regionCount;
	VkBufferImageCopy2* pRegions;
}
struct VkCopyCommandTransformInfoQCOM {
	VkStructureType sType;
	void* pNext;
	VkSurfaceTransformFlagBitsKHR transform;
}
struct VkCopyDescriptorSet {
	VkStructureType sType;
	void* pNext;
	VkDescriptorSet srcSet;
	uint32_t srcBinding;
	uint32_t srcArrayElement;
	VkDescriptorSet dstSet;
	uint32_t dstBinding;
	uint32_t dstArrayElement;
	uint32_t descriptorCount;
}
struct VkCopyImageInfo2 {
	VkStructureType sType;
	void* pNext;
	VkImage srcImage;
	VkImageLayout srcImageLayout;
	VkImage dstImage;
	VkImageLayout dstImageLayout;
	uint32_t regionCount;
	VkImageCopy2* pRegions;
}
struct VkCopyImageToBufferInfo2 {
	VkStructureType sType;
	void* pNext;
	VkImage srcImage;
	VkImageLayout srcImageLayout;
	VkBuffer dstBuffer;
	uint32_t regionCount;
	VkBufferImageCopy2* pRegions;
}
struct VkCopyImageToImageInfo {
	VkStructureType sType;
	void* pNext;
	VkHostImageCopyFlags flags;
	VkImage srcImage;
	VkImageLayout srcImageLayout;
	VkImage dstImage;
	VkImageLayout dstImageLayout;
	uint32_t regionCount;
	VkImageCopy2* pRegions;
}
struct VkCopyImageToMemoryInfo {
	VkStructureType sType;
	void* pNext;
	VkHostImageCopyFlags flags;
	VkImage srcImage;
	VkImageLayout srcImageLayout;
	uint32_t regionCount;
	VkImageToMemoryCopy* pRegions;
}
struct VkCopyMemoryIndirectCommandNV {
	VkDeviceAddress srcAddress;
	VkDeviceAddress dstAddress;
	VkDeviceSize size;
}
struct VkCopyMemoryToAccelerationStructureInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkDeviceOrHostAddressConstKHR src;
	VkAccelerationStructureKHR dst;
	VkCopyAccelerationStructureModeKHR mode;
}
struct VkCopyMemoryToImageIndirectCommandNV {
	VkDeviceAddress srcAddress;
	uint32_t bufferRowLength;
	uint32_t bufferImageHeight;
	VkImageSubresourceLayers imageSubresource;
	VkOffset3D imageOffset;
	VkExtent3D imageExtent;
}
struct VkCopyMemoryToImageInfo {
	VkStructureType sType;
	void* pNext;
	VkHostImageCopyFlags flags;
	VkImage dstImage;
	VkImageLayout dstImageLayout;
	uint32_t regionCount;
	VkMemoryToImageCopy* pRegions;
}
struct VkCopyMemoryToMicromapInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkDeviceOrHostAddressConstKHR src;
	VkMicromapEXT dst;
	VkCopyMicromapModeEXT mode;
}
struct VkCopyMicromapInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkMicromapEXT src;
	VkMicromapEXT dst;
	VkCopyMicromapModeEXT mode;
}
struct VkCopyMicromapToMemoryInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkMicromapEXT src;
	VkDeviceOrHostAddressKHR dst;
	VkCopyMicromapModeEXT mode;
}
struct VkCuFunctionCreateInfoNVX {
	VkStructureType sType;
	void* pNext;
	VkCuModuleNVX module_;
	immutable(char)* pName;
}
struct VkCuFunctionNVX_T {
}
struct VkCuLaunchInfoNVX {
	VkStructureType sType;
	void* pNext;
	VkCuFunctionNVX function_;
	uint32_t gridDimX;
	uint32_t gridDimY;
	uint32_t gridDimZ;
	uint32_t blockDimX;
	uint32_t blockDimY;
	uint32_t blockDimZ;
	uint32_t sharedMemBytes;
	size_t paramCount;
	void** pParams;
	size_t extraCount;
	void** pExtras;
}
struct VkCuModuleCreateInfoNVX {
	VkStructureType sType;
	void* pNext;
	size_t dataSize;
	void* pData;
}
struct VkCuModuleNVX_T {
}
struct VkCuModuleTexturingModeCreateInfoNVX {
	VkStructureType sType;
	void* pNext;
	VkBool32 use64bitTexturing;
}
struct VkCudaFunctionCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	VkCudaModuleNV module_;
	immutable(char)* pName;
}
struct VkCudaFunctionNV_T {
}
struct VkCudaLaunchInfoNV {
	VkStructureType sType;
	void* pNext;
	VkCudaFunctionNV function_;
	uint32_t gridDimX;
	uint32_t gridDimY;
	uint32_t gridDimZ;
	uint32_t blockDimX;
	uint32_t blockDimY;
	uint32_t blockDimZ;
	uint32_t sharedMemBytes;
	size_t paramCount;
	void** pParams;
	size_t extraCount;
	void** pExtras;
}
struct VkCudaModuleCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	size_t dataSize;
	void* pData;
}
struct VkCudaModuleNV_T {
}
struct VkD3D12FenceSubmitInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t waitSemaphoreValuesCount;
	uint64_t* pWaitSemaphoreValues;
	uint32_t signalSemaphoreValuesCount;
	uint64_t* pSignalSemaphoreValues;
}
struct VkDebugMarkerMarkerInfoEXT {
	VkStructureType sType;
	void* pNext;
	immutable(char)* pMarkerName;
	float[4] color;
}
struct VkDebugMarkerObjectNameInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkDebugReportObjectTypeEXT objectType;
	uint64_t object;
	immutable(char)* pObjectName;
}
struct VkDebugMarkerObjectTagInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkDebugReportObjectTypeEXT objectType;
	uint64_t object;
	uint64_t tagName;
	size_t tagSize;
	void* pTag;
}
struct VkDebugReportCallbackCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkDebugReportFlagsEXT flags;
	PFN_vkDebugReportCallbackEXT pfnCallback;
	void* pUserData;
}
struct VkDebugReportCallbackEXT_T {
}
struct VkDebugUtilsLabelEXT {
	VkStructureType sType;
	void* pNext;
	immutable(char)* pLabelName;
	float[4] color;
}
struct VkDebugUtilsMessengerCallbackDataEXT {
	VkStructureType sType;
	void* pNext;
	VkDebugUtilsMessengerCallbackDataFlagsEXT flags;
	immutable(char)* pMessageIdName;
	int32_t messageIdNumber;
	immutable(char)* pMessage;
	uint32_t queueLabelCount;
	VkDebugUtilsLabelEXT* pQueueLabels;
	uint32_t cmdBufLabelCount;
	VkDebugUtilsLabelEXT* pCmdBufLabels;
	uint32_t objectCount;
	VkDebugUtilsObjectNameInfoEXT* pObjects;
}
struct VkDebugUtilsMessengerCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkDebugUtilsMessengerCreateFlagsEXT flags;
	VkDebugUtilsMessageSeverityFlagsEXT messageSeverity;
	VkDebugUtilsMessageTypeFlagsEXT messageType;
	PFN_vkDebugUtilsMessengerCallbackEXT pfnUserCallback;
	void* pUserData;
}
struct VkDebugUtilsMessengerEXT_T {
}
struct VkDebugUtilsObjectNameInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkObjectType objectType;
	uint64_t objectHandle;
	immutable(char)* pObjectName;
}
struct VkDebugUtilsObjectTagInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkObjectType objectType;
	uint64_t objectHandle;
	uint64_t tagName;
	size_t tagSize;
	void* pTag;
}
struct VkDecompressMemoryRegionNV {
	VkDeviceAddress srcAddress;
	VkDeviceAddress dstAddress;
	VkDeviceSize compressedSize;
	VkDeviceSize decompressedSize;
	VkMemoryDecompressionMethodFlagsNV decompressionMethod;
}
struct VkDedicatedAllocationBufferCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 dedicatedAllocation;
}
struct VkDedicatedAllocationImageCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 dedicatedAllocation;
}
struct VkDedicatedAllocationMemoryAllocateInfoNV {
	VkStructureType sType;
	void* pNext;
	VkImage image;
	VkBuffer buffer;
}
struct VkDeferredOperationKHR_T {
}
struct VkDependencyInfo {
	VkStructureType sType;
	void* pNext;
	VkDependencyFlags dependencyFlags;
	uint32_t memoryBarrierCount;
	VkMemoryBarrier2* pMemoryBarriers;
	uint32_t bufferMemoryBarrierCount;
	VkBufferMemoryBarrier2* pBufferMemoryBarriers;
	uint32_t imageMemoryBarrierCount;
	VkImageMemoryBarrier2* pImageMemoryBarriers;
}
struct VkDepthBiasInfoEXT {
	VkStructureType sType;
	void* pNext;
	float depthBiasConstantFactor;
	float depthBiasClamp;
	float depthBiasSlopeFactor;
}
struct VkDepthBiasRepresentationInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkDepthBiasRepresentationEXT depthBiasRepresentation;
	VkBool32 depthBiasExact;
}
struct VkDepthClampRangeEXT {
	float minDepthClamp;
	float maxDepthClamp;
}
struct VkDescriptorAddressInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkDeviceAddress address;
	VkDeviceSize range;
	VkFormat format;
}
struct VkDescriptorBufferBindingInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkDeviceAddress address;
	VkBufferUsageFlags usage;
}
struct VkDescriptorBufferBindingPushDescriptorBufferHandleEXT {
	VkStructureType sType;
	void* pNext;
	VkBuffer buffer;
}
struct VkDescriptorBufferInfo {
	VkBuffer buffer;
	VkDeviceSize offset;
	VkDeviceSize range;
}
struct VkDescriptorGetInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkDescriptorType type;
	VkDescriptorDataEXT data;
}
struct VkDescriptorImageInfo {
	VkSampler sampler;
	VkImageView imageView;
	VkImageLayout imageLayout;
}
struct VkDescriptorPoolCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkDescriptorPoolCreateFlags flags;
	uint32_t maxSets;
	uint32_t poolSizeCount;
	VkDescriptorPoolSize* pPoolSizes;
}
struct VkDescriptorPoolInlineUniformBlockCreateInfo {
	VkStructureType sType;
	void* pNext;
	uint32_t maxInlineUniformBlockBindings;
}
struct VkDescriptorPoolSize {
	VkDescriptorType type;
	uint32_t descriptorCount;
}
struct VkDescriptorPool_T {
}
struct VkDescriptorSetAllocateInfo {
	VkStructureType sType;
	void* pNext;
	VkDescriptorPool descriptorPool;
	uint32_t descriptorSetCount;
	VkDescriptorSetLayout* pSetLayouts;
}
struct VkDescriptorSetBindingReferenceVALVE {
	VkStructureType sType;
	void* pNext;
	VkDescriptorSetLayout descriptorSetLayout;
	uint32_t binding;
}
struct VkDescriptorSetLayoutBinding {
	uint32_t binding;
	VkDescriptorType descriptorType;
	uint32_t descriptorCount;
	VkShaderStageFlags stageFlags;
	VkSampler* pImmutableSamplers;
}
struct VkDescriptorSetLayoutBindingFlagsCreateInfo {
	VkStructureType sType;
	void* pNext;
	uint32_t bindingCount;
	VkDescriptorBindingFlags* pBindingFlags;
}
struct VkDescriptorSetLayoutCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkDescriptorSetLayoutCreateFlags flags;
	uint32_t bindingCount;
	VkDescriptorSetLayoutBinding* pBindings;
}
struct VkDescriptorSetLayoutHostMappingInfoVALVE {
	VkStructureType sType;
	void* pNext;
	size_t descriptorOffset;
	uint32_t descriptorSize;
}
struct VkDescriptorSetLayoutSupport {
	VkStructureType sType;
	void* pNext;
	VkBool32 supported;
}
struct VkDescriptorSetLayout_T {
}
struct VkDescriptorSetVariableDescriptorCountAllocateInfo {
	VkStructureType sType;
	void* pNext;
	uint32_t descriptorSetCount;
	uint32_t* pDescriptorCounts;
}
struct VkDescriptorSetVariableDescriptorCountLayoutSupport {
	VkStructureType sType;
	void* pNext;
	uint32_t maxVariableDescriptorCount;
}
struct VkDescriptorSet_T {
}
struct VkDescriptorUpdateTemplateCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkDescriptorUpdateTemplateCreateFlags flags;
	uint32_t descriptorUpdateEntryCount;
	VkDescriptorUpdateTemplateEntry* pDescriptorUpdateEntries;
	VkDescriptorUpdateTemplateType templateType;
	VkDescriptorSetLayout descriptorSetLayout;
	VkPipelineBindPoint pipelineBindPoint;
	VkPipelineLayout pipelineLayout;
	uint32_t set;
}
struct VkDescriptorUpdateTemplateEntry {
	uint32_t dstBinding;
	uint32_t dstArrayElement;
	uint32_t descriptorCount;
	VkDescriptorType descriptorType;
	size_t offset;
	size_t stride;
}
struct VkDescriptorUpdateTemplate_T {
}
struct VkDeviceAddressBindingCallbackDataEXT {
	VkStructureType sType;
	void* pNext;
	VkDeviceAddressBindingFlagsEXT flags;
	VkDeviceAddress baseAddress;
	VkDeviceSize size;
	VkDeviceAddressBindingTypeEXT bindingType;
}
struct VkDeviceBufferMemoryRequirements {
	VkStructureType sType;
	void* pNext;
	VkBufferCreateInfo* pCreateInfo;
}
struct VkDeviceCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkDeviceCreateFlags flags;
	uint32_t queueCreateInfoCount;
	VkDeviceQueueCreateInfo* pQueueCreateInfos;
	uint32_t enabledLayerCount;
	immutable(char)** ppEnabledLayerNames;
	uint32_t enabledExtensionCount;
	immutable(char)** ppEnabledExtensionNames;
	VkPhysicalDeviceFeatures* pEnabledFeatures;
}
struct VkDeviceDeviceMemoryReportCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkDeviceMemoryReportFlagsEXT flags;
	PFN_vkDeviceMemoryReportCallbackEXT pfnUserCallback;
	void* pUserData;
}
struct VkDeviceDiagnosticsConfigCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	VkDeviceDiagnosticsConfigFlagsNV flags;
}
struct VkDeviceEventInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkDeviceEventTypeEXT deviceEvent;
}
struct VkDeviceFaultAddressInfoEXT {
	VkDeviceFaultAddressTypeEXT addressType;
	VkDeviceAddress reportedAddress;
	VkDeviceSize addressPrecision;
}
struct VkDeviceFaultCountsEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t addressInfoCount;
	uint32_t vendorInfoCount;
	VkDeviceSize vendorBinarySize;
}
struct VkDeviceFaultInfoEXT {
	VkStructureType sType;
	void* pNext;
	char[256U] description;
	VkDeviceFaultAddressInfoEXT* pAddressInfos;
	VkDeviceFaultVendorInfoEXT* pVendorInfos;
	void* pVendorBinaryData;
}
struct VkDeviceFaultVendorBinaryHeaderVersionOneEXT {
	uint32_t headerSize;
	VkDeviceFaultVendorBinaryHeaderVersionEXT headerVersion;
	uint32_t vendorID;
	uint32_t deviceID;
	uint32_t driverVersion;
	uint8_t[16U] pipelineCacheUUID;
	uint32_t applicationNameOffset;
	uint32_t applicationVersion;
	uint32_t engineNameOffset;
	uint32_t engineVersion;
	uint32_t apiVersion;
}
struct VkDeviceFaultVendorInfoEXT {
	char[256U] description;
	uint64_t vendorFaultCode;
	uint64_t vendorFaultData;
}
struct VkDeviceGroupBindSparseInfo {
	VkStructureType sType;
	void* pNext;
	uint32_t resourceDeviceIndex;
	uint32_t memoryDeviceIndex;
}
struct VkDeviceGroupCommandBufferBeginInfo {
	VkStructureType sType;
	void* pNext;
	uint32_t deviceMask;
}
struct VkDeviceGroupDeviceCreateInfo {
	VkStructureType sType;
	void* pNext;
	uint32_t physicalDeviceCount;
	VkPhysicalDevice* pPhysicalDevices;
}
struct VkDeviceGroupPresentCapabilitiesKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t[32U] presentMask;
	VkDeviceGroupPresentModeFlagsKHR modes;
}
struct VkDeviceGroupPresentInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t swapchainCount;
	uint32_t* pDeviceMasks;
	VkDeviceGroupPresentModeFlagBitsKHR mode;
}
struct VkDeviceGroupRenderPassBeginInfo {
	VkStructureType sType;
	void* pNext;
	uint32_t deviceMask;
	uint32_t deviceRenderAreaCount;
	VkRect2D* pDeviceRenderAreas;
}
struct VkDeviceGroupSubmitInfo {
	VkStructureType sType;
	void* pNext;
	uint32_t waitSemaphoreCount;
	uint32_t* pWaitSemaphoreDeviceIndices;
	uint32_t commandBufferCount;
	uint32_t* pCommandBufferDeviceMasks;
	uint32_t signalSemaphoreCount;
	uint32_t* pSignalSemaphoreDeviceIndices;
}
struct VkDeviceGroupSwapchainCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkDeviceGroupPresentModeFlagsKHR modes;
}
struct VkDeviceImageMemoryRequirements {
	VkStructureType sType;
	void* pNext;
	VkImageCreateInfo* pCreateInfo;
	VkImageAspectFlagBits planeAspect;
}
struct VkDeviceImageSubresourceInfo {
	VkStructureType sType;
	void* pNext;
	VkImageCreateInfo* pCreateInfo;
	VkImageSubresource2* pSubresource;
}
struct VkDeviceMemoryOpaqueCaptureAddressInfo {
	VkStructureType sType;
	void* pNext;
	VkDeviceMemory memory;
}
struct VkDeviceMemoryOverallocationCreateInfoAMD {
	VkStructureType sType;
	void* pNext;
	VkMemoryOverallocationBehaviorAMD overallocationBehavior;
}
struct VkDeviceMemoryReportCallbackDataEXT {
	VkStructureType sType;
	void* pNext;
	VkDeviceMemoryReportFlagsEXT flags;
	VkDeviceMemoryReportEventTypeEXT type;
	uint64_t memoryObjectId;
	VkDeviceSize size;
	VkObjectType objectType;
	uint64_t objectHandle;
	uint32_t heapIndex;
}
struct VkDeviceMemory_T {
}
struct VkDevicePipelineBinaryInternalCacheControlKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 disableInternalCache;
}
struct VkDevicePrivateDataCreateInfo {
	VkStructureType sType;
	void* pNext;
	uint32_t privateDataSlotRequestCount;
}
struct VkDeviceQueueCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkDeviceQueueCreateFlags flags;
	uint32_t queueFamilyIndex;
	uint32_t queueCount;
	float* pQueuePriorities;
}
struct VkDeviceQueueGlobalPriorityCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkQueueGlobalPriority globalPriority;
}
struct VkDeviceQueueInfo2 {
	VkStructureType sType;
	void* pNext;
	VkDeviceQueueCreateFlags flags;
	uint32_t queueFamilyIndex;
	uint32_t queueIndex;
}
struct VkDeviceQueueShaderCoreControlCreateInfoARM {
	VkStructureType sType;
	void* pNext;
	uint32_t shaderCoreCount;
}
struct VkDevice_T {
}
struct VkDirectDriverLoadingInfoLUNARG {
	VkStructureType sType;
	void* pNext;
	VkDirectDriverLoadingFlagsLUNARG flags;
	PFN_vkGetInstanceProcAddrLUNARG pfnGetInstanceProcAddr;
}
struct VkDirectDriverLoadingListLUNARG {
	VkStructureType sType;
	void* pNext;
	VkDirectDriverLoadingModeLUNARG mode;
	uint32_t driverCount;
	VkDirectDriverLoadingInfoLUNARG* pDrivers;
}
struct VkDispatchIndirectCommand {
	uint32_t x;
	uint32_t y;
	uint32_t z;
}
struct VkDisplayEventInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkDisplayEventTypeEXT displayEvent;
}
struct VkDisplayKHR_T {
}
struct VkDisplayModeCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkDisplayModeCreateFlagsKHR flags;
	VkDisplayModeParametersKHR parameters;
}
struct VkDisplayModeKHR_T {
}
struct VkDisplayModeParametersKHR {
	VkExtent2D visibleRegion;
	uint32_t refreshRate;
}
struct VkDisplayModeProperties2KHR {
	VkStructureType sType;
	void* pNext;
	VkDisplayModePropertiesKHR displayModeProperties;
}
struct VkDisplayModePropertiesKHR {
	VkDisplayModeKHR displayMode;
	VkDisplayModeParametersKHR parameters;
}
struct VkDisplayModeStereoPropertiesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 hdmi3DSupported;
}
struct VkDisplayNativeHdrSurfaceCapabilitiesAMD {
	VkStructureType sType;
	void* pNext;
	VkBool32 localDimmingSupport;
}
struct VkDisplayPlaneCapabilities2KHR {
	VkStructureType sType;
	void* pNext;
	VkDisplayPlaneCapabilitiesKHR capabilities;
}
struct VkDisplayPlaneCapabilitiesKHR {
	VkDisplayPlaneAlphaFlagsKHR supportedAlpha;
	VkOffset2D minSrcPosition;
	VkOffset2D maxSrcPosition;
	VkExtent2D minSrcExtent;
	VkExtent2D maxSrcExtent;
	VkOffset2D minDstPosition;
	VkOffset2D maxDstPosition;
	VkExtent2D minDstExtent;
	VkExtent2D maxDstExtent;
}
struct VkDisplayPlaneInfo2KHR {
	VkStructureType sType;
	void* pNext;
	VkDisplayModeKHR mode;
	uint32_t planeIndex;
}
struct VkDisplayPlaneProperties2KHR {
	VkStructureType sType;
	void* pNext;
	VkDisplayPlanePropertiesKHR displayPlaneProperties;
}
struct VkDisplayPlanePropertiesKHR {
	VkDisplayKHR currentDisplay;
	uint32_t currentStackIndex;
}
struct VkDisplayPowerInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkDisplayPowerStateEXT powerState;
}
struct VkDisplayPresentInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkRect2D srcRect;
	VkRect2D dstRect;
	VkBool32 persistent;
}
struct VkDisplayProperties2KHR {
	VkStructureType sType;
	void* pNext;
	VkDisplayPropertiesKHR displayProperties;
}
struct VkDisplayPropertiesKHR {
	VkDisplayKHR display;
	immutable(char)* displayName;
	VkExtent2D physicalDimensions;
	VkExtent2D physicalResolution;
	VkSurfaceTransformFlagsKHR supportedTransforms;
	VkBool32 planeReorderPossible;
	VkBool32 persistentContent;
}
struct VkDisplaySurfaceCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkDisplaySurfaceCreateFlagsKHR flags;
	VkDisplayModeKHR displayMode;
	uint32_t planeIndex;
	uint32_t planeStackIndex;
	VkSurfaceTransformFlagBitsKHR transform;
	float globalAlpha;
	VkDisplayPlaneAlphaFlagBitsKHR alphaMode;
	VkExtent2D imageExtent;
}
struct VkDisplaySurfaceStereoCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	VkDisplaySurfaceStereoTypeNV stereoType;
}
struct VkDrawIndexedIndirectCommand {
	uint32_t indexCount;
	uint32_t instanceCount;
	uint32_t firstIndex;
	int32_t vertexOffset;
	uint32_t firstInstance;
}
struct VkDrawIndirectCommand {
	uint32_t vertexCount;
	uint32_t instanceCount;
	uint32_t firstVertex;
	uint32_t firstInstance;
}
struct VkDrawIndirectCountIndirectCommandEXT {
	VkDeviceAddress bufferAddress;
	uint32_t stride;
	uint32_t commandCount;
}
struct VkDrawMeshTasksIndirectCommandEXT {
	uint32_t groupCountX;
	uint32_t groupCountY;
	uint32_t groupCountZ;
}
struct VkDrawMeshTasksIndirectCommandNV {
	uint32_t taskCount;
	uint32_t firstTask;
}
struct VkDrmFormatModifierProperties2EXT {
	uint64_t drmFormatModifier;
	uint32_t drmFormatModifierPlaneCount;
	VkFormatFeatureFlags2 drmFormatModifierTilingFeatures;
}
struct VkDrmFormatModifierPropertiesEXT {
	uint64_t drmFormatModifier;
	uint32_t drmFormatModifierPlaneCount;
	VkFormatFeatureFlags drmFormatModifierTilingFeatures;
}
struct VkDrmFormatModifierPropertiesList2EXT {
	VkStructureType sType;
	void* pNext;
	uint32_t drmFormatModifierCount;
	VkDrmFormatModifierProperties2EXT* pDrmFormatModifierProperties;
}
struct VkDrmFormatModifierPropertiesListEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t drmFormatModifierCount;
	VkDrmFormatModifierPropertiesEXT* pDrmFormatModifierProperties;
}
struct VkEventCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkEventCreateFlags flags;
}
struct VkEvent_T {
}
struct VkExportFenceCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkExternalFenceHandleTypeFlags handleTypes;
}
struct VkExportFenceWin32HandleInfoKHR {
	VkStructureType sType;
	void* pNext;
	SECURITY_ATTRIBUTES* pAttributes;
	DWORD dwAccess;
	LPCWSTR name;
}
struct VkExportMemoryAllocateInfo {
	VkStructureType sType;
	void* pNext;
	VkExternalMemoryHandleTypeFlags handleTypes;
}
struct VkExportMemoryAllocateInfoNV {
	VkStructureType sType;
	void* pNext;
	VkExternalMemoryHandleTypeFlagsNV handleTypes;
}
struct VkExportMemoryWin32HandleInfoKHR {
	VkStructureType sType;
	void* pNext;
	SECURITY_ATTRIBUTES* pAttributes;
	DWORD dwAccess;
	LPCWSTR name;
}
struct VkExportMemoryWin32HandleInfoNV {
	VkStructureType sType;
	void* pNext;
	SECURITY_ATTRIBUTES* pAttributes;
	DWORD dwAccess;
}
struct VkExportSemaphoreCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkExternalSemaphoreHandleTypeFlags handleTypes;
}
struct VkExportSemaphoreWin32HandleInfoKHR {
	VkStructureType sType;
	void* pNext;
	SECURITY_ATTRIBUTES* pAttributes;
	DWORD dwAccess;
	LPCWSTR name;
}
struct VkExtensionProperties {
	char[256U] extensionName;
	uint32_t specVersion;
}
struct VkExtent2D {
	uint32_t width;
	uint32_t height;
}
struct VkExtent3D {
	uint32_t width;
	uint32_t height;
	uint32_t depth;
}
struct VkExternalBufferProperties {
	VkStructureType sType;
	void* pNext;
	VkExternalMemoryProperties externalMemoryProperties;
}
struct VkExternalFenceProperties {
	VkStructureType sType;
	void* pNext;
	VkExternalFenceHandleTypeFlags exportFromImportedHandleTypes;
	VkExternalFenceHandleTypeFlags compatibleHandleTypes;
	VkExternalFenceFeatureFlags externalFenceFeatures;
}
struct VkExternalImageFormatProperties {
	VkStructureType sType;
	void* pNext;
	VkExternalMemoryProperties externalMemoryProperties;
}
struct VkExternalImageFormatPropertiesNV {
	VkImageFormatProperties imageFormatProperties;
	VkExternalMemoryFeatureFlagsNV externalMemoryFeatures;
	VkExternalMemoryHandleTypeFlagsNV exportFromImportedHandleTypes;
	VkExternalMemoryHandleTypeFlagsNV compatibleHandleTypes;
}
struct VkExternalMemoryAcquireUnmodifiedEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 acquireUnmodifiedMemory;
}
struct VkExternalMemoryBufferCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkExternalMemoryHandleTypeFlags handleTypes;
}
struct VkExternalMemoryImageCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkExternalMemoryHandleTypeFlags handleTypes;
}
struct VkExternalMemoryImageCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	VkExternalMemoryHandleTypeFlagsNV handleTypes;
}
struct VkExternalMemoryProperties {
	VkExternalMemoryFeatureFlags externalMemoryFeatures;
	VkExternalMemoryHandleTypeFlags exportFromImportedHandleTypes;
	VkExternalMemoryHandleTypeFlags compatibleHandleTypes;
}
struct VkExternalSemaphoreProperties {
	VkStructureType sType;
	void* pNext;
	VkExternalSemaphoreHandleTypeFlags exportFromImportedHandleTypes;
	VkExternalSemaphoreHandleTypeFlags compatibleHandleTypes;
	VkExternalSemaphoreFeatureFlags externalSemaphoreFeatures;
}
struct VkFenceCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkFenceCreateFlags flags;
}
struct VkFenceGetFdInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkFence fence;
	VkExternalFenceHandleTypeFlagBits handleType;
}
struct VkFenceGetWin32HandleInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkFence fence;
	VkExternalFenceHandleTypeFlagBits handleType;
}
struct VkFence_T {
}
struct VkFilterCubicImageViewImageFormatPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 filterCubic;
	VkBool32 filterCubicMinmax;
}
struct VkFormatProperties {
	VkFormatFeatureFlags linearTilingFeatures;
	VkFormatFeatureFlags optimalTilingFeatures;
	VkFormatFeatureFlags bufferFeatures;
}
struct VkFormatProperties2 {
	VkStructureType sType;
	void* pNext;
	VkFormatProperties formatProperties;
}
struct VkFormatProperties3 {
	VkStructureType sType;
	void* pNext;
	VkFormatFeatureFlags2 linearTilingFeatures;
	VkFormatFeatureFlags2 optimalTilingFeatures;
	VkFormatFeatureFlags2 bufferFeatures;
}
struct VkFragmentShadingRateAttachmentInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkAttachmentReference2* pFragmentShadingRateAttachment;
	VkExtent2D shadingRateAttachmentTexelSize;
}
struct VkFrameBoundaryEXT {
	VkStructureType sType;
	void* pNext;
	VkFrameBoundaryFlagsEXT flags;
	uint64_t frameID;
	uint32_t imageCount;
	VkImage* pImages;
	uint32_t bufferCount;
	VkBuffer* pBuffers;
	uint64_t tagName;
	size_t tagSize;
	void* pTag;
}
struct VkFramebufferAttachmentImageInfo {
	VkStructureType sType;
	void* pNext;
	VkImageCreateFlags flags;
	VkImageUsageFlags usage;
	uint32_t width;
	uint32_t height;
	uint32_t layerCount;
	uint32_t viewFormatCount;
	VkFormat* pViewFormats;
}
struct VkFramebufferAttachmentsCreateInfo {
	VkStructureType sType;
	void* pNext;
	uint32_t attachmentImageInfoCount;
	VkFramebufferAttachmentImageInfo* pAttachmentImageInfos;
}
struct VkFramebufferCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkFramebufferCreateFlags flags;
	VkRenderPass renderPass;
	uint32_t attachmentCount;
	VkImageView* pAttachments;
	uint32_t width;
	uint32_t height;
	uint32_t layers;
}
struct VkFramebufferMixedSamplesCombinationNV {
	VkStructureType sType;
	void* pNext;
	VkCoverageReductionModeNV coverageReductionMode;
	VkSampleCountFlagBits rasterizationSamples;
	VkSampleCountFlags depthStencilSamples;
	VkSampleCountFlags colorSamples;
}
struct VkFramebuffer_T {
}
struct VkGeneratedCommandsInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkShaderStageFlags shaderStages;
	VkIndirectExecutionSetEXT indirectExecutionSet;
	VkIndirectCommandsLayoutEXT indirectCommandsLayout;
	VkDeviceAddress indirectAddress;
	VkDeviceSize indirectAddressSize;
	VkDeviceAddress preprocessAddress;
	VkDeviceSize preprocessSize;
	uint32_t maxSequenceCount;
	VkDeviceAddress sequenceCountAddress;
	uint32_t maxDrawCount;
}
struct VkGeneratedCommandsInfoNV {
	VkStructureType sType;
	void* pNext;
	VkPipelineBindPoint pipelineBindPoint;
	VkPipeline pipeline;
	VkIndirectCommandsLayoutNV indirectCommandsLayout;
	uint32_t streamCount;
	VkIndirectCommandsStreamNV* pStreams;
	uint32_t sequencesCount;
	VkBuffer preprocessBuffer;
	VkDeviceSize preprocessOffset;
	VkDeviceSize preprocessSize;
	VkBuffer sequencesCountBuffer;
	VkDeviceSize sequencesCountOffset;
	VkBuffer sequencesIndexBuffer;
	VkDeviceSize sequencesIndexOffset;
}
struct VkGeneratedCommandsMemoryRequirementsInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkIndirectExecutionSetEXT indirectExecutionSet;
	VkIndirectCommandsLayoutEXT indirectCommandsLayout;
	uint32_t maxSequenceCount;
	uint32_t maxDrawCount;
}
struct VkGeneratedCommandsMemoryRequirementsInfoNV {
	VkStructureType sType;
	void* pNext;
	VkPipelineBindPoint pipelineBindPoint;
	VkPipeline pipeline;
	VkIndirectCommandsLayoutNV indirectCommandsLayout;
	uint32_t maxSequencesCount;
}
struct VkGeneratedCommandsPipelineInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkPipeline pipeline;
}
struct VkGeneratedCommandsShaderInfoEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t shaderCount;
	VkShaderEXT* pShaders;
}
struct VkGeometryAABBNV {
	VkStructureType sType;
	void* pNext;
	VkBuffer aabbData;
	uint32_t numAABBs;
	uint32_t stride;
	VkDeviceSize offset;
}
struct VkGeometryDataNV {
	VkGeometryTrianglesNV triangles;
	VkGeometryAABBNV aabbs;
}
struct VkGeometryNV {
	VkStructureType sType;
	void* pNext;
	VkGeometryTypeKHR geometryType;
	VkGeometryDataNV geometry;
	VkGeometryFlagsKHR flags;
}
struct VkGeometryTrianglesNV {
	VkStructureType sType;
	void* pNext;
	VkBuffer vertexData;
	VkDeviceSize vertexOffset;
	uint32_t vertexCount;
	VkDeviceSize vertexStride;
	VkFormat vertexFormat;
	VkBuffer indexData;
	VkDeviceSize indexOffset;
	uint32_t indexCount;
	VkIndexType indexType;
	VkBuffer transformData;
	VkDeviceSize transformOffset;
}
struct VkGetLatencyMarkerInfoNV {
	VkStructureType sType;
	void* pNext;
	uint32_t timingCount;
	VkLatencyTimingsFrameReportNV* pTimings;
}
struct VkGraphicsPipelineCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkPipelineCreateFlags flags;
	uint32_t stageCount;
	VkPipelineShaderStageCreateInfo* pStages;
	VkPipelineVertexInputStateCreateInfo* pVertexInputState;
	VkPipelineInputAssemblyStateCreateInfo* pInputAssemblyState;
	VkPipelineTessellationStateCreateInfo* pTessellationState;
	VkPipelineViewportStateCreateInfo* pViewportState;
	VkPipelineRasterizationStateCreateInfo* pRasterizationState;
	VkPipelineMultisampleStateCreateInfo* pMultisampleState;
	VkPipelineDepthStencilStateCreateInfo* pDepthStencilState;
	VkPipelineColorBlendStateCreateInfo* pColorBlendState;
	VkPipelineDynamicStateCreateInfo* pDynamicState;
	VkPipelineLayout layout;
	VkRenderPass renderPass;
	uint32_t subpass;
	VkPipeline basePipelineHandle;
	int32_t basePipelineIndex;
}
struct VkGraphicsPipelineLibraryCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkGraphicsPipelineLibraryFlagsEXT flags;
}
struct VkGraphicsPipelineShaderGroupsCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	uint32_t groupCount;
	VkGraphicsShaderGroupCreateInfoNV* pGroups;
	uint32_t pipelineCount;
	VkPipeline* pPipelines;
}
struct VkGraphicsShaderGroupCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	uint32_t stageCount;
	VkPipelineShaderStageCreateInfo* pStages;
	VkPipelineVertexInputStateCreateInfo* pVertexInputState;
	VkPipelineTessellationStateCreateInfo* pTessellationState;
}
struct VkHdrMetadataEXT {
	VkStructureType sType;
	void* pNext;
	VkXYColorEXT displayPrimaryRed;
	VkXYColorEXT displayPrimaryGreen;
	VkXYColorEXT displayPrimaryBlue;
	VkXYColorEXT whitePoint;
	float maxLuminance;
	float minLuminance;
	float maxContentLightLevel;
	float maxFrameAverageLightLevel;
}
struct VkHdrVividDynamicMetadataHUAWEI {
	VkStructureType sType;
	void* pNext;
	size_t dynamicMetadataSize;
	void* pDynamicMetadata;
}
struct VkHeadlessSurfaceCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkHeadlessSurfaceCreateFlagsEXT flags;
}
struct VkHostImageCopyDevicePerformanceQuery {
	VkStructureType sType;
	void* pNext;
	VkBool32 optimalDeviceAccess;
	VkBool32 identicalMemoryLayout;
}
struct VkHostImageLayoutTransitionInfo {
	VkStructureType sType;
	void* pNext;
	VkImage image;
	VkImageLayout oldLayout;
	VkImageLayout newLayout;
	VkImageSubresourceRange subresourceRange;
}
struct VkImageAlignmentControlCreateInfoMESA {
	VkStructureType sType;
	void* pNext;
	uint32_t maximumRequestedAlignment;
}
struct VkImageBlit {
	VkImageSubresourceLayers srcSubresource;
	VkOffset3D[2] srcOffsets;
	VkImageSubresourceLayers dstSubresource;
	VkOffset3D[2] dstOffsets;
}
struct VkImageBlit2 {
	VkStructureType sType;
	void* pNext;
	VkImageSubresourceLayers srcSubresource;
	VkOffset3D[2] srcOffsets;
	VkImageSubresourceLayers dstSubresource;
	VkOffset3D[2] dstOffsets;
}
struct VkImageCaptureDescriptorDataInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkImage image;
}
struct VkImageCompressionControlEXT {
	VkStructureType sType;
	void* pNext;
	VkImageCompressionFlagsEXT flags;
	uint32_t compressionControlPlaneCount;
	VkImageCompressionFixedRateFlagsEXT* pFixedRateFlags;
}
struct VkImageCompressionPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	VkImageCompressionFlagsEXT imageCompressionFlags;
	VkImageCompressionFixedRateFlagsEXT imageCompressionFixedRateFlags;
}
struct VkImageCopy {
	VkImageSubresourceLayers srcSubresource;
	VkOffset3D srcOffset;
	VkImageSubresourceLayers dstSubresource;
	VkOffset3D dstOffset;
	VkExtent3D extent;
}
struct VkImageCopy2 {
	VkStructureType sType;
	void* pNext;
	VkImageSubresourceLayers srcSubresource;
	VkOffset3D srcOffset;
	VkImageSubresourceLayers dstSubresource;
	VkOffset3D dstOffset;
	VkExtent3D extent;
}
struct VkImageCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkImageCreateFlags flags;
	VkImageType imageType;
	VkFormat format;
	VkExtent3D extent;
	uint32_t mipLevels;
	uint32_t arrayLayers;
	VkSampleCountFlagBits samples;
	VkImageTiling tiling;
	VkImageUsageFlags usage;
	VkSharingMode sharingMode;
	uint32_t queueFamilyIndexCount;
	uint32_t* pQueueFamilyIndices;
	VkImageLayout initialLayout;
}
struct VkImageDrmFormatModifierExplicitCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	uint64_t drmFormatModifier;
	uint32_t drmFormatModifierPlaneCount;
	VkSubresourceLayout* pPlaneLayouts;
}
struct VkImageDrmFormatModifierListCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t drmFormatModifierCount;
	uint64_t* pDrmFormatModifiers;
}
struct VkImageDrmFormatModifierPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	uint64_t drmFormatModifier;
}
struct VkImageFormatListCreateInfo {
	VkStructureType sType;
	void* pNext;
	uint32_t viewFormatCount;
	VkFormat* pViewFormats;
}
struct VkImageFormatProperties {
	VkExtent3D maxExtent;
	uint32_t maxMipLevels;
	uint32_t maxArrayLayers;
	VkSampleCountFlags sampleCounts;
	VkDeviceSize maxResourceSize;
}
struct VkImageFormatProperties2 {
	VkStructureType sType;
	void* pNext;
	VkImageFormatProperties imageFormatProperties;
}
struct VkImageMemoryBarrier {
	VkStructureType sType;
	void* pNext;
	VkAccessFlags srcAccessMask;
	VkAccessFlags dstAccessMask;
	VkImageLayout oldLayout;
	VkImageLayout newLayout;
	uint32_t srcQueueFamilyIndex;
	uint32_t dstQueueFamilyIndex;
	VkImage image;
	VkImageSubresourceRange subresourceRange;
}
struct VkImageMemoryBarrier2 {
	VkStructureType sType;
	void* pNext;
	VkPipelineStageFlags2 srcStageMask;
	VkAccessFlags2 srcAccessMask;
	VkPipelineStageFlags2 dstStageMask;
	VkAccessFlags2 dstAccessMask;
	VkImageLayout oldLayout;
	VkImageLayout newLayout;
	uint32_t srcQueueFamilyIndex;
	uint32_t dstQueueFamilyIndex;
	VkImage image;
	VkImageSubresourceRange subresourceRange;
}
struct VkImageMemoryRequirementsInfo2 {
	VkStructureType sType;
	void* pNext;
	VkImage image;
}
struct VkImagePlaneMemoryRequirementsInfo {
	VkStructureType sType;
	void* pNext;
	VkImageAspectFlagBits planeAspect;
}
struct VkImageResolve {
	VkImageSubresourceLayers srcSubresource;
	VkOffset3D srcOffset;
	VkImageSubresourceLayers dstSubresource;
	VkOffset3D dstOffset;
	VkExtent3D extent;
}
struct VkImageResolve2 {
	VkStructureType sType;
	void* pNext;
	VkImageSubresourceLayers srcSubresource;
	VkOffset3D srcOffset;
	VkImageSubresourceLayers dstSubresource;
	VkOffset3D dstOffset;
	VkExtent3D extent;
}
struct VkImageSparseMemoryRequirementsInfo2 {
	VkStructureType sType;
	void* pNext;
	VkImage image;
}
struct VkImageStencilUsageCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkImageUsageFlags stencilUsage;
}
struct VkImageSubresource {
	VkImageAspectFlags aspectMask;
	uint32_t mipLevel;
	uint32_t arrayLayer;
}
struct VkImageSubresource2 {
	VkStructureType sType;
	void* pNext;
	VkImageSubresource imageSubresource;
}
struct VkImageSubresourceLayers {
	VkImageAspectFlags aspectMask;
	uint32_t mipLevel;
	uint32_t baseArrayLayer;
	uint32_t layerCount;
}
struct VkImageSubresourceRange {
	VkImageAspectFlags aspectMask;
	uint32_t baseMipLevel;
	uint32_t levelCount;
	uint32_t baseArrayLayer;
	uint32_t layerCount;
}
struct VkImageSwapchainCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkSwapchainKHR swapchain;
}
struct VkImageToMemoryCopy {
	VkStructureType sType;
	void* pNext;
	void* pHostPointer;
	uint32_t memoryRowLength;
	uint32_t memoryImageHeight;
	VkImageSubresourceLayers imageSubresource;
	VkOffset3D imageOffset;
	VkExtent3D imageExtent;
}
struct VkImageViewASTCDecodeModeEXT {
	VkStructureType sType;
	void* pNext;
	VkFormat decodeMode;
}
struct VkImageViewAddressPropertiesNVX {
	VkStructureType sType;
	void* pNext;
	VkDeviceAddress deviceAddress;
	VkDeviceSize size;
}
struct VkImageViewCaptureDescriptorDataInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkImageView imageView;
}
struct VkImageViewCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkImageViewCreateFlags flags;
	VkImage image;
	VkImageViewType viewType;
	VkFormat format;
	VkComponentMapping components;
	VkImageSubresourceRange subresourceRange;
}
struct VkImageViewHandleInfoNVX {
	VkStructureType sType;
	void* pNext;
	VkImageView imageView;
	VkDescriptorType descriptorType;
	VkSampler sampler;
}
struct VkImageViewMinLodCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	float minLod;
}
struct VkImageViewSampleWeightCreateInfoQCOM {
	VkStructureType sType;
	void* pNext;
	VkOffset2D filterCenter;
	VkExtent2D filterSize;
	uint32_t numPhases;
}
struct VkImageViewSlicedCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t sliceOffset;
	uint32_t sliceCount;
}
struct VkImageViewUsageCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkImageUsageFlags usage;
}
struct VkImageView_T {
}
struct VkImage_T {
}
struct VkImportFenceFdInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkFence fence;
	VkFenceImportFlags flags;
	VkExternalFenceHandleTypeFlagBits handleType;
	int fd;
}
struct VkImportFenceWin32HandleInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkFence fence;
	VkFenceImportFlags flags;
	VkExternalFenceHandleTypeFlagBits handleType;
	HANDLE handle;
	LPCWSTR name;
}
struct VkImportMemoryFdInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkExternalMemoryHandleTypeFlagBits handleType;
	int fd;
}
struct VkImportMemoryHostPointerInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkExternalMemoryHandleTypeFlagBits handleType;
	void* pHostPointer;
}
struct VkImportMemoryWin32HandleInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkExternalMemoryHandleTypeFlagBits handleType;
	HANDLE handle;
	LPCWSTR name;
}
struct VkImportMemoryWin32HandleInfoNV {
	VkStructureType sType;
	void* pNext;
	VkExternalMemoryHandleTypeFlagsNV handleType;
	HANDLE handle;
}
struct VkImportSemaphoreFdInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkSemaphore semaphore;
	VkSemaphoreImportFlags flags;
	VkExternalSemaphoreHandleTypeFlagBits handleType;
	int fd;
}
struct VkImportSemaphoreWin32HandleInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkSemaphore semaphore;
	VkSemaphoreImportFlags flags;
	VkExternalSemaphoreHandleTypeFlagBits handleType;
	HANDLE handle;
	LPCWSTR name;
}
struct VkIndirectCommandsExecutionSetTokenEXT {
	VkIndirectExecutionSetInfoTypeEXT type;
	VkShaderStageFlags shaderStages;
}
struct VkIndirectCommandsIndexBufferTokenEXT {
	VkIndirectCommandsInputModeFlagBitsEXT mode;
}
struct VkIndirectCommandsLayoutCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkIndirectCommandsLayoutUsageFlagsEXT flags;
	VkShaderStageFlags shaderStages;
	uint32_t indirectStride;
	VkPipelineLayout pipelineLayout;
	uint32_t tokenCount;
	VkIndirectCommandsLayoutTokenEXT* pTokens;
}
struct VkIndirectCommandsLayoutCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	VkIndirectCommandsLayoutUsageFlagsNV flags;
	VkPipelineBindPoint pipelineBindPoint;
	uint32_t tokenCount;
	VkIndirectCommandsLayoutTokenNV* pTokens;
	uint32_t streamCount;
	uint32_t* pStreamStrides;
}
struct VkIndirectCommandsLayoutEXT_T {
}
struct VkIndirectCommandsLayoutNV_T {
}
struct VkIndirectCommandsLayoutTokenEXT {
	VkStructureType sType;
	void* pNext;
	VkIndirectCommandsTokenTypeEXT type;
	VkIndirectCommandsTokenDataEXT data;
	uint32_t offset;
}
struct VkIndirectCommandsLayoutTokenNV {
	VkStructureType sType;
	void* pNext;
	VkIndirectCommandsTokenTypeNV tokenType;
	uint32_t stream;
	uint32_t offset;
	uint32_t vertexBindingUnit;
	VkBool32 vertexDynamicStride;
	VkPipelineLayout pushconstantPipelineLayout;
	VkShaderStageFlags pushconstantShaderStageFlags;
	uint32_t pushconstantOffset;
	uint32_t pushconstantSize;
	VkIndirectStateFlagsNV indirectStateFlags;
	uint32_t indexTypeCount;
	VkIndexType* pIndexTypes;
	uint32_t* pIndexTypeValues;
}
struct VkIndirectCommandsPushConstantTokenEXT {
	VkPushConstantRange updateRange;
}
struct VkIndirectCommandsStreamNV {
	VkBuffer buffer;
	VkDeviceSize offset;
}
struct VkIndirectCommandsVertexBufferTokenEXT {
	uint32_t vertexBindingUnit;
}
struct VkIndirectExecutionSetCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkIndirectExecutionSetInfoTypeEXT type;
	VkIndirectExecutionSetInfoEXT info;
}
struct VkIndirectExecutionSetEXT_T {
}
struct VkIndirectExecutionSetPipelineInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkPipeline initialPipeline;
	uint32_t maxPipelineCount;
}
struct VkIndirectExecutionSetShaderInfoEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t shaderCount;
	VkShaderEXT* pInitialShaders;
	VkIndirectExecutionSetShaderLayoutInfoEXT* pSetLayoutInfos;
	uint32_t maxShaderCount;
	uint32_t pushConstantRangeCount;
	VkPushConstantRange* pPushConstantRanges;
}
struct VkIndirectExecutionSetShaderLayoutInfoEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t setLayoutCount;
	VkDescriptorSetLayout* pSetLayouts;
}
struct VkInitializePerformanceApiInfoINTEL {
	VkStructureType sType;
	void* pNext;
	void* pUserData;
}
struct VkInputAttachmentAspectReference {
	uint32_t subpass;
	uint32_t inputAttachmentIndex;
	VkImageAspectFlags aspectMask;
}
struct VkInstanceCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkInstanceCreateFlags flags;
	VkApplicationInfo* pApplicationInfo;
	uint32_t enabledLayerCount;
	immutable(char)** ppEnabledLayerNames;
	uint32_t enabledExtensionCount;
	immutable(char)** ppEnabledExtensionNames;
}
struct VkInstance_T {
}
struct VkLatencySleepInfoNV {
	VkStructureType sType;
	void* pNext;
	VkSemaphore signalSemaphore;
	uint64_t value;
}
struct VkLatencySleepModeInfoNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 lowLatencyMode;
	VkBool32 lowLatencyBoost;
	uint32_t minimumIntervalUs;
}
struct VkLatencySubmissionPresentIdNV {
	VkStructureType sType;
	void* pNext;
	uint64_t presentID;
}
struct VkLatencySurfaceCapabilitiesNV {
	VkStructureType sType;
	void* pNext;
	uint32_t presentModeCount;
	VkPresentModeKHR* pPresentModes;
}
struct VkLatencyTimingsFrameReportNV {
	VkStructureType sType;
	void* pNext;
	uint64_t presentID;
	uint64_t inputSampleTimeUs;
	uint64_t simStartTimeUs;
	uint64_t simEndTimeUs;
	uint64_t renderSubmitStartTimeUs;
	uint64_t renderSubmitEndTimeUs;
	uint64_t presentStartTimeUs;
	uint64_t presentEndTimeUs;
	uint64_t driverStartTimeUs;
	uint64_t driverEndTimeUs;
	uint64_t osRenderQueueStartTimeUs;
	uint64_t osRenderQueueEndTimeUs;
	uint64_t gpuRenderStartTimeUs;
	uint64_t gpuRenderEndTimeUs;
}
struct VkLayerProperties {
	char[256U] layerName;
	uint32_t specVersion;
	uint32_t implementationVersion;
	char[256U] description;
}
struct VkLayerSettingEXT {
	immutable(char)* pLayerName;
	immutable(char)* pSettingName;
	VkLayerSettingTypeEXT type;
	uint32_t valueCount;
	void* pValues;
}
struct VkLayerSettingsCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t settingCount;
	VkLayerSettingEXT* pSettings;
}
struct VkMappedMemoryRange {
	VkStructureType sType;
	void* pNext;
	VkDeviceMemory memory;
	VkDeviceSize offset;
	VkDeviceSize size;
}
struct VkMemoryAllocateFlagsInfo {
	VkStructureType sType;
	void* pNext;
	VkMemoryAllocateFlags flags;
	uint32_t deviceMask;
}
struct VkMemoryAllocateInfo {
	VkStructureType sType;
	void* pNext;
	VkDeviceSize allocationSize;
	uint32_t memoryTypeIndex;
}
struct VkMemoryBarrier {
	VkStructureType sType;
	void* pNext;
	VkAccessFlags srcAccessMask;
	VkAccessFlags dstAccessMask;
}
struct VkMemoryBarrier2 {
	VkStructureType sType;
	void* pNext;
	VkPipelineStageFlags2 srcStageMask;
	VkAccessFlags2 srcAccessMask;
	VkPipelineStageFlags2 dstStageMask;
	VkAccessFlags2 dstAccessMask;
}
struct VkMemoryBarrierAccessFlags3KHR {
	VkStructureType sType;
	void* pNext;
	VkAccessFlags3KHR srcAccessMask3;
	VkAccessFlags3KHR dstAccessMask3;
}
struct VkMemoryDedicatedAllocateInfo {
	VkStructureType sType;
	void* pNext;
	VkImage image;
	VkBuffer buffer;
}
struct VkMemoryDedicatedRequirements {
	VkStructureType sType;
	void* pNext;
	VkBool32 prefersDedicatedAllocation;
	VkBool32 requiresDedicatedAllocation;
}
struct VkMemoryFdPropertiesKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t memoryTypeBits;
}
struct VkMemoryGetFdInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkDeviceMemory memory;
	VkExternalMemoryHandleTypeFlagBits handleType;
}
struct VkMemoryGetRemoteAddressInfoNV {
	VkStructureType sType;
	void* pNext;
	VkDeviceMemory memory;
	VkExternalMemoryHandleTypeFlagBits handleType;
}
struct VkMemoryGetWin32HandleInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkDeviceMemory memory;
	VkExternalMemoryHandleTypeFlagBits handleType;
}
struct VkMemoryHeap {
	VkDeviceSize size;
	VkMemoryHeapFlags flags;
}
struct VkMemoryHostPointerPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t memoryTypeBits;
}
struct VkMemoryMapInfo {
	VkStructureType sType;
	void* pNext;
	VkMemoryMapFlags flags;
	VkDeviceMemory memory;
	VkDeviceSize offset;
	VkDeviceSize size;
}
struct VkMemoryMapPlacedInfoEXT {
	VkStructureType sType;
	void* pNext;
	void* pPlacedAddress;
}
struct VkMemoryOpaqueCaptureAddressAllocateInfo {
	VkStructureType sType;
	void* pNext;
	uint64_t opaqueCaptureAddress;
}
struct VkMemoryPriorityAllocateInfoEXT {
	VkStructureType sType;
	void* pNext;
	float priority;
}
struct VkMemoryRequirements {
	VkDeviceSize size;
	VkDeviceSize alignment;
	uint32_t memoryTypeBits;
}
struct VkMemoryRequirements2 {
	VkStructureType sType;
	void* pNext;
	VkMemoryRequirements memoryRequirements;
}
struct VkMemoryToImageCopy {
	VkStructureType sType;
	void* pNext;
	void* pHostPointer;
	uint32_t memoryRowLength;
	uint32_t memoryImageHeight;
	VkImageSubresourceLayers imageSubresource;
	VkOffset3D imageOffset;
	VkExtent3D imageExtent;
}
struct VkMemoryType {
	VkMemoryPropertyFlags propertyFlags;
	uint32_t heapIndex;
}
struct VkMemoryUnmapInfo {
	VkStructureType sType;
	void* pNext;
	VkMemoryUnmapFlags flags;
	VkDeviceMemory memory;
}
struct VkMemoryWin32HandlePropertiesKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t memoryTypeBits;
}
struct VkMicromapBuildInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkMicromapTypeEXT type;
	VkBuildMicromapFlagsEXT flags;
	VkBuildMicromapModeEXT mode;
	VkMicromapEXT dstMicromap;
	uint32_t usageCountsCount;
	VkMicromapUsageEXT* pUsageCounts;
	VkMicromapUsageEXT** ppUsageCounts;
	VkDeviceOrHostAddressConstKHR data;
	VkDeviceOrHostAddressKHR scratchData;
	VkDeviceOrHostAddressConstKHR triangleArray;
	VkDeviceSize triangleArrayStride;
}
struct VkMicromapBuildSizesInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkDeviceSize micromapSize;
	VkDeviceSize buildScratchSize;
	VkBool32 discardable;
}
struct VkMicromapCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkMicromapCreateFlagsEXT createFlags;
	VkBuffer buffer;
	VkDeviceSize offset;
	VkDeviceSize size;
	VkMicromapTypeEXT type;
	VkDeviceAddress deviceAddress;
}
struct VkMicromapEXT_T {
}
struct VkMicromapTriangleEXT {
	uint32_t dataOffset;
	uint16_t subdivisionLevel;
	uint16_t format;
}
struct VkMicromapUsageEXT {
	uint32_t count;
	uint32_t subdivisionLevel;
	uint32_t format;
}
struct VkMicromapVersionInfoEXT {
	VkStructureType sType;
	void* pNext;
	uint8_t* pVersionData;
}
struct VkMultiDrawIndexedInfoEXT {
	uint32_t firstIndex;
	uint32_t indexCount;
	int32_t vertexOffset;
}
struct VkMultiDrawInfoEXT {
	uint32_t firstVertex;
	uint32_t vertexCount;
}
struct VkMultisamplePropertiesEXT {
	VkStructureType sType;
	void* pNext;
	VkExtent2D maxSampleLocationGridSize;
}
struct VkMultisampledRenderToSingleSampledInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 multisampledRenderToSingleSampledEnable;
	VkSampleCountFlagBits rasterizationSamples;
}
struct VkMultiviewPerViewAttributesInfoNVX {
	VkStructureType sType;
	void* pNext;
	VkBool32 perViewAttributes;
	VkBool32 perViewAttributesPositionXOnly;
}
struct VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM {
	VkStructureType sType;
	void* pNext;
	uint32_t perViewRenderAreaCount;
	VkRect2D* pPerViewRenderAreas;
}
struct VkMutableDescriptorTypeCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t mutableDescriptorTypeListCount;
	VkMutableDescriptorTypeListEXT* pMutableDescriptorTypeLists;
}
struct VkMutableDescriptorTypeListEXT {
	uint32_t descriptorTypeCount;
	VkDescriptorType* pDescriptorTypes;
}
struct VkOffset2D {
	int32_t x;
	int32_t y;
}
struct VkOffset3D {
	int32_t x;
	int32_t y;
	int32_t z;
}
struct VkOpaqueCaptureDescriptorDataCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	void* opaqueCaptureDescriptorData;
}
struct VkOpticalFlowExecuteInfoNV {
	VkStructureType sType;
	void* pNext;
	VkOpticalFlowExecuteFlagsNV flags;
	uint32_t regionCount;
	VkRect2D* pRegions;
}
struct VkOpticalFlowImageFormatInfoNV {
	VkStructureType sType;
	void* pNext;
	VkOpticalFlowUsageFlagsNV usage;
}
struct VkOpticalFlowImageFormatPropertiesNV {
	VkStructureType sType;
	void* pNext;
	VkFormat format;
}
struct VkOpticalFlowSessionCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	uint32_t width;
	uint32_t height;
	VkFormat imageFormat;
	VkFormat flowVectorFormat;
	VkFormat costFormat;
	VkOpticalFlowGridSizeFlagsNV outputGridSize;
	VkOpticalFlowGridSizeFlagsNV hintGridSize;
	VkOpticalFlowPerformanceLevelNV performanceLevel;
	VkOpticalFlowSessionCreateFlagsNV flags;
}
struct VkOpticalFlowSessionCreatePrivateDataInfoNV {
	VkStructureType sType;
	void* pNext;
	uint32_t id;
	uint32_t size;
	void* pPrivateData;
}
struct VkOpticalFlowSessionNV_T {
}
struct VkOutOfBandQueueTypeInfoNV {
	VkStructureType sType;
	void* pNext;
	VkOutOfBandQueueTypeNV queueType;
}
struct VkPartitionedAccelerationStructureFlagsNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 enablePartitionTranslation;
}
struct VkPartitionedAccelerationStructureInstancesInputNV {
	VkStructureType sType;
	void* pNext;
	VkBuildAccelerationStructureFlagsKHR flags;
	uint32_t instanceCount;
	uint32_t maxInstancePerPartitionCount;
	uint32_t partitionCount;
	uint32_t maxInstanceInGlobalPartitionCount;
}
struct VkPartitionedAccelerationStructureUpdateInstanceDataNV {
	uint32_t instanceIndex;
	uint32_t instanceContributionToHitGroupIndex;
	VkDeviceAddress accelerationStructure;
}
struct VkPartitionedAccelerationStructureWriteInstanceDataNV {
	VkTransformMatrixKHR transform;
	float[6] explicitAABB;
	uint32_t instanceID;
	uint32_t instanceMask;
	uint32_t instanceContributionToHitGroupIndex;
	VkPartitionedAccelerationStructureInstanceFlagsNV instanceFlags;
	uint32_t instanceIndex;
	uint32_t partitionIndex;
	VkDeviceAddress accelerationStructure;
}
struct VkPartitionedAccelerationStructureWritePartitionTranslationDataNV {
	uint32_t partitionIndex;
	float[3] partitionTranslation;
}
struct VkPastPresentationTimingGOOGLE {
	uint32_t presentID;
	uint64_t desiredPresentTime;
	uint64_t actualPresentTime;
	uint64_t earliestPresentTime;
	uint64_t presentMargin;
}
struct VkPerformanceConfigurationAcquireInfoINTEL {
	VkStructureType sType;
	void* pNext;
	VkPerformanceConfigurationTypeINTEL type;
}
struct VkPerformanceConfigurationINTEL_T {
}
struct VkPerformanceCounterDescriptionKHR {
	VkStructureType sType;
	void* pNext;
	VkPerformanceCounterDescriptionFlagsKHR flags;
	char[256U] name;
	char[256U] category;
	char[256U] description;
}
struct VkPerformanceCounterKHR {
	VkStructureType sType;
	void* pNext;
	VkPerformanceCounterUnitKHR unit;
	VkPerformanceCounterScopeKHR scope_;
	VkPerformanceCounterStorageKHR storage;
	uint8_t[16U] uuid;
}
struct VkPerformanceMarkerInfoINTEL {
	VkStructureType sType;
	void* pNext;
	uint64_t marker;
}
struct VkPerformanceOverrideInfoINTEL {
	VkStructureType sType;
	void* pNext;
	VkPerformanceOverrideTypeINTEL type;
	VkBool32 enable;
	uint64_t parameter;
}
struct VkPerformanceQuerySubmitInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t counterPassIndex;
}
struct VkPerformanceStreamMarkerInfoINTEL {
	VkStructureType sType;
	void* pNext;
	uint32_t marker;
}
struct VkPerformanceValueINTEL {
	VkPerformanceValueTypeINTEL type;
	VkPerformanceValueDataINTEL data;
}
struct VkPhysicalDevice16BitStorageFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 storageBuffer16BitAccess;
	VkBool32 uniformAndStorageBuffer16BitAccess;
	VkBool32 storagePushConstant16;
	VkBool32 storageInputOutput16;
}
struct VkPhysicalDevice4444FormatsFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 formatA4R4G4B4;
	VkBool32 formatA4B4G4R4;
}
struct VkPhysicalDevice8BitStorageFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 storageBuffer8BitAccess;
	VkBool32 uniformAndStorageBuffer8BitAccess;
	VkBool32 storagePushConstant8;
}
struct VkPhysicalDeviceASTCDecodeFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 decodeModeSharedExponent;
}
struct VkPhysicalDeviceAccelerationStructureFeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 accelerationStructure;
	VkBool32 accelerationStructureCaptureReplay;
	VkBool32 accelerationStructureIndirectBuild;
	VkBool32 accelerationStructureHostCommands;
	VkBool32 descriptorBindingAccelerationStructureUpdateAfterBind;
}
struct VkPhysicalDeviceAccelerationStructurePropertiesKHR {
	VkStructureType sType;
	void* pNext;
	uint64_t maxGeometryCount;
	uint64_t maxInstanceCount;
	uint64_t maxPrimitiveCount;
	uint32_t maxPerStageDescriptorAccelerationStructures;
	uint32_t maxPerStageDescriptorUpdateAfterBindAccelerationStructures;
	uint32_t maxDescriptorSetAccelerationStructures;
	uint32_t maxDescriptorSetUpdateAfterBindAccelerationStructures;
	uint32_t minAccelerationStructureScratchOffsetAlignment;
}
struct VkPhysicalDeviceAddressBindingReportFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 reportAddressBinding;
}
struct VkPhysicalDeviceAmigoProfilingFeaturesSEC {
	VkStructureType sType;
	void* pNext;
	VkBool32 amigoProfiling;
}
struct VkPhysicalDeviceAntiLagFeaturesAMD {
	VkStructureType sType;
	void* pNext;
	VkBool32 antiLag;
}
struct VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 attachmentFeedbackLoopDynamicState;
}
struct VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 attachmentFeedbackLoopLayout;
}
struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 advancedBlendCoherentOperations;
}
struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t advancedBlendMaxColorAttachments;
	VkBool32 advancedBlendIndependentBlend;
	VkBool32 advancedBlendNonPremultipliedSrcColor;
	VkBool32 advancedBlendNonPremultipliedDstColor;
	VkBool32 advancedBlendCorrelatedOverlap;
	VkBool32 advancedBlendAllOperations;
}
struct VkPhysicalDeviceBorderColorSwizzleFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 borderColorSwizzle;
	VkBool32 borderColorSwizzleFromImage;
}
struct VkPhysicalDeviceBufferDeviceAddressFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 bufferDeviceAddress;
	VkBool32 bufferDeviceAddressCaptureReplay;
	VkBool32 bufferDeviceAddressMultiDevice;
}
struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 bufferDeviceAddress;
	VkBool32 bufferDeviceAddressCaptureReplay;
	VkBool32 bufferDeviceAddressMultiDevice;
}
struct VkPhysicalDeviceClusterAccelerationStructureFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 clusterAccelerationStructure;
}
struct VkPhysicalDeviceClusterAccelerationStructurePropertiesNV {
	VkStructureType sType;
	void* pNext;
	uint32_t maxVerticesPerCluster;
	uint32_t maxTrianglesPerCluster;
	uint32_t clusterScratchByteAlignment;
	uint32_t clusterByteAlignment;
	uint32_t clusterTemplateByteAlignment;
	uint32_t clusterBottomLevelByteAlignment;
	uint32_t clusterTemplateBoundsByteAlignment;
	uint32_t maxClusterGeometryIndex;
}
struct VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI {
	VkStructureType sType;
	void* pNext;
	VkBool32 clustercullingShader;
	VkBool32 multiviewClusterCullingShader;
}
struct VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI {
	VkStructureType sType;
	void* pNext;
	uint32_t[3] maxWorkGroupCount;
	uint32_t[3] maxWorkGroupSize;
	uint32_t maxOutputClusterCount;
	VkDeviceSize indirectBufferOffsetAlignment;
}
struct VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI {
	VkStructureType sType;
	void* pNext;
	VkBool32 clusterShadingRate;
}
struct VkPhysicalDeviceCoherentMemoryFeaturesAMD {
	VkStructureType sType;
	void* pNext;
	VkBool32 deviceCoherentMemory;
}
struct VkPhysicalDeviceColorWriteEnableFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 colorWriteEnable;
}
struct VkPhysicalDeviceCommandBufferInheritanceFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 commandBufferInheritance;
}
struct VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 computeDerivativeGroupQuads;
	VkBool32 computeDerivativeGroupLinear;
}
struct VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 meshAndTaskShaderDerivatives;
}
struct VkPhysicalDeviceConditionalRenderingFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 conditionalRendering;
	VkBool32 inheritedConditionalRendering;
}
struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	float primitiveOverestimationSize;
	float maxExtraPrimitiveOverestimationSize;
	float extraPrimitiveOverestimationSizeGranularity;
	VkBool32 primitiveUnderestimation;
	VkBool32 conservativePointAndLineRasterization;
	VkBool32 degenerateTrianglesRasterized;
	VkBool32 degenerateLinesRasterized;
	VkBool32 fullyCoveredFragmentShaderInputVariable;
	VkBool32 conservativeRasterizationPostDepthCoverage;
}
struct VkPhysicalDeviceCooperativeMatrix2FeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 cooperativeMatrixWorkgroupScope;
	VkBool32 cooperativeMatrixFlexibleDimensions;
	VkBool32 cooperativeMatrixReductions;
	VkBool32 cooperativeMatrixConversions;
	VkBool32 cooperativeMatrixPerElementOperations;
	VkBool32 cooperativeMatrixTensorAddressing;
	VkBool32 cooperativeMatrixBlockLoads;
}
struct VkPhysicalDeviceCooperativeMatrix2PropertiesNV {
	VkStructureType sType;
	void* pNext;
	uint32_t cooperativeMatrixWorkgroupScopeMaxWorkgroupSize;
	uint32_t cooperativeMatrixFlexibleDimensionsMaxDimension;
	uint32_t cooperativeMatrixWorkgroupScopeReservedSharedMemory;
}
struct VkPhysicalDeviceCooperativeMatrixFeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 cooperativeMatrix;
	VkBool32 cooperativeMatrixRobustBufferAccess;
}
struct VkPhysicalDeviceCooperativeMatrixFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 cooperativeMatrix;
	VkBool32 cooperativeMatrixRobustBufferAccess;
}
struct VkPhysicalDeviceCooperativeMatrixPropertiesKHR {
	VkStructureType sType;
	void* pNext;
	VkShaderStageFlags cooperativeMatrixSupportedStages;
}
struct VkPhysicalDeviceCooperativeMatrixPropertiesNV {
	VkStructureType sType;
	void* pNext;
	VkShaderStageFlags cooperativeMatrixSupportedStages;
}
struct VkPhysicalDeviceCooperativeVectorFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 cooperativeVector;
	VkBool32 cooperativeVectorTraining;
}
struct VkPhysicalDeviceCooperativeVectorPropertiesNV {
	VkStructureType sType;
	void* pNext;
	VkShaderStageFlags cooperativeVectorSupportedStages;
	VkBool32 cooperativeVectorTrainingFloat16Accumulation;
	VkBool32 cooperativeVectorTrainingFloat32Accumulation;
	uint32_t maxCooperativeVectorComponents;
}
struct VkPhysicalDeviceCopyMemoryIndirectFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 indirectCopy;
}
struct VkPhysicalDeviceCopyMemoryIndirectPropertiesNV {
	VkStructureType sType;
	void* pNext;
	VkQueueFlags supportedQueues;
}
struct VkPhysicalDeviceCornerSampledImageFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 cornerSampledImage;
}
struct VkPhysicalDeviceCoverageReductionModeFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 coverageReductionMode;
}
struct VkPhysicalDeviceCubicClampFeaturesQCOM {
	VkStructureType sType;
	void* pNext;
	VkBool32 cubicRangeClamp;
}
struct VkPhysicalDeviceCubicWeightsFeaturesQCOM {
	VkStructureType sType;
	void* pNext;
	VkBool32 selectableCubicWeights;
}
struct VkPhysicalDeviceCudaKernelLaunchFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 cudaKernelLaunchFeatures;
}
struct VkPhysicalDeviceCudaKernelLaunchPropertiesNV {
	VkStructureType sType;
	void* pNext;
	uint32_t computeCapabilityMinor;
	uint32_t computeCapabilityMajor;
}
struct VkPhysicalDeviceCustomBorderColorFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 customBorderColors;
	VkBool32 customBorderColorWithoutFormat;
}
struct VkPhysicalDeviceCustomBorderColorPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t maxCustomBorderColorSamplers;
}
struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 dedicatedAllocationImageAliasing;
}
struct VkPhysicalDeviceDepthBiasControlFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 depthBiasControl;
	VkBool32 leastRepresentableValueForceUnormRepresentation;
	VkBool32 floatRepresentation;
	VkBool32 depthBiasExact;
}
struct VkPhysicalDeviceDepthClampControlFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 depthClampControl;
}
struct VkPhysicalDeviceDepthClampZeroOneFeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 depthClampZeroOne;
}
struct VkPhysicalDeviceDepthClipControlFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 depthClipControl;
}
struct VkPhysicalDeviceDepthClipEnableFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 depthClipEnable;
}
struct VkPhysicalDeviceDepthStencilResolveProperties {
	VkStructureType sType;
	void* pNext;
	VkResolveModeFlags supportedDepthResolveModes;
	VkResolveModeFlags supportedStencilResolveModes;
	VkBool32 independentResolveNone;
	VkBool32 independentResolve;
}
struct VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	size_t combinedImageSamplerDensityMapDescriptorSize;
}
struct VkPhysicalDeviceDescriptorBufferFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 descriptorBuffer;
	VkBool32 descriptorBufferCaptureReplay;
	VkBool32 descriptorBufferImageLayoutIgnored;
	VkBool32 descriptorBufferPushDescriptors;
}
struct VkPhysicalDeviceDescriptorBufferPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 combinedImageSamplerDescriptorSingleArray;
	VkBool32 bufferlessPushDescriptors;
	VkBool32 allowSamplerImageViewPostSubmitCreation;
	VkDeviceSize descriptorBufferOffsetAlignment;
	uint32_t maxDescriptorBufferBindings;
	uint32_t maxResourceDescriptorBufferBindings;
	uint32_t maxSamplerDescriptorBufferBindings;
	uint32_t maxEmbeddedImmutableSamplerBindings;
	uint32_t maxEmbeddedImmutableSamplers;
	size_t bufferCaptureReplayDescriptorDataSize;
	size_t imageCaptureReplayDescriptorDataSize;
	size_t imageViewCaptureReplayDescriptorDataSize;
	size_t samplerCaptureReplayDescriptorDataSize;
	size_t accelerationStructureCaptureReplayDescriptorDataSize;
	size_t samplerDescriptorSize;
	size_t combinedImageSamplerDescriptorSize;
	size_t sampledImageDescriptorSize;
	size_t storageImageDescriptorSize;
	size_t uniformTexelBufferDescriptorSize;
	size_t robustUniformTexelBufferDescriptorSize;
	size_t storageTexelBufferDescriptorSize;
	size_t robustStorageTexelBufferDescriptorSize;
	size_t uniformBufferDescriptorSize;
	size_t robustUniformBufferDescriptorSize;
	size_t storageBufferDescriptorSize;
	size_t robustStorageBufferDescriptorSize;
	size_t inputAttachmentDescriptorSize;
	size_t accelerationStructureDescriptorSize;
	VkDeviceSize maxSamplerDescriptorBufferRange;
	VkDeviceSize maxResourceDescriptorBufferRange;
	VkDeviceSize samplerDescriptorBufferAddressSpaceSize;
	VkDeviceSize resourceDescriptorBufferAddressSpaceSize;
	VkDeviceSize descriptorBufferAddressSpaceSize;
}
struct VkPhysicalDeviceDescriptorIndexingFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderInputAttachmentArrayDynamicIndexing;
	VkBool32 shaderUniformTexelBufferArrayDynamicIndexing;
	VkBool32 shaderStorageTexelBufferArrayDynamicIndexing;
	VkBool32 shaderUniformBufferArrayNonUniformIndexing;
	VkBool32 shaderSampledImageArrayNonUniformIndexing;
	VkBool32 shaderStorageBufferArrayNonUniformIndexing;
	VkBool32 shaderStorageImageArrayNonUniformIndexing;
	VkBool32 shaderInputAttachmentArrayNonUniformIndexing;
	VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing;
	VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing;
	VkBool32 descriptorBindingUniformBufferUpdateAfterBind;
	VkBool32 descriptorBindingSampledImageUpdateAfterBind;
	VkBool32 descriptorBindingStorageImageUpdateAfterBind;
	VkBool32 descriptorBindingStorageBufferUpdateAfterBind;
	VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind;
	VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind;
	VkBool32 descriptorBindingUpdateUnusedWhilePending;
	VkBool32 descriptorBindingPartiallyBound;
	VkBool32 descriptorBindingVariableDescriptorCount;
	VkBool32 runtimeDescriptorArray;
}
struct VkPhysicalDeviceDescriptorIndexingProperties {
	VkStructureType sType;
	void* pNext;
	uint32_t maxUpdateAfterBindDescriptorsInAllPools;
	VkBool32 shaderUniformBufferArrayNonUniformIndexingNative;
	VkBool32 shaderSampledImageArrayNonUniformIndexingNative;
	VkBool32 shaderStorageBufferArrayNonUniformIndexingNative;
	VkBool32 shaderStorageImageArrayNonUniformIndexingNative;
	VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative;
	VkBool32 robustBufferAccessUpdateAfterBind;
	VkBool32 quadDivergentImplicitLod;
	uint32_t maxPerStageDescriptorUpdateAfterBindSamplers;
	uint32_t maxPerStageDescriptorUpdateAfterBindUniformBuffers;
	uint32_t maxPerStageDescriptorUpdateAfterBindStorageBuffers;
	uint32_t maxPerStageDescriptorUpdateAfterBindSampledImages;
	uint32_t maxPerStageDescriptorUpdateAfterBindStorageImages;
	uint32_t maxPerStageDescriptorUpdateAfterBindInputAttachments;
	uint32_t maxPerStageUpdateAfterBindResources;
	uint32_t maxDescriptorSetUpdateAfterBindSamplers;
	uint32_t maxDescriptorSetUpdateAfterBindUniformBuffers;
	uint32_t maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
	uint32_t maxDescriptorSetUpdateAfterBindStorageBuffers;
	uint32_t maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
	uint32_t maxDescriptorSetUpdateAfterBindSampledImages;
	uint32_t maxDescriptorSetUpdateAfterBindStorageImages;
	uint32_t maxDescriptorSetUpdateAfterBindInputAttachments;
}
struct VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 descriptorPoolOverallocation;
}
struct VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE {
	VkStructureType sType;
	void* pNext;
	VkBool32 descriptorSetHostMapping;
}
struct VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 deviceGeneratedCompute;
	VkBool32 deviceGeneratedComputePipelines;
	VkBool32 deviceGeneratedComputeCaptureReplay;
}
struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 deviceGeneratedCommands;
	VkBool32 dynamicGeneratedPipelineLayout;
}
struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 deviceGeneratedCommands;
}
struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t maxIndirectPipelineCount;
	uint32_t maxIndirectShaderObjectCount;
	uint32_t maxIndirectSequenceCount;
	uint32_t maxIndirectCommandsTokenCount;
	uint32_t maxIndirectCommandsTokenOffset;
	uint32_t maxIndirectCommandsIndirectStride;
	VkIndirectCommandsInputModeFlagsEXT supportedIndirectCommandsInputModes;
	VkShaderStageFlags supportedIndirectCommandsShaderStages;
	VkShaderStageFlags supportedIndirectCommandsShaderStagesPipelineBinding;
	VkShaderStageFlags supportedIndirectCommandsShaderStagesShaderBinding;
	VkBool32 deviceGeneratedCommandsTransformFeedback;
	VkBool32 deviceGeneratedCommandsMultiDrawIndirectCount;
}
struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
	VkStructureType sType;
	void* pNext;
	uint32_t maxGraphicsShaderGroupCount;
	uint32_t maxIndirectSequenceCount;
	uint32_t maxIndirectCommandsTokenCount;
	uint32_t maxIndirectCommandsStreamCount;
	uint32_t maxIndirectCommandsTokenOffset;
	uint32_t maxIndirectCommandsStreamStride;
	uint32_t minSequencesCountBufferOffsetAlignment;
	uint32_t minSequencesIndexBufferOffsetAlignment;
	uint32_t minIndirectCommandsBufferOffsetAlignment;
}
struct VkPhysicalDeviceDeviceMemoryReportFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 deviceMemoryReport;
}
struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 diagnosticsConfig;
}
struct VkPhysicalDeviceDiscardRectanglePropertiesEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t maxDiscardRectangles;
}
struct VkPhysicalDeviceDriverProperties {
	VkStructureType sType;
	void* pNext;
	VkDriverId driverID;
	char[256U] driverName;
	char[256U] driverInfo;
	VkConformanceVersion conformanceVersion;
}
struct VkPhysicalDeviceDrmPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 hasPrimary;
	VkBool32 hasRender;
	int64_t primaryMajor;
	int64_t primaryMinor;
	int64_t renderMajor;
	int64_t renderMinor;
}
struct VkPhysicalDeviceDynamicRenderingFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 dynamicRendering;
}
struct VkPhysicalDeviceDynamicRenderingLocalReadFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 dynamicRenderingLocalRead;
}
struct VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 dynamicRenderingUnusedAttachments;
}
struct VkPhysicalDeviceExclusiveScissorFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 exclusiveScissor;
}
struct VkPhysicalDeviceExtendedDynamicState2FeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 extendedDynamicState2;
	VkBool32 extendedDynamicState2LogicOp;
	VkBool32 extendedDynamicState2PatchControlPoints;
}
struct VkPhysicalDeviceExtendedDynamicState3FeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 extendedDynamicState3TessellationDomainOrigin;
	VkBool32 extendedDynamicState3DepthClampEnable;
	VkBool32 extendedDynamicState3PolygonMode;
	VkBool32 extendedDynamicState3RasterizationSamples;
	VkBool32 extendedDynamicState3SampleMask;
	VkBool32 extendedDynamicState3AlphaToCoverageEnable;
	VkBool32 extendedDynamicState3AlphaToOneEnable;
	VkBool32 extendedDynamicState3LogicOpEnable;
	VkBool32 extendedDynamicState3ColorBlendEnable;
	VkBool32 extendedDynamicState3ColorBlendEquation;
	VkBool32 extendedDynamicState3ColorWriteMask;
	VkBool32 extendedDynamicState3RasterizationStream;
	VkBool32 extendedDynamicState3ConservativeRasterizationMode;
	VkBool32 extendedDynamicState3ExtraPrimitiveOverestimationSize;
	VkBool32 extendedDynamicState3DepthClipEnable;
	VkBool32 extendedDynamicState3SampleLocationsEnable;
	VkBool32 extendedDynamicState3ColorBlendAdvanced;
	VkBool32 extendedDynamicState3ProvokingVertexMode;
	VkBool32 extendedDynamicState3LineRasterizationMode;
	VkBool32 extendedDynamicState3LineStippleEnable;
	VkBool32 extendedDynamicState3DepthClipNegativeOneToOne;
	VkBool32 extendedDynamicState3ViewportWScalingEnable;
	VkBool32 extendedDynamicState3ViewportSwizzle;
	VkBool32 extendedDynamicState3CoverageToColorEnable;
	VkBool32 extendedDynamicState3CoverageToColorLocation;
	VkBool32 extendedDynamicState3CoverageModulationMode;
	VkBool32 extendedDynamicState3CoverageModulationTableEnable;
	VkBool32 extendedDynamicState3CoverageModulationTable;
	VkBool32 extendedDynamicState3CoverageReductionMode;
	VkBool32 extendedDynamicState3RepresentativeFragmentTestEnable;
	VkBool32 extendedDynamicState3ShadingRateImageEnable;
}
struct VkPhysicalDeviceExtendedDynamicState3PropertiesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 dynamicPrimitiveTopologyUnrestricted;
}
struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 extendedDynamicState;
}
struct VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 extendedSparseAddressSpace;
}
struct VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV {
	VkStructureType sType;
	void* pNext;
	VkDeviceSize extendedSparseAddressSpaceSize;
	VkImageUsageFlags extendedSparseImageUsageFlags;
	VkBufferUsageFlags extendedSparseBufferUsageFlags;
}
struct VkPhysicalDeviceExternalBufferInfo {
	VkStructureType sType;
	void* pNext;
	VkBufferCreateFlags flags;
	VkBufferUsageFlags usage;
	VkExternalMemoryHandleTypeFlagBits handleType;
}
struct VkPhysicalDeviceExternalFenceInfo {
	VkStructureType sType;
	void* pNext;
	VkExternalFenceHandleTypeFlagBits handleType;
}
struct VkPhysicalDeviceExternalImageFormatInfo {
	VkStructureType sType;
	void* pNext;
	VkExternalMemoryHandleTypeFlagBits handleType;
}
struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	VkDeviceSize minImportedHostPointerAlignment;
}
struct VkPhysicalDeviceExternalMemoryRDMAFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 externalMemoryRDMA;
}
struct VkPhysicalDeviceExternalSemaphoreInfo {
	VkStructureType sType;
	void* pNext;
	VkExternalSemaphoreHandleTypeFlagBits handleType;
}
struct VkPhysicalDeviceFaultFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 deviceFault;
	VkBool32 deviceFaultVendorBinary;
}
struct VkPhysicalDeviceFeatures {
	VkBool32 robustBufferAccess;
	VkBool32 fullDrawIndexUint32;
	VkBool32 imageCubeArray;
	VkBool32 independentBlend;
	VkBool32 geometryShader;
	VkBool32 tessellationShader;
	VkBool32 sampleRateShading;
	VkBool32 dualSrcBlend;
	VkBool32 logicOp;
	VkBool32 multiDrawIndirect;
	VkBool32 drawIndirectFirstInstance;
	VkBool32 depthClamp;
	VkBool32 depthBiasClamp;
	VkBool32 fillModeNonSolid;
	VkBool32 depthBounds;
	VkBool32 wideLines;
	VkBool32 largePoints;
	VkBool32 alphaToOne;
	VkBool32 multiViewport;
	VkBool32 samplerAnisotropy;
	VkBool32 textureCompressionETC2;
	VkBool32 textureCompressionASTC_LDR;
	VkBool32 textureCompressionBC;
	VkBool32 occlusionQueryPrecise;
	VkBool32 pipelineStatisticsQuery;
	VkBool32 vertexPipelineStoresAndAtomics;
	VkBool32 fragmentStoresAndAtomics;
	VkBool32 shaderTessellationAndGeometryPointSize;
	VkBool32 shaderImageGatherExtended;
	VkBool32 shaderStorageImageExtendedFormats;
	VkBool32 shaderStorageImageMultisample;
	VkBool32 shaderStorageImageReadWithoutFormat;
	VkBool32 shaderStorageImageWriteWithoutFormat;
	VkBool32 shaderUniformBufferArrayDynamicIndexing;
	VkBool32 shaderSampledImageArrayDynamicIndexing;
	VkBool32 shaderStorageBufferArrayDynamicIndexing;
	VkBool32 shaderStorageImageArrayDynamicIndexing;
	VkBool32 shaderClipDistance;
	VkBool32 shaderCullDistance;
	VkBool32 shaderFloat64;
	VkBool32 shaderInt64;
	VkBool32 shaderInt16;
	VkBool32 shaderResourceResidency;
	VkBool32 shaderResourceMinLod;
	VkBool32 sparseBinding;
	VkBool32 sparseResidencyBuffer;
	VkBool32 sparseResidencyImage2D;
	VkBool32 sparseResidencyImage3D;
	VkBool32 sparseResidency2Samples;
	VkBool32 sparseResidency4Samples;
	VkBool32 sparseResidency8Samples;
	VkBool32 sparseResidency16Samples;
	VkBool32 sparseResidencyAliased;
	VkBool32 variableMultisampleRate;
	VkBool32 inheritedQueries;
}
struct VkPhysicalDeviceFeatures2 {
	VkStructureType sType;
	void* pNext;
	VkPhysicalDeviceFeatures features;
}
struct VkPhysicalDeviceFloatControlsProperties {
	VkStructureType sType;
	void* pNext;
	VkShaderFloatControlsIndependence denormBehaviorIndependence;
	VkShaderFloatControlsIndependence roundingModeIndependence;
	VkBool32 shaderSignedZeroInfNanPreserveFloat16;
	VkBool32 shaderSignedZeroInfNanPreserveFloat32;
	VkBool32 shaderSignedZeroInfNanPreserveFloat64;
	VkBool32 shaderDenormPreserveFloat16;
	VkBool32 shaderDenormPreserveFloat32;
	VkBool32 shaderDenormPreserveFloat64;
	VkBool32 shaderDenormFlushToZeroFloat16;
	VkBool32 shaderDenormFlushToZeroFloat32;
	VkBool32 shaderDenormFlushToZeroFloat64;
	VkBool32 shaderRoundingModeRTEFloat16;
	VkBool32 shaderRoundingModeRTEFloat32;
	VkBool32 shaderRoundingModeRTEFloat64;
	VkBool32 shaderRoundingModeRTZFloat16;
	VkBool32 shaderRoundingModeRTZFloat32;
	VkBool32 shaderRoundingModeRTZFloat64;
}
struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 fragmentDensityMapDeferred;
}
struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 subsampledLoads;
	VkBool32 subsampledCoarseReconstructionEarlyAccess;
	uint32_t maxSubsampledArrayLayers;
	uint32_t maxDescriptorSetSubsampledSamplers;
}
struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 fragmentDensityMap;
	VkBool32 fragmentDensityMapDynamic;
	VkBool32 fragmentDensityMapNonSubsampledImages;
}
struct VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM {
	VkStructureType sType;
	void* pNext;
	VkBool32 fragmentDensityMapOffset;
}
struct VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM {
	VkStructureType sType;
	void* pNext;
	VkExtent2D fragmentDensityOffsetGranularity;
}
struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	VkExtent2D minFragmentDensityTexelSize;
	VkExtent2D maxFragmentDensityTexelSize;
	VkBool32 fragmentDensityInvocations;
}
struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 fragmentShaderBarycentric;
}
struct VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 triStripVertexOrderIndependentOfProvokingVertex;
}
struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 fragmentShaderSampleInterlock;
	VkBool32 fragmentShaderPixelInterlock;
	VkBool32 fragmentShaderShadingRateInterlock;
}
struct VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 fragmentShadingRateEnums;
	VkBool32 supersampleFragmentShadingRates;
	VkBool32 noInvocationFragmentShadingRates;
}
struct VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV {
	VkStructureType sType;
	void* pNext;
	VkSampleCountFlagBits maxFragmentShadingRateInvocationCount;
}
struct VkPhysicalDeviceFragmentShadingRateFeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 pipelineFragmentShadingRate;
	VkBool32 primitiveFragmentShadingRate;
	VkBool32 attachmentFragmentShadingRate;
}
struct VkPhysicalDeviceFragmentShadingRateKHR {
	VkStructureType sType;
	void* pNext;
	VkSampleCountFlags sampleCounts;
	VkExtent2D fragmentSize;
}
struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR {
	VkStructureType sType;
	void* pNext;
	VkExtent2D minFragmentShadingRateAttachmentTexelSize;
	VkExtent2D maxFragmentShadingRateAttachmentTexelSize;
	uint32_t maxFragmentShadingRateAttachmentTexelSizeAspectRatio;
	VkBool32 primitiveFragmentShadingRateWithMultipleViewports;
	VkBool32 layeredShadingRateAttachments;
	VkBool32 fragmentShadingRateNonTrivialCombinerOps;
	VkExtent2D maxFragmentSize;
	uint32_t maxFragmentSizeAspectRatio;
	uint32_t maxFragmentShadingRateCoverageSamples;
	VkSampleCountFlagBits maxFragmentShadingRateRasterizationSamples;
	VkBool32 fragmentShadingRateWithShaderDepthStencilWrites;
	VkBool32 fragmentShadingRateWithSampleMask;
	VkBool32 fragmentShadingRateWithShaderSampleMask;
	VkBool32 fragmentShadingRateWithConservativeRasterization;
	VkBool32 fragmentShadingRateWithFragmentShaderInterlock;
	VkBool32 fragmentShadingRateWithCustomSampleLocations;
	VkBool32 fragmentShadingRateStrictMultiplyCombiner;
}
struct VkPhysicalDeviceFrameBoundaryFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 frameBoundary;
}
struct VkPhysicalDeviceGlobalPriorityQueryFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 globalPriorityQuery;
}
struct VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 graphicsPipelineLibrary;
}
struct VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 graphicsPipelineLibraryFastLinking;
	VkBool32 graphicsPipelineLibraryIndependentInterpolationDecoration;
}
struct VkPhysicalDeviceGroupProperties {
	VkStructureType sType;
	void* pNext;
	uint32_t physicalDeviceCount;
	VkPhysicalDevice[32U] physicalDevices;
	VkBool32 subsetAllocation;
}
struct VkPhysicalDeviceHdrVividFeaturesHUAWEI {
	VkStructureType sType;
	void* pNext;
	VkBool32 hdrVivid;
}
struct VkPhysicalDeviceHostImageCopyFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 hostImageCopy;
}
struct VkPhysicalDeviceHostImageCopyProperties {
	VkStructureType sType;
	void* pNext;
	uint32_t copySrcLayoutCount;
	VkImageLayout* pCopySrcLayouts;
	uint32_t copyDstLayoutCount;
	VkImageLayout* pCopyDstLayouts;
	uint8_t[16U] optimalTilingLayoutUUID;
	VkBool32 identicalMemoryTypeRequirements;
}
struct VkPhysicalDeviceHostQueryResetFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 hostQueryReset;
}
struct VkPhysicalDeviceIDProperties {
	VkStructureType sType;
	void* pNext;
	uint8_t[16U] deviceUUID;
	uint8_t[16U] driverUUID;
	uint8_t[8U] deviceLUID;
	uint32_t deviceNodeMask;
	VkBool32 deviceLUIDValid;
}
struct VkPhysicalDeviceImage2DViewOf3DFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 image2DViewOf3D;
	VkBool32 sampler2DViewOf3D;
}
struct VkPhysicalDeviceImageAlignmentControlFeaturesMESA {
	VkStructureType sType;
	void* pNext;
	VkBool32 imageAlignmentControl;
}
struct VkPhysicalDeviceImageAlignmentControlPropertiesMESA {
	VkStructureType sType;
	void* pNext;
	uint32_t supportedImageAlignmentMask;
}
struct VkPhysicalDeviceImageCompressionControlFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 imageCompressionControl;
}
struct VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 imageCompressionControlSwapchain;
}
struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
	VkStructureType sType;
	void* pNext;
	uint64_t drmFormatModifier;
	VkSharingMode sharingMode;
	uint32_t queueFamilyIndexCount;
	uint32_t* pQueueFamilyIndices;
}
struct VkPhysicalDeviceImageFormatInfo2 {
	VkStructureType sType;
	void* pNext;
	VkFormat format;
	VkImageType type;
	VkImageTiling tiling;
	VkImageUsageFlags usage;
	VkImageCreateFlags flags;
}
struct VkPhysicalDeviceImageProcessing2FeaturesQCOM {
	VkStructureType sType;
	void* pNext;
	VkBool32 textureBlockMatch2;
}
struct VkPhysicalDeviceImageProcessing2PropertiesQCOM {
	VkStructureType sType;
	void* pNext;
	VkExtent2D maxBlockMatchWindow;
}
struct VkPhysicalDeviceImageProcessingFeaturesQCOM {
	VkStructureType sType;
	void* pNext;
	VkBool32 textureSampleWeighted;
	VkBool32 textureBoxFilter;
	VkBool32 textureBlockMatch;
}
struct VkPhysicalDeviceImageProcessingPropertiesQCOM {
	VkStructureType sType;
	void* pNext;
	uint32_t maxWeightFilterPhases;
	VkExtent2D maxWeightFilterDimension;
	VkExtent2D maxBlockMatchRegion;
	VkExtent2D maxBoxFilterBlockSize;
}
struct VkPhysicalDeviceImageRobustnessFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 robustImageAccess;
}
struct VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 imageSlicedViewOf3D;
}
struct VkPhysicalDeviceImageViewImageFormatInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkImageViewType imageViewType;
}
struct VkPhysicalDeviceImageViewMinLodFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 minLod;
}
struct VkPhysicalDeviceImagelessFramebufferFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 imagelessFramebuffer;
}
struct VkPhysicalDeviceIndexTypeUint8Features {
	VkStructureType sType;
	void* pNext;
	VkBool32 indexTypeUint8;
}
struct VkPhysicalDeviceInheritedViewportScissorFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 inheritedViewportScissor2D;
}
struct VkPhysicalDeviceInlineUniformBlockFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 inlineUniformBlock;
	VkBool32 descriptorBindingInlineUniformBlockUpdateAfterBind;
}
struct VkPhysicalDeviceInlineUniformBlockProperties {
	VkStructureType sType;
	void* pNext;
	uint32_t maxInlineUniformBlockSize;
	uint32_t maxPerStageDescriptorInlineUniformBlocks;
	uint32_t maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
	uint32_t maxDescriptorSetInlineUniformBlocks;
	uint32_t maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
}
struct VkPhysicalDeviceInvocationMaskFeaturesHUAWEI {
	VkStructureType sType;
	void* pNext;
	VkBool32 invocationMask;
}
struct VkPhysicalDeviceLayeredApiPropertiesKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t vendorID;
	uint32_t deviceID;
	VkPhysicalDeviceLayeredApiKHR layeredAPI;
	char[256U] deviceName;
}
struct VkPhysicalDeviceLayeredApiPropertiesListKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t layeredApiCount;
	VkPhysicalDeviceLayeredApiPropertiesKHR* pLayeredApis;
}
struct VkPhysicalDeviceLayeredApiVulkanPropertiesKHR {
	VkStructureType sType;
	void* pNext;
	VkPhysicalDeviceProperties2 properties;
}
struct VkPhysicalDeviceLayeredDriverPropertiesMSFT {
	VkStructureType sType;
	void* pNext;
	VkLayeredDriverUnderlyingApiMSFT underlyingAPI;
}
struct VkPhysicalDeviceLegacyDitheringFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 legacyDithering;
}
struct VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 legacyVertexAttributes;
}
struct VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 nativeUnalignedPerformance;
}
struct VkPhysicalDeviceLimits {
	uint32_t maxImageDimension1D;
	uint32_t maxImageDimension2D;
	uint32_t maxImageDimension3D;
	uint32_t maxImageDimensionCube;
	uint32_t maxImageArrayLayers;
	uint32_t maxTexelBufferElements;
	uint32_t maxUniformBufferRange;
	uint32_t maxStorageBufferRange;
	uint32_t maxPushConstantsSize;
	uint32_t maxMemoryAllocationCount;
	uint32_t maxSamplerAllocationCount;
	VkDeviceSize bufferImageGranularity;
	VkDeviceSize sparseAddressSpaceSize;
	uint32_t maxBoundDescriptorSets;
	uint32_t maxPerStageDescriptorSamplers;
	uint32_t maxPerStageDescriptorUniformBuffers;
	uint32_t maxPerStageDescriptorStorageBuffers;
	uint32_t maxPerStageDescriptorSampledImages;
	uint32_t maxPerStageDescriptorStorageImages;
	uint32_t maxPerStageDescriptorInputAttachments;
	uint32_t maxPerStageResources;
	uint32_t maxDescriptorSetSamplers;
	uint32_t maxDescriptorSetUniformBuffers;
	uint32_t maxDescriptorSetUniformBuffersDynamic;
	uint32_t maxDescriptorSetStorageBuffers;
	uint32_t maxDescriptorSetStorageBuffersDynamic;
	uint32_t maxDescriptorSetSampledImages;
	uint32_t maxDescriptorSetStorageImages;
	uint32_t maxDescriptorSetInputAttachments;
	uint32_t maxVertexInputAttributes;
	uint32_t maxVertexInputBindings;
	uint32_t maxVertexInputAttributeOffset;
	uint32_t maxVertexInputBindingStride;
	uint32_t maxVertexOutputComponents;
	uint32_t maxTessellationGenerationLevel;
	uint32_t maxTessellationPatchSize;
	uint32_t maxTessellationControlPerVertexInputComponents;
	uint32_t maxTessellationControlPerVertexOutputComponents;
	uint32_t maxTessellationControlPerPatchOutputComponents;
	uint32_t maxTessellationControlTotalOutputComponents;
	uint32_t maxTessellationEvaluationInputComponents;
	uint32_t maxTessellationEvaluationOutputComponents;
	uint32_t maxGeometryShaderInvocations;
	uint32_t maxGeometryInputComponents;
	uint32_t maxGeometryOutputComponents;
	uint32_t maxGeometryOutputVertices;
	uint32_t maxGeometryTotalOutputComponents;
	uint32_t maxFragmentInputComponents;
	uint32_t maxFragmentOutputAttachments;
	uint32_t maxFragmentDualSrcAttachments;
	uint32_t maxFragmentCombinedOutputResources;
	uint32_t maxComputeSharedMemorySize;
	uint32_t[3] maxComputeWorkGroupCount;
	uint32_t maxComputeWorkGroupInvocations;
	uint32_t[3] maxComputeWorkGroupSize;
	uint32_t subPixelPrecisionBits;
	uint32_t subTexelPrecisionBits;
	uint32_t mipmapPrecisionBits;
	uint32_t maxDrawIndexedIndexValue;
	uint32_t maxDrawIndirectCount;
	float maxSamplerLodBias;
	float maxSamplerAnisotropy;
	uint32_t maxViewports;
	uint32_t[2] maxViewportDimensions;
	float[2] viewportBoundsRange;
	uint32_t viewportSubPixelBits;
	size_t minMemoryMapAlignment;
	VkDeviceSize minTexelBufferOffsetAlignment;
	VkDeviceSize minUniformBufferOffsetAlignment;
	VkDeviceSize minStorageBufferOffsetAlignment;
	int32_t minTexelOffset;
	uint32_t maxTexelOffset;
	int32_t minTexelGatherOffset;
	uint32_t maxTexelGatherOffset;
	float minInterpolationOffset;
	float maxInterpolationOffset;
	uint32_t subPixelInterpolationOffsetBits;
	uint32_t maxFramebufferWidth;
	uint32_t maxFramebufferHeight;
	uint32_t maxFramebufferLayers;
	VkSampleCountFlags framebufferColorSampleCounts;
	VkSampleCountFlags framebufferDepthSampleCounts;
	VkSampleCountFlags framebufferStencilSampleCounts;
	VkSampleCountFlags framebufferNoAttachmentsSampleCounts;
	uint32_t maxColorAttachments;
	VkSampleCountFlags sampledImageColorSampleCounts;
	VkSampleCountFlags sampledImageIntegerSampleCounts;
	VkSampleCountFlags sampledImageDepthSampleCounts;
	VkSampleCountFlags sampledImageStencilSampleCounts;
	VkSampleCountFlags storageImageSampleCounts;
	uint32_t maxSampleMaskWords;
	VkBool32 timestampComputeAndGraphics;
	float timestampPeriod;
	uint32_t maxClipDistances;
	uint32_t maxCullDistances;
	uint32_t maxCombinedClipAndCullDistances;
	uint32_t discreteQueuePriorities;
	float[2] pointSizeRange;
	float[2] lineWidthRange;
	float pointSizeGranularity;
	float lineWidthGranularity;
	VkBool32 strictLines;
	VkBool32 standardSampleLocations;
	VkDeviceSize optimalBufferCopyOffsetAlignment;
	VkDeviceSize optimalBufferCopyRowPitchAlignment;
	VkDeviceSize nonCoherentAtomSize;
}
struct VkPhysicalDeviceLineRasterizationFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 rectangularLines;
	VkBool32 bresenhamLines;
	VkBool32 smoothLines;
	VkBool32 stippledRectangularLines;
	VkBool32 stippledBresenhamLines;
	VkBool32 stippledSmoothLines;
}
struct VkPhysicalDeviceLineRasterizationProperties {
	VkStructureType sType;
	void* pNext;
	uint32_t lineSubPixelPrecisionBits;
}
struct VkPhysicalDeviceLinearColorAttachmentFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 linearColorAttachment;
}
struct VkPhysicalDeviceMaintenance3Properties {
	VkStructureType sType;
	void* pNext;
	uint32_t maxPerSetDescriptors;
	VkDeviceSize maxMemoryAllocationSize;
}
struct VkPhysicalDeviceMaintenance4Features {
	VkStructureType sType;
	void* pNext;
	VkBool32 maintenance4;
}
struct VkPhysicalDeviceMaintenance4Properties {
	VkStructureType sType;
	void* pNext;
	VkDeviceSize maxBufferSize;
}
struct VkPhysicalDeviceMaintenance5Features {
	VkStructureType sType;
	void* pNext;
	VkBool32 maintenance5;
}
struct VkPhysicalDeviceMaintenance5Properties {
	VkStructureType sType;
	void* pNext;
	VkBool32 earlyFragmentMultisampleCoverageAfterSampleCounting;
	VkBool32 earlyFragmentSampleMaskTestBeforeSampleCounting;
	VkBool32 depthStencilSwizzleOneSupport;
	VkBool32 polygonModePointSize;
	VkBool32 nonStrictSinglePixelWideLinesUseParallelogram;
	VkBool32 nonStrictWideLinesUseParallelogram;
}
struct VkPhysicalDeviceMaintenance6Features {
	VkStructureType sType;
	void* pNext;
	VkBool32 maintenance6;
}
struct VkPhysicalDeviceMaintenance6Properties {
	VkStructureType sType;
	void* pNext;
	VkBool32 blockTexelViewCompatibleMultipleLayers;
	uint32_t maxCombinedImageSamplerDescriptorCount;
	VkBool32 fragmentShadingRateClampCombinerInputs;
}
struct VkPhysicalDeviceMaintenance7FeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 maintenance7;
}
struct VkPhysicalDeviceMaintenance7PropertiesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 robustFragmentShadingRateAttachmentAccess;
	VkBool32 separateDepthStencilAttachmentAccess;
	uint32_t maxDescriptorSetTotalUniformBuffersDynamic;
	uint32_t maxDescriptorSetTotalStorageBuffersDynamic;
	uint32_t maxDescriptorSetTotalBuffersDynamic;
	uint32_t maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic;
	uint32_t maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic;
	uint32_t maxDescriptorSetUpdateAfterBindTotalBuffersDynamic;
}
struct VkPhysicalDeviceMaintenance8FeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 maintenance8;
}
struct VkPhysicalDeviceMapMemoryPlacedFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 memoryMapPlaced;
	VkBool32 memoryMapRangePlaced;
	VkBool32 memoryUnmapReserve;
}
struct VkPhysicalDeviceMapMemoryPlacedPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	VkDeviceSize minPlacedMemoryMapAlignment;
}
struct VkPhysicalDeviceMemoryBudgetPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	VkDeviceSize[16U] heapBudget;
	VkDeviceSize[16U] heapUsage;
}
struct VkPhysicalDeviceMemoryDecompressionFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 memoryDecompression;
}
struct VkPhysicalDeviceMemoryDecompressionPropertiesNV {
	VkStructureType sType;
	void* pNext;
	VkMemoryDecompressionMethodFlagsNV decompressionMethods;
	uint64_t maxDecompressionIndirectCount;
}
struct VkPhysicalDeviceMemoryPriorityFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 memoryPriority;
}
struct VkPhysicalDeviceMemoryProperties {
	uint32_t memoryTypeCount;
	VkMemoryType[32U] memoryTypes;
	uint32_t memoryHeapCount;
	VkMemoryHeap[16U] memoryHeaps;
}
struct VkPhysicalDeviceMemoryProperties2 {
	VkStructureType sType;
	void* pNext;
	VkPhysicalDeviceMemoryProperties memoryProperties;
}
struct VkPhysicalDeviceMeshShaderFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 taskShader;
	VkBool32 meshShader;
	VkBool32 multiviewMeshShader;
	VkBool32 primitiveFragmentShadingRateMeshShader;
	VkBool32 meshShaderQueries;
}
struct VkPhysicalDeviceMeshShaderFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 taskShader;
	VkBool32 meshShader;
}
struct VkPhysicalDeviceMeshShaderPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t maxTaskWorkGroupTotalCount;
	uint32_t[3] maxTaskWorkGroupCount;
	uint32_t maxTaskWorkGroupInvocations;
	uint32_t[3] maxTaskWorkGroupSize;
	uint32_t maxTaskPayloadSize;
	uint32_t maxTaskSharedMemorySize;
	uint32_t maxTaskPayloadAndSharedMemorySize;
	uint32_t maxMeshWorkGroupTotalCount;
	uint32_t[3] maxMeshWorkGroupCount;
	uint32_t maxMeshWorkGroupInvocations;
	uint32_t[3] maxMeshWorkGroupSize;
	uint32_t maxMeshSharedMemorySize;
	uint32_t maxMeshPayloadAndSharedMemorySize;
	uint32_t maxMeshOutputMemorySize;
	uint32_t maxMeshPayloadAndOutputMemorySize;
	uint32_t maxMeshOutputComponents;
	uint32_t maxMeshOutputVertices;
	uint32_t maxMeshOutputPrimitives;
	uint32_t maxMeshOutputLayers;
	uint32_t maxMeshMultiviewViewCount;
	uint32_t meshOutputPerVertexGranularity;
	uint32_t meshOutputPerPrimitiveGranularity;
	uint32_t maxPreferredTaskWorkGroupInvocations;
	uint32_t maxPreferredMeshWorkGroupInvocations;
	VkBool32 prefersLocalInvocationVertexOutput;
	VkBool32 prefersLocalInvocationPrimitiveOutput;
	VkBool32 prefersCompactVertexOutput;
	VkBool32 prefersCompactPrimitiveOutput;
}
struct VkPhysicalDeviceMeshShaderPropertiesNV {
	VkStructureType sType;
	void* pNext;
	uint32_t maxDrawMeshTasksCount;
	uint32_t maxTaskWorkGroupInvocations;
	uint32_t[3] maxTaskWorkGroupSize;
	uint32_t maxTaskTotalMemorySize;
	uint32_t maxTaskOutputCount;
	uint32_t maxMeshWorkGroupInvocations;
	uint32_t[3] maxMeshWorkGroupSize;
	uint32_t maxMeshTotalMemorySize;
	uint32_t maxMeshOutputVertices;
	uint32_t maxMeshOutputPrimitives;
	uint32_t maxMeshMultiviewViewCount;
	uint32_t meshOutputPerVertexGranularity;
	uint32_t meshOutputPerPrimitiveGranularity;
}
struct VkPhysicalDeviceMultiDrawFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 multiDraw;
}
struct VkPhysicalDeviceMultiDrawPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t maxMultiDrawCount;
}
struct VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 multisampledRenderToSingleSampled;
}
struct VkPhysicalDeviceMultiviewFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 multiview;
	VkBool32 multiviewGeometryShader;
	VkBool32 multiviewTessellationShader;
}
struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
	VkStructureType sType;
	void* pNext;
	VkBool32 perViewPositionAllComponents;
}
struct VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM {
	VkStructureType sType;
	void* pNext;
	VkBool32 multiviewPerViewRenderAreas;
}
struct VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM {
	VkStructureType sType;
	void* pNext;
	VkBool32 multiviewPerViewViewports;
}
struct VkPhysicalDeviceMultiviewProperties {
	VkStructureType sType;
	void* pNext;
	uint32_t maxMultiviewViewCount;
	uint32_t maxMultiviewInstanceIndex;
}
struct VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 mutableDescriptorType;
}
struct VkPhysicalDeviceNestedCommandBufferFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 nestedCommandBuffer;
	VkBool32 nestedCommandBufferRendering;
	VkBool32 nestedCommandBufferSimultaneousUse;
}
struct VkPhysicalDeviceNestedCommandBufferPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t maxCommandBufferNestingLevel;
}
struct VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 nonSeamlessCubeMap;
}
struct VkPhysicalDeviceOpacityMicromapFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 micromap;
	VkBool32 micromapCaptureReplay;
	VkBool32 micromapHostCommands;
}
struct VkPhysicalDeviceOpacityMicromapPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t maxOpacity2StateSubdivisionLevel;
	uint32_t maxOpacity4StateSubdivisionLevel;
}
struct VkPhysicalDeviceOpticalFlowFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 opticalFlow;
}
struct VkPhysicalDeviceOpticalFlowPropertiesNV {
	VkStructureType sType;
	void* pNext;
	VkOpticalFlowGridSizeFlagsNV supportedOutputGridSizes;
	VkOpticalFlowGridSizeFlagsNV supportedHintGridSizes;
	VkBool32 hintSupported;
	VkBool32 costSupported;
	VkBool32 bidirectionalFlowSupported;
	VkBool32 globalFlowSupported;
	uint32_t minWidth;
	uint32_t minHeight;
	uint32_t maxWidth;
	uint32_t maxHeight;
	uint32_t maxNumRegionsOfInterest;
}
struct VkPhysicalDevicePCIBusInfoPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t pciDomain;
	uint32_t pciBus;
	uint32_t pciDevice;
	uint32_t pciFunction;
}
struct VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 pageableDeviceLocalMemory;
}
struct VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 partitionedAccelerationStructure;
}
struct VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV {
	VkStructureType sType;
	void* pNext;
	uint32_t maxPartitionCount;
}
struct VkPhysicalDevicePerStageDescriptorSetFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 perStageDescriptorSet;
	VkBool32 dynamicPipelineLayout;
}
struct VkPhysicalDevicePerformanceQueryFeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 performanceCounterQueryPools;
	VkBool32 performanceCounterMultipleQueryPools;
}
struct VkPhysicalDevicePerformanceQueryPropertiesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 allowCommandBufferQueryCopies;
}
struct VkPhysicalDevicePipelineBinaryFeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 pipelineBinaries;
}
struct VkPhysicalDevicePipelineBinaryPropertiesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 pipelineBinaryInternalCache;
	VkBool32 pipelineBinaryInternalCacheControl;
	VkBool32 pipelineBinaryPrefersInternalCache;
	VkBool32 pipelineBinaryPrecompiledInternalCache;
	VkBool32 pipelineBinaryCompressedData;
}
struct VkPhysicalDevicePipelineCreationCacheControlFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 pipelineCreationCacheControl;
}
struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 pipelineExecutableInfo;
}
struct VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 pipelineLibraryGroupHandles;
}
struct VkPhysicalDevicePipelineOpacityMicromapFeaturesARM {
	VkStructureType sType;
	void* pNext;
	VkBool32 pipelineOpacityMicromap;
}
struct VkPhysicalDevicePipelinePropertiesFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 pipelinePropertiesIdentifier;
}
struct VkPhysicalDevicePipelineProtectedAccessFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 pipelineProtectedAccess;
}
struct VkPhysicalDevicePipelineRobustnessFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 pipelineRobustness;
}
struct VkPhysicalDevicePipelineRobustnessProperties {
	VkStructureType sType;
	void* pNext;
	VkPipelineRobustnessBufferBehavior defaultRobustnessStorageBuffers;
	VkPipelineRobustnessBufferBehavior defaultRobustnessUniformBuffers;
	VkPipelineRobustnessBufferBehavior defaultRobustnessVertexInputs;
	VkPipelineRobustnessImageBehavior defaultRobustnessImages;
}
struct VkPhysicalDevicePointClippingProperties {
	VkStructureType sType;
	void* pNext;
	VkPointClippingBehavior pointClippingBehavior;
}
struct VkPhysicalDevicePresentBarrierFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 presentBarrier;
}
struct VkPhysicalDevicePresentIdFeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 presentId;
}
struct VkPhysicalDevicePresentMeteringFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 presentMetering;
}
struct VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 presentModeFifoLatestReady;
}
struct VkPhysicalDevicePresentWaitFeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 presentWait;
}
struct VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 primitiveTopologyListRestart;
	VkBool32 primitiveTopologyPatchListRestart;
}
struct VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 primitivesGeneratedQuery;
	VkBool32 primitivesGeneratedQueryWithRasterizerDiscard;
	VkBool32 primitivesGeneratedQueryWithNonZeroStreams;
}
struct VkPhysicalDevicePrivateDataFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 privateData;
}
struct VkPhysicalDeviceProperties {
	uint32_t apiVersion;
	uint32_t driverVersion;
	uint32_t vendorID;
	uint32_t deviceID;
	VkPhysicalDeviceType deviceType;
	char[256U] deviceName;
	uint8_t[16U] pipelineCacheUUID;
	VkPhysicalDeviceLimits limits;
	VkPhysicalDeviceSparseProperties sparseProperties;
}
struct VkPhysicalDeviceProperties2 {
	VkStructureType sType;
	void* pNext;
	VkPhysicalDeviceProperties properties;
}
struct VkPhysicalDeviceProtectedMemoryFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 protectedMemory;
}
struct VkPhysicalDeviceProtectedMemoryProperties {
	VkStructureType sType;
	void* pNext;
	VkBool32 protectedNoFault;
}
struct VkPhysicalDeviceProvokingVertexFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 provokingVertexLast;
	VkBool32 transformFeedbackPreservesProvokingVertex;
}
struct VkPhysicalDeviceProvokingVertexPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 provokingVertexModePerPipeline;
	VkBool32 transformFeedbackPreservesTriangleFanProvokingVertex;
}
struct VkPhysicalDevicePushDescriptorProperties {
	VkStructureType sType;
	void* pNext;
	uint32_t maxPushDescriptors;
}
struct VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 formatRgba10x6WithoutYCbCrSampler;
}
struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 rasterizationOrderColorAttachmentAccess;
	VkBool32 rasterizationOrderDepthAttachmentAccess;
	VkBool32 rasterizationOrderStencilAttachmentAccess;
}
struct VkPhysicalDeviceRawAccessChainsFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderRawAccessChains;
}
struct VkPhysicalDeviceRayQueryFeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 rayQuery;
}
struct VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 rayTracingInvocationReorder;
}
struct VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV {
	VkStructureType sType;
	void* pNext;
	VkRayTracingInvocationReorderModeNV rayTracingInvocationReorderReorderingHint;
}
struct VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 spheres;
	VkBool32 linearSweptSpheres;
}
struct VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 rayTracingMaintenance1;
	VkBool32 rayTracingPipelineTraceRaysIndirect2;
}
struct VkPhysicalDeviceRayTracingMotionBlurFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 rayTracingMotionBlur;
	VkBool32 rayTracingMotionBlurPipelineTraceRaysIndirect;
}
struct VkPhysicalDeviceRayTracingPipelineFeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 rayTracingPipeline;
	VkBool32 rayTracingPipelineShaderGroupHandleCaptureReplay;
	VkBool32 rayTracingPipelineShaderGroupHandleCaptureReplayMixed;
	VkBool32 rayTracingPipelineTraceRaysIndirect;
	VkBool32 rayTraversalPrimitiveCulling;
}
struct VkPhysicalDeviceRayTracingPipelinePropertiesKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t shaderGroupHandleSize;
	uint32_t maxRayRecursionDepth;
	uint32_t maxShaderGroupStride;
	uint32_t shaderGroupBaseAlignment;
	uint32_t shaderGroupHandleCaptureReplaySize;
	uint32_t maxRayDispatchInvocationCount;
	uint32_t shaderGroupHandleAlignment;
	uint32_t maxRayHitAttributeSize;
}
struct VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 rayTracingPositionFetch;
}
struct VkPhysicalDeviceRayTracingPropertiesNV {
	VkStructureType sType;
	void* pNext;
	uint32_t shaderGroupHandleSize;
	uint32_t maxRecursionDepth;
	uint32_t maxShaderGroupStride;
	uint32_t shaderGroupBaseAlignment;
	uint64_t maxGeometryCount;
	uint64_t maxInstanceCount;
	uint64_t maxTriangleCount;
	uint32_t maxDescriptorSetAccelerationStructures;
}
struct VkPhysicalDeviceRayTracingValidationFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 rayTracingValidation;
}
struct VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG {
	VkStructureType sType;
	void* pNext;
	VkBool32 relaxedLineRasterization;
}
struct VkPhysicalDeviceRenderPassStripedFeaturesARM {
	VkStructureType sType;
	void* pNext;
	VkBool32 renderPassStriped;
}
struct VkPhysicalDeviceRenderPassStripedPropertiesARM {
	VkStructureType sType;
	void* pNext;
	VkExtent2D renderPassStripeGranularity;
	uint32_t maxRenderPassStripes;
}
struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 representativeFragmentTest;
}
struct VkPhysicalDeviceRobustness2FeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 robustBufferAccess2;
	VkBool32 robustImageAccess2;
	VkBool32 nullDescriptor;
}
struct VkPhysicalDeviceRobustness2PropertiesEXT {
	VkStructureType sType;
	void* pNext;
	VkDeviceSize robustStorageBufferAccessSizeAlignment;
	VkDeviceSize robustUniformBufferAccessSizeAlignment;
}
struct VkPhysicalDeviceSampleLocationsPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	VkSampleCountFlags sampleLocationSampleCounts;
	VkExtent2D maxSampleLocationGridSize;
	float[2] sampleLocationCoordinateRange;
	uint32_t sampleLocationSubPixelBits;
	VkBool32 variableSampleLocations;
}
struct VkPhysicalDeviceSamplerFilterMinmaxProperties {
	VkStructureType sType;
	void* pNext;
	VkBool32 filterMinmaxSingleComponentFormats;
	VkBool32 filterMinmaxImageComponentMapping;
}
struct VkPhysicalDeviceSamplerYcbcrConversionFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 samplerYcbcrConversion;
}
struct VkPhysicalDeviceScalarBlockLayoutFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 scalarBlockLayout;
}
struct VkPhysicalDeviceSchedulingControlsFeaturesARM {
	VkStructureType sType;
	void* pNext;
	VkBool32 schedulingControls;
}
struct VkPhysicalDeviceSchedulingControlsPropertiesARM {
	VkStructureType sType;
	void* pNext;
	VkPhysicalDeviceSchedulingControlsFlagsARM schedulingControlsFlags;
}
struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 separateDepthStencilLayouts;
}
struct VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderFloat16VectorAtomics;
}
struct VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderBufferFloat16Atomics;
	VkBool32 shaderBufferFloat16AtomicAdd;
	VkBool32 shaderBufferFloat16AtomicMinMax;
	VkBool32 shaderBufferFloat32AtomicMinMax;
	VkBool32 shaderBufferFloat64AtomicMinMax;
	VkBool32 shaderSharedFloat16Atomics;
	VkBool32 shaderSharedFloat16AtomicAdd;
	VkBool32 shaderSharedFloat16AtomicMinMax;
	VkBool32 shaderSharedFloat32AtomicMinMax;
	VkBool32 shaderSharedFloat64AtomicMinMax;
	VkBool32 shaderImageFloat32AtomicMinMax;
	VkBool32 sparseImageFloat32AtomicMinMax;
}
struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderBufferFloat32Atomics;
	VkBool32 shaderBufferFloat32AtomicAdd;
	VkBool32 shaderBufferFloat64Atomics;
	VkBool32 shaderBufferFloat64AtomicAdd;
	VkBool32 shaderSharedFloat32Atomics;
	VkBool32 shaderSharedFloat32AtomicAdd;
	VkBool32 shaderSharedFloat64Atomics;
	VkBool32 shaderSharedFloat64AtomicAdd;
	VkBool32 shaderImageFloat32Atomics;
	VkBool32 shaderImageFloat32AtomicAdd;
	VkBool32 sparseImageFloat32Atomics;
	VkBool32 sparseImageFloat32AtomicAdd;
}
struct VkPhysicalDeviceShaderAtomicInt64Features {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderBufferInt64Atomics;
	VkBool32 shaderSharedInt64Atomics;
}
struct VkPhysicalDeviceShaderClockFeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderSubgroupClock;
	VkBool32 shaderDeviceClock;
}
struct VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderCoreBuiltins;
}
struct VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM {
	VkStructureType sType;
	void* pNext;
	uint64_t shaderCoreMask;
	uint32_t shaderCoreCount;
	uint32_t shaderWarpsPerCore;
}
struct VkPhysicalDeviceShaderCoreProperties2AMD {
	VkStructureType sType;
	void* pNext;
	VkShaderCorePropertiesFlagsAMD shaderCoreFeatures;
	uint32_t activeComputeUnitCount;
}
struct VkPhysicalDeviceShaderCorePropertiesAMD {
	VkStructureType sType;
	void* pNext;
	uint32_t shaderEngineCount;
	uint32_t shaderArraysPerEngineCount;
	uint32_t computeUnitsPerShaderArray;
	uint32_t simdPerComputeUnit;
	uint32_t wavefrontsPerSimd;
	uint32_t wavefrontSize;
	uint32_t sgprsPerSimd;
	uint32_t minSgprAllocation;
	uint32_t maxSgprAllocation;
	uint32_t sgprAllocationGranularity;
	uint32_t vgprsPerSimd;
	uint32_t minVgprAllocation;
	uint32_t maxVgprAllocation;
	uint32_t vgprAllocationGranularity;
}
struct VkPhysicalDeviceShaderCorePropertiesARM {
	VkStructureType sType;
	void* pNext;
	uint32_t pixelRate;
	uint32_t texelRate;
	uint32_t fmaRate;
}
struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderDemoteToHelperInvocation;
}
struct VkPhysicalDeviceShaderDrawParametersFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderDrawParameters;
}
struct VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderEarlyAndLateFragmentTests;
}
struct VkPhysicalDeviceShaderExpectAssumeFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderExpectAssume;
}
struct VkPhysicalDeviceShaderFloat16Int8Features {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderFloat16;
	VkBool32 shaderInt8;
}
struct VkPhysicalDeviceShaderFloatControls2Features {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderFloatControls2;
}
struct VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderImageInt64Atomics;
	VkBool32 sparseImageInt64Atomics;
}
struct VkPhysicalDeviceShaderImageFootprintFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 imageFootprint;
}
struct VkPhysicalDeviceShaderIntegerDotProductFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderIntegerDotProduct;
}
struct VkPhysicalDeviceShaderIntegerDotProductProperties {
	VkStructureType sType;
	void* pNext;
	VkBool32 integerDotProduct8BitUnsignedAccelerated;
	VkBool32 integerDotProduct8BitSignedAccelerated;
	VkBool32 integerDotProduct8BitMixedSignednessAccelerated;
	VkBool32 integerDotProduct4x8BitPackedUnsignedAccelerated;
	VkBool32 integerDotProduct4x8BitPackedSignedAccelerated;
	VkBool32 integerDotProduct4x8BitPackedMixedSignednessAccelerated;
	VkBool32 integerDotProduct16BitUnsignedAccelerated;
	VkBool32 integerDotProduct16BitSignedAccelerated;
	VkBool32 integerDotProduct16BitMixedSignednessAccelerated;
	VkBool32 integerDotProduct32BitUnsignedAccelerated;
	VkBool32 integerDotProduct32BitSignedAccelerated;
	VkBool32 integerDotProduct32BitMixedSignednessAccelerated;
	VkBool32 integerDotProduct64BitUnsignedAccelerated;
	VkBool32 integerDotProduct64BitSignedAccelerated;
	VkBool32 integerDotProduct64BitMixedSignednessAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating8BitSignedAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating16BitSignedAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating32BitSignedAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating64BitSignedAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
}
struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderIntegerFunctions2;
}
struct VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderMaximalReconvergence;
}
struct VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderModuleIdentifier;
}
struct VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	uint8_t[16U] shaderModuleIdentifierAlgorithmUUID;
}
struct VkPhysicalDeviceShaderObjectFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderObject;
}
struct VkPhysicalDeviceShaderObjectPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	uint8_t[16U] shaderBinaryUUID;
	uint32_t shaderBinaryVersion;
}
struct VkPhysicalDeviceShaderQuadControlFeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderQuadControl;
}
struct VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderRelaxedExtendedInstruction;
}
struct VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderReplicatedComposites;
}
struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderSMBuiltins;
}
struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV {
	VkStructureType sType;
	void* pNext;
	uint32_t shaderSMCount;
	uint32_t shaderWarpsPerSM;
}
struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderSubgroupExtendedTypes;
}
struct VkPhysicalDeviceShaderSubgroupRotateFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderSubgroupRotate;
	VkBool32 shaderSubgroupRotateClustered;
}
struct VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderSubgroupUniformControlFlow;
}
struct VkPhysicalDeviceShaderTerminateInvocationFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderTerminateInvocation;
}
struct VkPhysicalDeviceShaderTileImageFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderTileImageColorReadAccess;
	VkBool32 shaderTileImageDepthReadAccess;
	VkBool32 shaderTileImageStencilReadAccess;
}
struct VkPhysicalDeviceShaderTileImagePropertiesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderTileImageCoherentReadAccelerated;
	VkBool32 shaderTileImageReadSampleFromPixelRateInvocation;
	VkBool32 shaderTileImageReadFromHelperInvocation;
}
struct VkPhysicalDeviceShadingRateImageFeaturesNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 shadingRateImage;
	VkBool32 shadingRateCoarseSampleOrder;
}
struct VkPhysicalDeviceShadingRateImagePropertiesNV {
	VkStructureType sType;
	void* pNext;
	VkExtent2D shadingRateTexelSize;
	uint32_t shadingRatePaletteSize;
	uint32_t shadingRateMaxCoarseSamples;
}
struct VkPhysicalDeviceSparseImageFormatInfo2 {
	VkStructureType sType;
	void* pNext;
	VkFormat format;
	VkImageType type;
	VkSampleCountFlagBits samples;
	VkImageUsageFlags usage;
	VkImageTiling tiling;
}
struct VkPhysicalDeviceSparseProperties {
	VkBool32 residencyStandard2DBlockShape;
	VkBool32 residencyStandard2DMultisampleBlockShape;
	VkBool32 residencyStandard3DBlockShape;
	VkBool32 residencyAlignedMipSize;
	VkBool32 residencyNonResidentStrict;
}
struct VkPhysicalDeviceSubgroupProperties {
	VkStructureType sType;
	void* pNext;
	uint32_t subgroupSize;
	VkShaderStageFlags supportedStages;
	VkSubgroupFeatureFlags supportedOperations;
	VkBool32 quadOperationsInAllStages;
}
struct VkPhysicalDeviceSubgroupSizeControlFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 subgroupSizeControl;
	VkBool32 computeFullSubgroups;
}
struct VkPhysicalDeviceSubgroupSizeControlProperties {
	VkStructureType sType;
	void* pNext;
	uint32_t minSubgroupSize;
	uint32_t maxSubgroupSize;
	uint32_t maxComputeWorkgroupSubgroups;
	VkShaderStageFlags requiredSubgroupSizeStages;
}
struct VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 subpassMergeFeedback;
}
struct VkPhysicalDeviceSubpassShadingFeaturesHUAWEI {
	VkStructureType sType;
	void* pNext;
	VkBool32 subpassShading;
}
struct VkPhysicalDeviceSubpassShadingPropertiesHUAWEI {
	VkStructureType sType;
	void* pNext;
	uint32_t maxSubpassShadingWorkgroupSizeAspectRatio;
}
struct VkPhysicalDeviceSurfaceInfo2KHR {
	VkStructureType sType;
	void* pNext;
	VkSurfaceKHR surface;
}
struct VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 swapchainMaintenance1;
}
struct VkPhysicalDeviceSynchronization2Features {
	VkStructureType sType;
	void* pNext;
	VkBool32 synchronization2;
}
struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 texelBufferAlignment;
}
struct VkPhysicalDeviceTexelBufferAlignmentProperties {
	VkStructureType sType;
	void* pNext;
	VkDeviceSize storageTexelBufferOffsetAlignmentBytes;
	VkBool32 storageTexelBufferOffsetSingleTexelAlignment;
	VkDeviceSize uniformTexelBufferOffsetAlignmentBytes;
	VkBool32 uniformTexelBufferOffsetSingleTexelAlignment;
}
struct VkPhysicalDeviceTextureCompressionASTCHDRFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 textureCompressionASTC_HDR;
}
struct VkPhysicalDeviceTilePropertiesFeaturesQCOM {
	VkStructureType sType;
	void* pNext;
	VkBool32 tileProperties;
}
struct VkPhysicalDeviceTimelineSemaphoreFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 timelineSemaphore;
}
struct VkPhysicalDeviceTimelineSemaphoreProperties {
	VkStructureType sType;
	void* pNext;
	uint64_t maxTimelineSemaphoreValueDifference;
}
struct VkPhysicalDeviceToolProperties {
	VkStructureType sType;
	void* pNext;
	char[256U] name;
	char[256U] version_;
	VkToolPurposeFlags purposes;
	char[256U] description;
	char[256U] layer;
}
struct VkPhysicalDeviceTransformFeedbackFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 transformFeedback;
	VkBool32 geometryStreams;
}
struct VkPhysicalDeviceTransformFeedbackPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t maxTransformFeedbackStreams;
	uint32_t maxTransformFeedbackBuffers;
	VkDeviceSize maxTransformFeedbackBufferSize;
	uint32_t maxTransformFeedbackStreamDataSize;
	uint32_t maxTransformFeedbackBufferDataSize;
	uint32_t maxTransformFeedbackBufferDataStride;
	VkBool32 transformFeedbackQueries;
	VkBool32 transformFeedbackStreamsLinesTriangles;
	VkBool32 transformFeedbackRasterizationStreamSelect;
	VkBool32 transformFeedbackDraw;
}
struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 uniformBufferStandardLayout;
}
struct VkPhysicalDeviceVariablePointersFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 variablePointersStorageBuffer;
	VkBool32 variablePointers;
}
struct VkPhysicalDeviceVertexAttributeDivisorFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 vertexAttributeInstanceRateDivisor;
	VkBool32 vertexAttributeInstanceRateZeroDivisor;
}
struct VkPhysicalDeviceVertexAttributeDivisorProperties {
	VkStructureType sType;
	void* pNext;
	uint32_t maxVertexAttribDivisor;
	VkBool32 supportsNonZeroFirstInstance;
}
struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t maxVertexAttribDivisor;
}
struct VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 vertexAttributeRobustness;
}
struct VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 vertexInputDynamicState;
}
struct VkPhysicalDeviceVideoEncodeAV1FeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 videoEncodeAV1;
}
struct VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoProfileInfoKHR* pVideoProfile;
	uint32_t qualityLevel;
}
struct VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 videoEncodeQuantizationMap;
}
struct VkPhysicalDeviceVideoFormatInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkImageUsageFlags imageUsage;
}
struct VkPhysicalDeviceVideoMaintenance1FeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 videoMaintenance1;
}
struct VkPhysicalDeviceVideoMaintenance2FeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 videoMaintenance2;
}
struct VkPhysicalDeviceVulkan11Features {
	VkStructureType sType;
	void* pNext;
	VkBool32 storageBuffer16BitAccess;
	VkBool32 uniformAndStorageBuffer16BitAccess;
	VkBool32 storagePushConstant16;
	VkBool32 storageInputOutput16;
	VkBool32 multiview;
	VkBool32 multiviewGeometryShader;
	VkBool32 multiviewTessellationShader;
	VkBool32 variablePointersStorageBuffer;
	VkBool32 variablePointers;
	VkBool32 protectedMemory;
	VkBool32 samplerYcbcrConversion;
	VkBool32 shaderDrawParameters;
}
struct VkPhysicalDeviceVulkan11Properties {
	VkStructureType sType;
	void* pNext;
	uint8_t[16U] deviceUUID;
	uint8_t[16U] driverUUID;
	uint8_t[8U] deviceLUID;
	uint32_t deviceNodeMask;
	VkBool32 deviceLUIDValid;
	uint32_t subgroupSize;
	VkShaderStageFlags subgroupSupportedStages;
	VkSubgroupFeatureFlags subgroupSupportedOperations;
	VkBool32 subgroupQuadOperationsInAllStages;
	VkPointClippingBehavior pointClippingBehavior;
	uint32_t maxMultiviewViewCount;
	uint32_t maxMultiviewInstanceIndex;
	VkBool32 protectedNoFault;
	uint32_t maxPerSetDescriptors;
	VkDeviceSize maxMemoryAllocationSize;
}
struct VkPhysicalDeviceVulkan12Features {
	VkStructureType sType;
	void* pNext;
	VkBool32 samplerMirrorClampToEdge;
	VkBool32 drawIndirectCount;
	VkBool32 storageBuffer8BitAccess;
	VkBool32 uniformAndStorageBuffer8BitAccess;
	VkBool32 storagePushConstant8;
	VkBool32 shaderBufferInt64Atomics;
	VkBool32 shaderSharedInt64Atomics;
	VkBool32 shaderFloat16;
	VkBool32 shaderInt8;
	VkBool32 descriptorIndexing;
	VkBool32 shaderInputAttachmentArrayDynamicIndexing;
	VkBool32 shaderUniformTexelBufferArrayDynamicIndexing;
	VkBool32 shaderStorageTexelBufferArrayDynamicIndexing;
	VkBool32 shaderUniformBufferArrayNonUniformIndexing;
	VkBool32 shaderSampledImageArrayNonUniformIndexing;
	VkBool32 shaderStorageBufferArrayNonUniformIndexing;
	VkBool32 shaderStorageImageArrayNonUniformIndexing;
	VkBool32 shaderInputAttachmentArrayNonUniformIndexing;
	VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing;
	VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing;
	VkBool32 descriptorBindingUniformBufferUpdateAfterBind;
	VkBool32 descriptorBindingSampledImageUpdateAfterBind;
	VkBool32 descriptorBindingStorageImageUpdateAfterBind;
	VkBool32 descriptorBindingStorageBufferUpdateAfterBind;
	VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind;
	VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind;
	VkBool32 descriptorBindingUpdateUnusedWhilePending;
	VkBool32 descriptorBindingPartiallyBound;
	VkBool32 descriptorBindingVariableDescriptorCount;
	VkBool32 runtimeDescriptorArray;
	VkBool32 samplerFilterMinmax;
	VkBool32 scalarBlockLayout;
	VkBool32 imagelessFramebuffer;
	VkBool32 uniformBufferStandardLayout;
	VkBool32 shaderSubgroupExtendedTypes;
	VkBool32 separateDepthStencilLayouts;
	VkBool32 hostQueryReset;
	VkBool32 timelineSemaphore;
	VkBool32 bufferDeviceAddress;
	VkBool32 bufferDeviceAddressCaptureReplay;
	VkBool32 bufferDeviceAddressMultiDevice;
	VkBool32 vulkanMemoryModel;
	VkBool32 vulkanMemoryModelDeviceScope;
	VkBool32 vulkanMemoryModelAvailabilityVisibilityChains;
	VkBool32 shaderOutputViewportIndex;
	VkBool32 shaderOutputLayer;
	VkBool32 subgroupBroadcastDynamicId;
}
struct VkPhysicalDeviceVulkan12Properties {
	VkStructureType sType;
	void* pNext;
	VkDriverId driverID;
	char[256U] driverName;
	char[256U] driverInfo;
	VkConformanceVersion conformanceVersion;
	VkShaderFloatControlsIndependence denormBehaviorIndependence;
	VkShaderFloatControlsIndependence roundingModeIndependence;
	VkBool32 shaderSignedZeroInfNanPreserveFloat16;
	VkBool32 shaderSignedZeroInfNanPreserveFloat32;
	VkBool32 shaderSignedZeroInfNanPreserveFloat64;
	VkBool32 shaderDenormPreserveFloat16;
	VkBool32 shaderDenormPreserveFloat32;
	VkBool32 shaderDenormPreserveFloat64;
	VkBool32 shaderDenormFlushToZeroFloat16;
	VkBool32 shaderDenormFlushToZeroFloat32;
	VkBool32 shaderDenormFlushToZeroFloat64;
	VkBool32 shaderRoundingModeRTEFloat16;
	VkBool32 shaderRoundingModeRTEFloat32;
	VkBool32 shaderRoundingModeRTEFloat64;
	VkBool32 shaderRoundingModeRTZFloat16;
	VkBool32 shaderRoundingModeRTZFloat32;
	VkBool32 shaderRoundingModeRTZFloat64;
	uint32_t maxUpdateAfterBindDescriptorsInAllPools;
	VkBool32 shaderUniformBufferArrayNonUniformIndexingNative;
	VkBool32 shaderSampledImageArrayNonUniformIndexingNative;
	VkBool32 shaderStorageBufferArrayNonUniformIndexingNative;
	VkBool32 shaderStorageImageArrayNonUniformIndexingNative;
	VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative;
	VkBool32 robustBufferAccessUpdateAfterBind;
	VkBool32 quadDivergentImplicitLod;
	uint32_t maxPerStageDescriptorUpdateAfterBindSamplers;
	uint32_t maxPerStageDescriptorUpdateAfterBindUniformBuffers;
	uint32_t maxPerStageDescriptorUpdateAfterBindStorageBuffers;
	uint32_t maxPerStageDescriptorUpdateAfterBindSampledImages;
	uint32_t maxPerStageDescriptorUpdateAfterBindStorageImages;
	uint32_t maxPerStageDescriptorUpdateAfterBindInputAttachments;
	uint32_t maxPerStageUpdateAfterBindResources;
	uint32_t maxDescriptorSetUpdateAfterBindSamplers;
	uint32_t maxDescriptorSetUpdateAfterBindUniformBuffers;
	uint32_t maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
	uint32_t maxDescriptorSetUpdateAfterBindStorageBuffers;
	uint32_t maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
	uint32_t maxDescriptorSetUpdateAfterBindSampledImages;
	uint32_t maxDescriptorSetUpdateAfterBindStorageImages;
	uint32_t maxDescriptorSetUpdateAfterBindInputAttachments;
	VkResolveModeFlags supportedDepthResolveModes;
	VkResolveModeFlags supportedStencilResolveModes;
	VkBool32 independentResolveNone;
	VkBool32 independentResolve;
	VkBool32 filterMinmaxSingleComponentFormats;
	VkBool32 filterMinmaxImageComponentMapping;
	uint64_t maxTimelineSemaphoreValueDifference;
	VkSampleCountFlags framebufferIntegerColorSampleCounts;
}
struct VkPhysicalDeviceVulkan13Features {
	VkStructureType sType;
	void* pNext;
	VkBool32 robustImageAccess;
	VkBool32 inlineUniformBlock;
	VkBool32 descriptorBindingInlineUniformBlockUpdateAfterBind;
	VkBool32 pipelineCreationCacheControl;
	VkBool32 privateData;
	VkBool32 shaderDemoteToHelperInvocation;
	VkBool32 shaderTerminateInvocation;
	VkBool32 subgroupSizeControl;
	VkBool32 computeFullSubgroups;
	VkBool32 synchronization2;
	VkBool32 textureCompressionASTC_HDR;
	VkBool32 shaderZeroInitializeWorkgroupMemory;
	VkBool32 dynamicRendering;
	VkBool32 shaderIntegerDotProduct;
	VkBool32 maintenance4;
}
struct VkPhysicalDeviceVulkan13Properties {
	VkStructureType sType;
	void* pNext;
	uint32_t minSubgroupSize;
	uint32_t maxSubgroupSize;
	uint32_t maxComputeWorkgroupSubgroups;
	VkShaderStageFlags requiredSubgroupSizeStages;
	uint32_t maxInlineUniformBlockSize;
	uint32_t maxPerStageDescriptorInlineUniformBlocks;
	uint32_t maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
	uint32_t maxDescriptorSetInlineUniformBlocks;
	uint32_t maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
	uint32_t maxInlineUniformTotalSize;
	VkBool32 integerDotProduct8BitUnsignedAccelerated;
	VkBool32 integerDotProduct8BitSignedAccelerated;
	VkBool32 integerDotProduct8BitMixedSignednessAccelerated;
	VkBool32 integerDotProduct4x8BitPackedUnsignedAccelerated;
	VkBool32 integerDotProduct4x8BitPackedSignedAccelerated;
	VkBool32 integerDotProduct4x8BitPackedMixedSignednessAccelerated;
	VkBool32 integerDotProduct16BitUnsignedAccelerated;
	VkBool32 integerDotProduct16BitSignedAccelerated;
	VkBool32 integerDotProduct16BitMixedSignednessAccelerated;
	VkBool32 integerDotProduct32BitUnsignedAccelerated;
	VkBool32 integerDotProduct32BitSignedAccelerated;
	VkBool32 integerDotProduct32BitMixedSignednessAccelerated;
	VkBool32 integerDotProduct64BitUnsignedAccelerated;
	VkBool32 integerDotProduct64BitSignedAccelerated;
	VkBool32 integerDotProduct64BitMixedSignednessAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating8BitSignedAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating16BitSignedAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating32BitSignedAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating64BitSignedAccelerated;
	VkBool32 integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
	VkDeviceSize storageTexelBufferOffsetAlignmentBytes;
	VkBool32 storageTexelBufferOffsetSingleTexelAlignment;
	VkDeviceSize uniformTexelBufferOffsetAlignmentBytes;
	VkBool32 uniformTexelBufferOffsetSingleTexelAlignment;
	VkDeviceSize maxBufferSize;
}
struct VkPhysicalDeviceVulkan14Features {
	VkStructureType sType;
	void* pNext;
	VkBool32 globalPriorityQuery;
	VkBool32 shaderSubgroupRotate;
	VkBool32 shaderSubgroupRotateClustered;
	VkBool32 shaderFloatControls2;
	VkBool32 shaderExpectAssume;
	VkBool32 rectangularLines;
	VkBool32 bresenhamLines;
	VkBool32 smoothLines;
	VkBool32 stippledRectangularLines;
	VkBool32 stippledBresenhamLines;
	VkBool32 stippledSmoothLines;
	VkBool32 vertexAttributeInstanceRateDivisor;
	VkBool32 vertexAttributeInstanceRateZeroDivisor;
	VkBool32 indexTypeUint8;
	VkBool32 dynamicRenderingLocalRead;
	VkBool32 maintenance5;
	VkBool32 maintenance6;
	VkBool32 pipelineProtectedAccess;
	VkBool32 pipelineRobustness;
	VkBool32 hostImageCopy;
	VkBool32 pushDescriptor;
}
struct VkPhysicalDeviceVulkan14Properties {
	VkStructureType sType;
	void* pNext;
	uint32_t lineSubPixelPrecisionBits;
	uint32_t maxVertexAttribDivisor;
	VkBool32 supportsNonZeroFirstInstance;
	uint32_t maxPushDescriptors;
	VkBool32 dynamicRenderingLocalReadDepthStencilAttachments;
	VkBool32 dynamicRenderingLocalReadMultisampledAttachments;
	VkBool32 earlyFragmentMultisampleCoverageAfterSampleCounting;
	VkBool32 earlyFragmentSampleMaskTestBeforeSampleCounting;
	VkBool32 depthStencilSwizzleOneSupport;
	VkBool32 polygonModePointSize;
	VkBool32 nonStrictSinglePixelWideLinesUseParallelogram;
	VkBool32 nonStrictWideLinesUseParallelogram;
	VkBool32 blockTexelViewCompatibleMultipleLayers;
	uint32_t maxCombinedImageSamplerDescriptorCount;
	VkBool32 fragmentShadingRateClampCombinerInputs;
	VkPipelineRobustnessBufferBehavior defaultRobustnessStorageBuffers;
	VkPipelineRobustnessBufferBehavior defaultRobustnessUniformBuffers;
	VkPipelineRobustnessBufferBehavior defaultRobustnessVertexInputs;
	VkPipelineRobustnessImageBehavior defaultRobustnessImages;
	uint32_t copySrcLayoutCount;
	VkImageLayout* pCopySrcLayouts;
	uint32_t copyDstLayoutCount;
	VkImageLayout* pCopyDstLayouts;
	uint8_t[16U] optimalTilingLayoutUUID;
	VkBool32 identicalMemoryTypeRequirements;
}
struct VkPhysicalDeviceVulkanMemoryModelFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 vulkanMemoryModel;
	VkBool32 vulkanMemoryModelDeviceScope;
	VkBool32 vulkanMemoryModelAvailabilityVisibilityChains;
}
struct VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 workgroupMemoryExplicitLayout;
	VkBool32 workgroupMemoryExplicitLayoutScalarBlockLayout;
	VkBool32 workgroupMemoryExplicitLayout8BitAccess;
	VkBool32 workgroupMemoryExplicitLayout16BitAccess;
}
struct VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 ycbcr2plane444Formats;
}
struct VkPhysicalDeviceYcbcrDegammaFeaturesQCOM {
	VkStructureType sType;
	void* pNext;
	VkBool32 ycbcrDegamma;
}
struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 ycbcrImageArrays;
}
struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures {
	VkStructureType sType;
	void* pNext;
	VkBool32 shaderZeroInitializeWorkgroupMemory;
}
struct VkPhysicalDevice_T {
}
struct VkPipelineBinaryCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkPipelineBinaryKeysAndDataKHR* pKeysAndDataInfo;
	VkPipeline pipeline;
	VkPipelineCreateInfoKHR* pPipelineCreateInfo;
}
struct VkPipelineBinaryDataInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkPipelineBinaryKHR pipelineBinary;
}
struct VkPipelineBinaryDataKHR {
	size_t dataSize;
	void* pData;
}
struct VkPipelineBinaryHandlesInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t pipelineBinaryCount;
	VkPipelineBinaryKHR* pPipelineBinaries;
}
struct VkPipelineBinaryInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t binaryCount;
	VkPipelineBinaryKHR* pPipelineBinaries;
}
struct VkPipelineBinaryKHR_T {
}
struct VkPipelineBinaryKeyKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t keySize;
	uint8_t[32U] key;
}
struct VkPipelineBinaryKeysAndDataKHR {
	uint32_t binaryCount;
	VkPipelineBinaryKeyKHR* pPipelineBinaryKeys;
	VkPipelineBinaryDataKHR* pPipelineBinaryData;
}
struct VkPipelineCacheCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkPipelineCacheCreateFlags flags;
	size_t initialDataSize;
	void* pInitialData;
}
struct VkPipelineCacheHeaderVersionOne {
	uint32_t headerSize;
	VkPipelineCacheHeaderVersion headerVersion;
	uint32_t vendorID;
	uint32_t deviceID;
	uint8_t[16U] pipelineCacheUUID;
}
struct VkPipelineCache_T {
}
struct VkPipelineColorBlendAdvancedStateCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 srcPremultiplied;
	VkBool32 dstPremultiplied;
	VkBlendOverlapEXT blendOverlap;
}
struct VkPipelineColorBlendAttachmentState {
	VkBool32 blendEnable;
	VkBlendFactor srcColorBlendFactor;
	VkBlendFactor dstColorBlendFactor;
	VkBlendOp colorBlendOp;
	VkBlendFactor srcAlphaBlendFactor;
	VkBlendFactor dstAlphaBlendFactor;
	VkBlendOp alphaBlendOp;
	VkColorComponentFlags colorWriteMask;
}
struct VkPipelineColorBlendStateCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkPipelineColorBlendStateCreateFlags flags;
	VkBool32 logicOpEnable;
	VkLogicOp logicOp;
	uint32_t attachmentCount;
	VkPipelineColorBlendAttachmentState* pAttachments;
	float[4] blendConstants;
}
struct VkPipelineColorWriteCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t attachmentCount;
	VkBool32* pColorWriteEnables;
}
struct VkPipelineCompilerControlCreateInfoAMD {
	VkStructureType sType;
	void* pNext;
	VkPipelineCompilerControlFlagsAMD compilerControlFlags;
}
struct VkPipelineCoverageModulationStateCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	VkPipelineCoverageModulationStateCreateFlagsNV flags;
	VkCoverageModulationModeNV coverageModulationMode;
	VkBool32 coverageModulationTableEnable;
	uint32_t coverageModulationTableCount;
	float* pCoverageModulationTable;
}
struct VkPipelineCoverageReductionStateCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	VkPipelineCoverageReductionStateCreateFlagsNV flags;
	VkCoverageReductionModeNV coverageReductionMode;
}
struct VkPipelineCoverageToColorStateCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	VkPipelineCoverageToColorStateCreateFlagsNV flags;
	VkBool32 coverageToColorEnable;
	uint32_t coverageToColorLocation;
}
struct VkPipelineCreateFlags2CreateInfo {
	VkStructureType sType;
	void* pNext;
	VkPipelineCreateFlags2 flags;
}
struct VkPipelineCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
}
struct VkPipelineCreationFeedback {
	VkPipelineCreationFeedbackFlags flags;
	uint64_t duration;
}
struct VkPipelineCreationFeedbackCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkPipelineCreationFeedback* pPipelineCreationFeedback;
	uint32_t pipelineStageCreationFeedbackCount;
	VkPipelineCreationFeedback* pPipelineStageCreationFeedbacks;
}
struct VkPipelineDepthStencilStateCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkPipelineDepthStencilStateCreateFlags flags;
	VkBool32 depthTestEnable;
	VkBool32 depthWriteEnable;
	VkCompareOp depthCompareOp;
	VkBool32 depthBoundsTestEnable;
	VkBool32 stencilTestEnable;
	VkStencilOpState front;
	VkStencilOpState back;
	float minDepthBounds;
	float maxDepthBounds;
}
struct VkPipelineDiscardRectangleStateCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkPipelineDiscardRectangleStateCreateFlagsEXT flags;
	VkDiscardRectangleModeEXT discardRectangleMode;
	uint32_t discardRectangleCount;
	VkRect2D* pDiscardRectangles;
}
struct VkPipelineDynamicStateCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkPipelineDynamicStateCreateFlags flags;
	uint32_t dynamicStateCount;
	VkDynamicState* pDynamicStates;
}
struct VkPipelineExecutableInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkPipeline pipeline;
	uint32_t executableIndex;
}
struct VkPipelineExecutableInternalRepresentationKHR {
	VkStructureType sType;
	void* pNext;
	char[256U] name;
	char[256U] description;
	VkBool32 isText;
	size_t dataSize;
	void* pData;
}
struct VkPipelineExecutablePropertiesKHR {
	VkStructureType sType;
	void* pNext;
	VkShaderStageFlags stages;
	char[256U] name;
	char[256U] description;
	uint32_t subgroupSize;
}
struct VkPipelineExecutableStatisticKHR {
	VkStructureType sType;
	void* pNext;
	char[256U] name;
	char[256U] description;
	VkPipelineExecutableStatisticFormatKHR format;
	VkPipelineExecutableStatisticValueKHR value;
}
struct VkPipelineFragmentShadingRateEnumStateCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	VkFragmentShadingRateTypeNV shadingRateType;
	VkFragmentShadingRateNV shadingRate;
	VkFragmentShadingRateCombinerOpKHR[2] combinerOps;
}
struct VkPipelineFragmentShadingRateStateCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkExtent2D fragmentSize;
	VkFragmentShadingRateCombinerOpKHR[2] combinerOps;
}
struct VkPipelineIndirectDeviceAddressInfoNV {
	VkStructureType sType;
	void* pNext;
	VkPipelineBindPoint pipelineBindPoint;
	VkPipeline pipeline;
}
struct VkPipelineInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkPipeline pipeline;
}
struct VkPipelineInputAssemblyStateCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkPipelineInputAssemblyStateCreateFlags flags;
	VkPrimitiveTopology topology;
	VkBool32 primitiveRestartEnable;
}
struct VkPipelineLayoutCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkPipelineLayoutCreateFlags flags;
	uint32_t setLayoutCount;
	VkDescriptorSetLayout* pSetLayouts;
	uint32_t pushConstantRangeCount;
	VkPushConstantRange* pPushConstantRanges;
}
struct VkPipelineLayout_T {
}
struct VkPipelineLibraryCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t libraryCount;
	VkPipeline* pLibraries;
}
struct VkPipelineMultisampleStateCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkPipelineMultisampleStateCreateFlags flags;
	VkSampleCountFlagBits rasterizationSamples;
	VkBool32 sampleShadingEnable;
	float minSampleShading;
	VkSampleMask* pSampleMask;
	VkBool32 alphaToCoverageEnable;
	VkBool32 alphaToOneEnable;
}
struct VkPipelinePropertiesIdentifierEXT {
	VkStructureType sType;
	void* pNext;
	uint8_t[16U] pipelineIdentifier;
}
struct VkPipelineRasterizationConservativeStateCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkPipelineRasterizationConservativeStateCreateFlagsEXT flags;
	VkConservativeRasterizationModeEXT conservativeRasterizationMode;
	float extraPrimitiveOverestimationSize;
}
struct VkPipelineRasterizationDepthClipStateCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkPipelineRasterizationDepthClipStateCreateFlagsEXT flags;
	VkBool32 depthClipEnable;
}
struct VkPipelineRasterizationLineStateCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkLineRasterizationMode lineRasterizationMode;
	VkBool32 stippledLineEnable;
	uint32_t lineStippleFactor;
	uint16_t lineStipplePattern;
}
struct VkPipelineRasterizationProvokingVertexStateCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkProvokingVertexModeEXT provokingVertexMode;
}
struct VkPipelineRasterizationStateCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkPipelineRasterizationStateCreateFlags flags;
	VkBool32 depthClampEnable;
	VkBool32 rasterizerDiscardEnable;
	VkPolygonMode polygonMode;
	VkCullModeFlags cullMode;
	VkFrontFace frontFace;
	VkBool32 depthBiasEnable;
	float depthBiasConstantFactor;
	float depthBiasClamp;
	float depthBiasSlopeFactor;
	float lineWidth;
}
struct VkPipelineRasterizationStateRasterizationOrderAMD {
	VkStructureType sType;
	void* pNext;
	VkRasterizationOrderAMD rasterizationOrder;
}
struct VkPipelineRasterizationStateStreamCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkPipelineRasterizationStateStreamCreateFlagsEXT flags;
	uint32_t rasterizationStream;
}
struct VkPipelineRenderingCreateInfo {
	VkStructureType sType;
	void* pNext;
	uint32_t viewMask;
	uint32_t colorAttachmentCount;
	VkFormat* pColorAttachmentFormats;
	VkFormat depthAttachmentFormat;
	VkFormat stencilAttachmentFormat;
}
struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 representativeFragmentTestEnable;
}
struct VkPipelineRobustnessCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkPipelineRobustnessBufferBehavior storageBuffers;
	VkPipelineRobustnessBufferBehavior uniformBuffers;
	VkPipelineRobustnessBufferBehavior vertexInputs;
	VkPipelineRobustnessImageBehavior images;
}
struct VkPipelineSampleLocationsStateCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 sampleLocationsEnable;
	VkSampleLocationsInfoEXT sampleLocationsInfo;
}
struct VkPipelineShaderStageCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkPipelineShaderStageCreateFlags flags;
	VkShaderStageFlagBits stage;
	VkShaderModule module_;
	immutable(char)* pName;
	VkSpecializationInfo* pSpecializationInfo;
}
struct VkPipelineShaderStageModuleIdentifierCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t identifierSize;
	uint8_t* pIdentifier;
}
struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo {
	VkStructureType sType;
	void* pNext;
	uint32_t requiredSubgroupSize;
}
struct VkPipelineTessellationDomainOriginStateCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkTessellationDomainOrigin domainOrigin;
}
struct VkPipelineTessellationStateCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkPipelineTessellationStateCreateFlags flags;
	uint32_t patchControlPoints;
}
struct VkPipelineVertexInputDivisorStateCreateInfo {
	VkStructureType sType;
	void* pNext;
	uint32_t vertexBindingDivisorCount;
	VkVertexInputBindingDivisorDescription* pVertexBindingDivisors;
}
struct VkPipelineVertexInputStateCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkPipelineVertexInputStateCreateFlags flags;
	uint32_t vertexBindingDescriptionCount;
	VkVertexInputBindingDescription* pVertexBindingDescriptions;
	uint32_t vertexAttributeDescriptionCount;
	VkVertexInputAttributeDescription* pVertexAttributeDescriptions;
}
struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	VkCoarseSampleOrderTypeNV sampleOrderType;
	uint32_t customSampleOrderCount;
	VkCoarseSampleOrderCustomNV* pCustomSampleOrders;
}
struct VkPipelineViewportDepthClampControlCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkDepthClampModeEXT depthClampMode;
	VkDepthClampRangeEXT* pDepthClampRange;
}
struct VkPipelineViewportDepthClipControlCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 negativeOneToOne;
}
struct VkPipelineViewportExclusiveScissorStateCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	uint32_t exclusiveScissorCount;
	VkRect2D* pExclusiveScissors;
}
struct VkPipelineViewportShadingRateImageStateCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 shadingRateImageEnable;
	uint32_t viewportCount;
	VkShadingRatePaletteNV* pShadingRatePalettes;
}
struct VkPipelineViewportStateCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkPipelineViewportStateCreateFlags flags;
	uint32_t viewportCount;
	VkViewport* pViewports;
	uint32_t scissorCount;
	VkRect2D* pScissors;
}
struct VkPipelineViewportSwizzleStateCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	VkPipelineViewportSwizzleStateCreateFlagsNV flags;
	uint32_t viewportCount;
	VkViewportSwizzleNV* pViewportSwizzles;
}
struct VkPipelineViewportWScalingStateCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 viewportWScalingEnable;
	uint32_t viewportCount;
	VkViewportWScalingNV* pViewportWScalings;
}
struct VkPipeline_T {
}
struct VkPresentIdKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t swapchainCount;
	uint64_t* pPresentIds;
}
struct VkPresentInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t waitSemaphoreCount;
	VkSemaphore* pWaitSemaphores;
	uint32_t swapchainCount;
	VkSwapchainKHR* pSwapchains;
	uint32_t* pImageIndices;
	VkResult* pResults;
}
struct VkPresentRegionKHR {
	uint32_t rectangleCount;
	VkRectLayerKHR* pRectangles;
}
struct VkPresentRegionsKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t swapchainCount;
	VkPresentRegionKHR* pRegions;
}
struct VkPresentTimeGOOGLE {
	uint32_t presentID;
	uint64_t desiredPresentTime;
}
struct VkPresentTimesInfoGOOGLE {
	VkStructureType sType;
	void* pNext;
	uint32_t swapchainCount;
	VkPresentTimeGOOGLE* pTimes;
}
struct VkPrivateDataSlotCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkPrivateDataSlotCreateFlags flags;
}
struct VkPrivateDataSlot_T {
}
struct VkProtectedSubmitInfo {
	VkStructureType sType;
	void* pNext;
	VkBool32 protectedSubmit;
}
struct VkPushConstantRange {
	VkShaderStageFlags stageFlags;
	uint32_t offset;
	uint32_t size;
}
struct VkPushConstantsInfo {
	VkStructureType sType;
	void* pNext;
	VkPipelineLayout layout;
	VkShaderStageFlags stageFlags;
	uint32_t offset;
	uint32_t size;
	void* pValues;
}
struct VkPushDescriptorSetInfo {
	VkStructureType sType;
	void* pNext;
	VkShaderStageFlags stageFlags;
	VkPipelineLayout layout;
	uint32_t set;
	uint32_t descriptorWriteCount;
	VkWriteDescriptorSet* pDescriptorWrites;
}
struct VkPushDescriptorSetWithTemplateInfo {
	VkStructureType sType;
	void* pNext;
	VkDescriptorUpdateTemplate descriptorUpdateTemplate;
	VkPipelineLayout layout;
	uint32_t set;
	void* pData;
}
struct VkQueryLowLatencySupportNV {
	VkStructureType sType;
	void* pNext;
	void* pQueriedLowLatencyData;
}
struct VkQueryPoolCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkQueryPoolCreateFlags flags;
	VkQueryType queryType;
	uint32_t queryCount;
	VkQueryPipelineStatisticFlags pipelineStatistics;
}
struct VkQueryPoolPerformanceCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t queueFamilyIndex;
	uint32_t counterIndexCount;
	uint32_t* pCounterIndices;
}
struct VkQueryPoolPerformanceQueryCreateInfoINTEL {
	VkStructureType sType;
	void* pNext;
	VkQueryPoolSamplingModeINTEL performanceCountersSampling;
}
struct VkQueryPoolVideoEncodeFeedbackCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoEncodeFeedbackFlagsKHR encodeFeedbackFlags;
}
struct VkQueryPool_T {
}
struct VkQueueFamilyCheckpointProperties2NV {
	VkStructureType sType;
	void* pNext;
	VkPipelineStageFlags2 checkpointExecutionStageMask;
}
struct VkQueueFamilyCheckpointPropertiesNV {
	VkStructureType sType;
	void* pNext;
	VkPipelineStageFlags checkpointExecutionStageMask;
}
struct VkQueueFamilyGlobalPriorityProperties {
	VkStructureType sType;
	void* pNext;
	uint32_t priorityCount;
	VkQueueGlobalPriority[16U] priorities;
}
struct VkQueueFamilyProperties {
	VkQueueFlags queueFlags;
	uint32_t queueCount;
	uint32_t timestampValidBits;
	VkExtent3D minImageTransferGranularity;
}
struct VkQueueFamilyProperties2 {
	VkStructureType sType;
	void* pNext;
	VkQueueFamilyProperties queueFamilyProperties;
}
struct VkQueueFamilyQueryResultStatusPropertiesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 queryResultStatusSupport;
}
struct VkQueueFamilyVideoPropertiesKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoCodecOperationFlagsKHR videoCodecOperations;
}
struct VkQueue_T {
}
struct VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 allowClusterAccelerationStructure;
}
struct VkRayTracingPipelineCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkPipelineCreateFlags flags;
	uint32_t stageCount;
	VkPipelineShaderStageCreateInfo* pStages;
	uint32_t groupCount;
	VkRayTracingShaderGroupCreateInfoKHR* pGroups;
	uint32_t maxPipelineRayRecursionDepth;
	VkPipelineLibraryCreateInfoKHR* pLibraryInfo;
	VkRayTracingPipelineInterfaceCreateInfoKHR* pLibraryInterface;
	VkPipelineDynamicStateCreateInfo* pDynamicState;
	VkPipelineLayout layout;
	VkPipeline basePipelineHandle;
	int32_t basePipelineIndex;
}
struct VkRayTracingPipelineCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	VkPipelineCreateFlags flags;
	uint32_t stageCount;
	VkPipelineShaderStageCreateInfo* pStages;
	uint32_t groupCount;
	VkRayTracingShaderGroupCreateInfoNV* pGroups;
	uint32_t maxRecursionDepth;
	VkPipelineLayout layout;
	VkPipeline basePipelineHandle;
	int32_t basePipelineIndex;
}
struct VkRayTracingPipelineInterfaceCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t maxPipelineRayPayloadSize;
	uint32_t maxPipelineRayHitAttributeSize;
}
struct VkRayTracingShaderGroupCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkRayTracingShaderGroupTypeKHR type;
	uint32_t generalShader;
	uint32_t closestHitShader;
	uint32_t anyHitShader;
	uint32_t intersectionShader;
	void* pShaderGroupCaptureReplayHandle;
}
struct VkRayTracingShaderGroupCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	VkRayTracingShaderGroupTypeKHR type;
	uint32_t generalShader;
	uint32_t closestHitShader;
	uint32_t anyHitShader;
	uint32_t intersectionShader;
}
struct VkRect2D {
	VkOffset2D offset;
	VkExtent2D extent;
}
struct VkRectLayerKHR {
	VkOffset2D offset;
	VkExtent2D extent;
	uint32_t layer;
}
struct VkRefreshCycleDurationGOOGLE {
	uint64_t refreshDuration;
}
struct VkReleaseCapturedPipelineDataInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkPipeline pipeline;
}
struct VkReleaseSwapchainImagesInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkSwapchainKHR swapchain;
	uint32_t imageIndexCount;
	uint32_t* pImageIndices;
}
struct VkRenderPassAttachmentBeginInfo {
	VkStructureType sType;
	void* pNext;
	uint32_t attachmentCount;
	VkImageView* pAttachments;
}
struct VkRenderPassBeginInfo {
	VkStructureType sType;
	void* pNext;
	VkRenderPass renderPass;
	VkFramebuffer framebuffer;
	VkRect2D renderArea;
	uint32_t clearValueCount;
	VkClearValue* pClearValues;
}
struct VkRenderPassCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkRenderPassCreateFlags flags;
	uint32_t attachmentCount;
	VkAttachmentDescription* pAttachments;
	uint32_t subpassCount;
	VkSubpassDescription* pSubpasses;
	uint32_t dependencyCount;
	VkSubpassDependency* pDependencies;
}
struct VkRenderPassCreateInfo2 {
	VkStructureType sType;
	void* pNext;
	VkRenderPassCreateFlags flags;
	uint32_t attachmentCount;
	VkAttachmentDescription2* pAttachments;
	uint32_t subpassCount;
	VkSubpassDescription2* pSubpasses;
	uint32_t dependencyCount;
	VkSubpassDependency2* pDependencies;
	uint32_t correlatedViewMaskCount;
	uint32_t* pCorrelatedViewMasks;
}
struct VkRenderPassCreationControlEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 disallowMerging;
}
struct VkRenderPassCreationFeedbackCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkRenderPassCreationFeedbackInfoEXT* pRenderPassFeedback;
}
struct VkRenderPassCreationFeedbackInfoEXT {
	uint32_t postMergeSubpassCount;
}
struct VkRenderPassFragmentDensityMapCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkAttachmentReference fragmentDensityMapAttachment;
}
struct VkRenderPassInputAttachmentAspectCreateInfo {
	VkStructureType sType;
	void* pNext;
	uint32_t aspectReferenceCount;
	VkInputAttachmentAspectReference* pAspectReferences;
}
struct VkRenderPassMultiviewCreateInfo {
	VkStructureType sType;
	void* pNext;
	uint32_t subpassCount;
	uint32_t* pViewMasks;
	uint32_t dependencyCount;
	int32_t* pViewOffsets;
	uint32_t correlationMaskCount;
	uint32_t* pCorrelationMasks;
}
struct VkRenderPassSampleLocationsBeginInfoEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t attachmentInitialSampleLocationsCount;
	VkAttachmentSampleLocationsEXT* pAttachmentInitialSampleLocations;
	uint32_t postSubpassSampleLocationsCount;
	VkSubpassSampleLocationsEXT* pPostSubpassSampleLocations;
}
struct VkRenderPassStripeBeginInfoARM {
	VkStructureType sType;
	void* pNext;
	uint32_t stripeInfoCount;
	VkRenderPassStripeInfoARM* pStripeInfos;
}
struct VkRenderPassStripeInfoARM {
	VkStructureType sType;
	void* pNext;
	VkRect2D stripeArea;
}
struct VkRenderPassStripeSubmitInfoARM {
	VkStructureType sType;
	void* pNext;
	uint32_t stripeSemaphoreInfoCount;
	VkSemaphoreSubmitInfo* pStripeSemaphoreInfos;
}
struct VkRenderPassSubpassFeedbackCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkRenderPassSubpassFeedbackInfoEXT* pSubpassFeedback;
}
struct VkRenderPassSubpassFeedbackInfoEXT {
	VkSubpassMergeStatusEXT subpassMergeStatus;
	char[256U] description;
	uint32_t postMergeIndex;
}
struct VkRenderPassTransformBeginInfoQCOM {
	VkStructureType sType;
	void* pNext;
	VkSurfaceTransformFlagBitsKHR transform;
}
struct VkRenderPass_T {
}
struct VkRenderingAreaInfo {
	VkStructureType sType;
	void* pNext;
	uint32_t viewMask;
	uint32_t colorAttachmentCount;
	VkFormat* pColorAttachmentFormats;
	VkFormat depthAttachmentFormat;
	VkFormat stencilAttachmentFormat;
}
struct VkRenderingAttachmentInfo {
	VkStructureType sType;
	void* pNext;
	VkImageView imageView;
	VkImageLayout imageLayout;
	VkResolveModeFlagBits resolveMode;
	VkImageView resolveImageView;
	VkImageLayout resolveImageLayout;
	VkAttachmentLoadOp loadOp;
	VkAttachmentStoreOp storeOp;
	VkClearValue clearValue;
}
struct VkRenderingAttachmentLocationInfo {
	VkStructureType sType;
	void* pNext;
	uint32_t colorAttachmentCount;
	uint32_t* pColorAttachmentLocations;
}
struct VkRenderingFragmentDensityMapAttachmentInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkImageView imageView;
	VkImageLayout imageLayout;
}
struct VkRenderingFragmentShadingRateAttachmentInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkImageView imageView;
	VkImageLayout imageLayout;
	VkExtent2D shadingRateAttachmentTexelSize;
}
struct VkRenderingInfo {
	VkStructureType sType;
	void* pNext;
	VkRenderingFlags flags;
	VkRect2D renderArea;
	uint32_t layerCount;
	uint32_t viewMask;
	uint32_t colorAttachmentCount;
	VkRenderingAttachmentInfo* pColorAttachments;
	VkRenderingAttachmentInfo* pDepthAttachment;
	VkRenderingAttachmentInfo* pStencilAttachment;
}
struct VkRenderingInputAttachmentIndexInfo {
	VkStructureType sType;
	void* pNext;
	uint32_t colorAttachmentCount;
	uint32_t* pColorAttachmentInputIndices;
	uint32_t* pDepthInputAttachmentIndex;
	uint32_t* pStencilInputAttachmentIndex;
}
struct VkResolveImageInfo2 {
	VkStructureType sType;
	void* pNext;
	VkImage srcImage;
	VkImageLayout srcImageLayout;
	VkImage dstImage;
	VkImageLayout dstImageLayout;
	uint32_t regionCount;
	VkImageResolve2* pRegions;
}
struct VkSRTDataNV {
	float sx;
	float a;
	float b;
	float pvx;
	float sy;
	float c;
	float pvy;
	float sz;
	float pvz;
	float qx;
	float qy;
	float qz;
	float qw;
	float tx;
	float ty;
	float tz;
}
struct VkSampleLocationEXT {
	float x;
	float y;
}
struct VkSampleLocationsInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkSampleCountFlagBits sampleLocationsPerPixel;
	VkExtent2D sampleLocationGridSize;
	uint32_t sampleLocationsCount;
	VkSampleLocationEXT* pSampleLocations;
}
struct VkSamplerBlockMatchWindowCreateInfoQCOM {
	VkStructureType sType;
	void* pNext;
	VkExtent2D windowExtent;
	VkBlockMatchWindowCompareModeQCOM windowCompareMode;
}
struct VkSamplerBorderColorComponentMappingCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkComponentMapping components;
	VkBool32 srgb;
}
struct VkSamplerCaptureDescriptorDataInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkSampler sampler;
}
struct VkSamplerCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkSamplerCreateFlags flags;
	VkFilter magFilter;
	VkFilter minFilter;
	VkSamplerMipmapMode mipmapMode;
	VkSamplerAddressMode addressModeU;
	VkSamplerAddressMode addressModeV;
	VkSamplerAddressMode addressModeW;
	float mipLodBias;
	VkBool32 anisotropyEnable;
	float maxAnisotropy;
	VkBool32 compareEnable;
	VkCompareOp compareOp;
	float minLod;
	float maxLod;
	VkBorderColor borderColor;
	VkBool32 unnormalizedCoordinates;
}
struct VkSamplerCubicWeightsCreateInfoQCOM {
	VkStructureType sType;
	void* pNext;
	VkCubicFilterWeightsQCOM cubicWeights;
}
struct VkSamplerCustomBorderColorCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkClearColorValue customBorderColor;
	VkFormat format;
}
struct VkSamplerReductionModeCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkSamplerReductionMode reductionMode;
}
struct VkSamplerYcbcrConversionCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkFormat format;
	VkSamplerYcbcrModelConversion ycbcrModel;
	VkSamplerYcbcrRange ycbcrRange;
	VkComponentMapping components;
	VkChromaLocation xChromaOffset;
	VkChromaLocation yChromaOffset;
	VkFilter chromaFilter;
	VkBool32 forceExplicitReconstruction;
}
struct VkSamplerYcbcrConversionImageFormatProperties {
	VkStructureType sType;
	void* pNext;
	uint32_t combinedImageSamplerDescriptorCount;
}
struct VkSamplerYcbcrConversionInfo {
	VkStructureType sType;
	void* pNext;
	VkSamplerYcbcrConversion conversion;
}
struct VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM {
	VkStructureType sType;
	void* pNext;
	VkBool32 enableYDegamma;
	VkBool32 enableCbCrDegamma;
}
struct VkSamplerYcbcrConversion_T {
}
struct VkSampler_T {
}
struct VkSemaphoreCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkSemaphoreCreateFlags flags;
}
struct VkSemaphoreGetFdInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkSemaphore semaphore;
	VkExternalSemaphoreHandleTypeFlagBits handleType;
}
struct VkSemaphoreGetWin32HandleInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkSemaphore semaphore;
	VkExternalSemaphoreHandleTypeFlagBits handleType;
}
struct VkSemaphoreSignalInfo {
	VkStructureType sType;
	void* pNext;
	VkSemaphore semaphore;
	uint64_t value;
}
struct VkSemaphoreSubmitInfo {
	VkStructureType sType;
	void* pNext;
	VkSemaphore semaphore;
	uint64_t value;
	VkPipelineStageFlags2 stageMask;
	uint32_t deviceIndex;
}
struct VkSemaphoreTypeCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkSemaphoreType semaphoreType;
	uint64_t initialValue;
}
struct VkSemaphoreWaitInfo {
	VkStructureType sType;
	void* pNext;
	VkSemaphoreWaitFlags flags;
	uint32_t semaphoreCount;
	VkSemaphore* pSemaphores;
	uint64_t* pValues;
}
struct VkSemaphore_T {
}
struct VkSetDescriptorBufferOffsetsInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkShaderStageFlags stageFlags;
	VkPipelineLayout layout;
	uint32_t firstSet;
	uint32_t setCount;
	uint32_t* pBufferIndices;
	VkDeviceSize* pOffsets;
}
struct VkSetLatencyMarkerInfoNV {
	VkStructureType sType;
	void* pNext;
	uint64_t presentID;
	VkLatencyMarkerNV marker;
}
struct VkSetPresentConfigNV {
	VkStructureType sType;
	void* pNext;
	uint32_t numFramesPerBatch;
	uint32_t presentConfigFeedback;
}
struct VkSetStateFlagsIndirectCommandNV {
	uint32_t data;
}
struct VkShaderCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkShaderCreateFlagsEXT flags;
	VkShaderStageFlagBits stage;
	VkShaderStageFlags nextStage;
	VkShaderCodeTypeEXT codeType;
	size_t codeSize;
	void* pCode;
	immutable(char)* pName;
	uint32_t setLayoutCount;
	VkDescriptorSetLayout* pSetLayouts;
	uint32_t pushConstantRangeCount;
	VkPushConstantRange* pPushConstantRanges;
	VkSpecializationInfo* pSpecializationInfo;
}
struct VkShaderEXT_T {
}
struct VkShaderModuleCreateInfo {
	VkStructureType sType;
	void* pNext;
	VkShaderModuleCreateFlags flags;
	size_t codeSize;
	uint32_t* pCode;
}
struct VkShaderModuleIdentifierEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t identifierSize;
	uint8_t[32U] identifier;
}
struct VkShaderModuleValidationCacheCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkValidationCacheEXT validationCache;
}
struct VkShaderModule_T {
}
struct VkShaderResourceUsageAMD {
	uint32_t numUsedVgprs;
	uint32_t numUsedSgprs;
	uint32_t ldsSizePerLocalWorkGroup;
	size_t ldsUsageSizeInBytes;
	size_t scratchMemUsageInBytes;
}
struct VkShaderStatisticsInfoAMD {
	VkShaderStageFlags shaderStageMask;
	VkShaderResourceUsageAMD resourceUsage;
	uint32_t numPhysicalVgprs;
	uint32_t numPhysicalSgprs;
	uint32_t numAvailableVgprs;
	uint32_t numAvailableSgprs;
	uint32_t[3] computeWorkGroupSize;
}
struct VkShadingRatePaletteNV {
	uint32_t shadingRatePaletteEntryCount;
	VkShadingRatePaletteEntryNV* pShadingRatePaletteEntries;
}
struct VkSharedPresentSurfaceCapabilitiesKHR {
	VkStructureType sType;
	void* pNext;
	VkImageUsageFlags sharedPresentSupportedUsageFlags;
}
struct VkSparseBufferMemoryBindInfo {
	VkBuffer buffer;
	uint32_t bindCount;
	VkSparseMemoryBind* pBinds;
}
struct VkSparseImageFormatProperties {
	VkImageAspectFlags aspectMask;
	VkExtent3D imageGranularity;
	VkSparseImageFormatFlags flags;
}
struct VkSparseImageFormatProperties2 {
	VkStructureType sType;
	void* pNext;
	VkSparseImageFormatProperties properties;
}
struct VkSparseImageMemoryBind {
	VkImageSubresource subresource;
	VkOffset3D offset;
	VkExtent3D extent;
	VkDeviceMemory memory;
	VkDeviceSize memoryOffset;
	VkSparseMemoryBindFlags flags;
}
struct VkSparseImageMemoryBindInfo {
	VkImage image;
	uint32_t bindCount;
	VkSparseImageMemoryBind* pBinds;
}
struct VkSparseImageMemoryRequirements {
	VkSparseImageFormatProperties formatProperties;
	uint32_t imageMipTailFirstLod;
	VkDeviceSize imageMipTailSize;
	VkDeviceSize imageMipTailOffset;
	VkDeviceSize imageMipTailStride;
}
struct VkSparseImageMemoryRequirements2 {
	VkStructureType sType;
	void* pNext;
	VkSparseImageMemoryRequirements memoryRequirements;
}
struct VkSparseImageOpaqueMemoryBindInfo {
	VkImage image;
	uint32_t bindCount;
	VkSparseMemoryBind* pBinds;
}
struct VkSparseMemoryBind {
	VkDeviceSize resourceOffset;
	VkDeviceSize size;
	VkDeviceMemory memory;
	VkDeviceSize memoryOffset;
	VkSparseMemoryBindFlags flags;
}
struct VkSpecializationInfo {
	uint32_t mapEntryCount;
	VkSpecializationMapEntry* pMapEntries;
	size_t dataSize;
	void* pData;
}
struct VkSpecializationMapEntry {
	uint32_t constantID;
	uint32_t offset;
	size_t size;
}
struct VkStencilOpState {
	VkStencilOp failOp;
	VkStencilOp passOp;
	VkStencilOp depthFailOp;
	VkCompareOp compareOp;
	uint32_t compareMask;
	uint32_t writeMask;
	uint32_t reference;
}
struct VkStridedDeviceAddressNV {
	VkDeviceAddress startAddress;
	VkDeviceSize strideInBytes;
}
struct VkStridedDeviceAddressRegionKHR {
	VkDeviceAddress deviceAddress;
	VkDeviceSize stride;
	VkDeviceSize size;
}
struct VkSubmitInfo {
	VkStructureType sType;
	void* pNext;
	uint32_t waitSemaphoreCount;
	VkSemaphore* pWaitSemaphores;
	VkPipelineStageFlags* pWaitDstStageMask;
	uint32_t commandBufferCount;
	VkCommandBuffer* pCommandBuffers;
	uint32_t signalSemaphoreCount;
	VkSemaphore* pSignalSemaphores;
}
struct VkSubmitInfo2 {
	VkStructureType sType;
	void* pNext;
	VkSubmitFlags flags;
	uint32_t waitSemaphoreInfoCount;
	VkSemaphoreSubmitInfo* pWaitSemaphoreInfos;
	uint32_t commandBufferInfoCount;
	VkCommandBufferSubmitInfo* pCommandBufferInfos;
	uint32_t signalSemaphoreInfoCount;
	VkSemaphoreSubmitInfo* pSignalSemaphoreInfos;
}
struct VkSubpassBeginInfo {
	VkStructureType sType;
	void* pNext;
	VkSubpassContents contents;
}
struct VkSubpassDependency {
	uint32_t srcSubpass;
	uint32_t dstSubpass;
	VkPipelineStageFlags srcStageMask;
	VkPipelineStageFlags dstStageMask;
	VkAccessFlags srcAccessMask;
	VkAccessFlags dstAccessMask;
	VkDependencyFlags dependencyFlags;
}
struct VkSubpassDependency2 {
	VkStructureType sType;
	void* pNext;
	uint32_t srcSubpass;
	uint32_t dstSubpass;
	VkPipelineStageFlags srcStageMask;
	VkPipelineStageFlags dstStageMask;
	VkAccessFlags srcAccessMask;
	VkAccessFlags dstAccessMask;
	VkDependencyFlags dependencyFlags;
	int32_t viewOffset;
}
struct VkSubpassDescription {
	VkSubpassDescriptionFlags flags;
	VkPipelineBindPoint pipelineBindPoint;
	uint32_t inputAttachmentCount;
	VkAttachmentReference* pInputAttachments;
	uint32_t colorAttachmentCount;
	VkAttachmentReference* pColorAttachments;
	VkAttachmentReference* pResolveAttachments;
	VkAttachmentReference* pDepthStencilAttachment;
	uint32_t preserveAttachmentCount;
	uint32_t* pPreserveAttachments;
}
struct VkSubpassDescription2 {
	VkStructureType sType;
	void* pNext;
	VkSubpassDescriptionFlags flags;
	VkPipelineBindPoint pipelineBindPoint;
	uint32_t viewMask;
	uint32_t inputAttachmentCount;
	VkAttachmentReference2* pInputAttachments;
	uint32_t colorAttachmentCount;
	VkAttachmentReference2* pColorAttachments;
	VkAttachmentReference2* pResolveAttachments;
	VkAttachmentReference2* pDepthStencilAttachment;
	uint32_t preserveAttachmentCount;
	uint32_t* pPreserveAttachments;
}
struct VkSubpassDescriptionDepthStencilResolve {
	VkStructureType sType;
	void* pNext;
	VkResolveModeFlagBits depthResolveMode;
	VkResolveModeFlagBits stencilResolveMode;
	VkAttachmentReference2* pDepthStencilResolveAttachment;
}
struct VkSubpassEndInfo {
	VkStructureType sType;
	void* pNext;
}
struct VkSubpassFragmentDensityMapOffsetEndInfoQCOM {
	VkStructureType sType;
	void* pNext;
	uint32_t fragmentDensityOffsetCount;
	VkOffset2D* pFragmentDensityOffsets;
}
struct VkSubpassResolvePerformanceQueryEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 optimal;
}
struct VkSubpassSampleLocationsEXT {
	uint32_t subpassIndex;
	VkSampleLocationsInfoEXT sampleLocationsInfo;
}
struct VkSubpassShadingPipelineCreateInfoHUAWEI {
	VkStructureType sType;
	void* pNext;
	VkRenderPass renderPass;
	uint32_t subpass;
}
struct VkSubresourceHostMemcpySize {
	VkStructureType sType;
	void* pNext;
	VkDeviceSize size;
}
struct VkSubresourceLayout {
	VkDeviceSize offset;
	VkDeviceSize size;
	VkDeviceSize rowPitch;
	VkDeviceSize arrayPitch;
	VkDeviceSize depthPitch;
}
struct VkSubresourceLayout2 {
	VkStructureType sType;
	void* pNext;
	VkSubresourceLayout subresourceLayout;
}
struct VkSurfaceCapabilities2EXT {
	VkStructureType sType;
	void* pNext;
	uint32_t minImageCount;
	uint32_t maxImageCount;
	VkExtent2D currentExtent;
	VkExtent2D minImageExtent;
	VkExtent2D maxImageExtent;
	uint32_t maxImageArrayLayers;
	VkSurfaceTransformFlagsKHR supportedTransforms;
	VkSurfaceTransformFlagBitsKHR currentTransform;
	VkCompositeAlphaFlagsKHR supportedCompositeAlpha;
	VkImageUsageFlags supportedUsageFlags;
	VkSurfaceCounterFlagsEXT supportedSurfaceCounters;
}
struct VkSurfaceCapabilities2KHR {
	VkStructureType sType;
	void* pNext;
	VkSurfaceCapabilitiesKHR surfaceCapabilities;
}
struct VkSurfaceCapabilitiesFullScreenExclusiveEXT {
	VkStructureType sType;
	void* pNext;
	VkBool32 fullScreenExclusiveSupported;
}
struct VkSurfaceCapabilitiesKHR {
	uint32_t minImageCount;
	uint32_t maxImageCount;
	VkExtent2D currentExtent;
	VkExtent2D minImageExtent;
	VkExtent2D maxImageExtent;
	uint32_t maxImageArrayLayers;
	VkSurfaceTransformFlagsKHR supportedTransforms;
	VkSurfaceTransformFlagBitsKHR currentTransform;
	VkCompositeAlphaFlagsKHR supportedCompositeAlpha;
	VkImageUsageFlags supportedUsageFlags;
}
struct VkSurfaceCapabilitiesPresentBarrierNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 presentBarrierSupported;
}
struct VkSurfaceFormat2KHR {
	VkStructureType sType;
	void* pNext;
	VkSurfaceFormatKHR surfaceFormat;
}
struct VkSurfaceFormatKHR {
	VkFormat format;
	VkColorSpaceKHR colorSpace;
}
struct VkSurfaceFullScreenExclusiveInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkFullScreenExclusiveEXT fullScreenExclusive;
}
struct VkSurfaceFullScreenExclusiveWin32InfoEXT {
	VkStructureType sType;
	void* pNext;
	HMONITOR hmonitor;
}
struct VkSurfaceKHR_T {
}
struct VkSurfacePresentModeCompatibilityEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t presentModeCount;
	VkPresentModeKHR* pPresentModes;
}
struct VkSurfacePresentModeEXT {
	VkStructureType sType;
	void* pNext;
	VkPresentModeKHR presentMode;
}
struct VkSurfacePresentScalingCapabilitiesEXT {
	VkStructureType sType;
	void* pNext;
	VkPresentScalingFlagsEXT supportedPresentScaling;
	VkPresentGravityFlagsEXT supportedPresentGravityX;
	VkPresentGravityFlagsEXT supportedPresentGravityY;
	VkExtent2D minScaledImageExtent;
	VkExtent2D maxScaledImageExtent;
}
struct VkSurfaceProtectedCapabilitiesKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 supportsProtected;
}
struct VkSwapchainCounterCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkSurfaceCounterFlagsEXT surfaceCounters;
}
struct VkSwapchainCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkSwapchainCreateFlagsKHR flags;
	VkSurfaceKHR surface;
	uint32_t minImageCount;
	VkFormat imageFormat;
	VkColorSpaceKHR imageColorSpace;
	VkExtent2D imageExtent;
	uint32_t imageArrayLayers;
	VkImageUsageFlags imageUsage;
	VkSharingMode imageSharingMode;
	uint32_t queueFamilyIndexCount;
	uint32_t* pQueueFamilyIndices;
	VkSurfaceTransformFlagBitsKHR preTransform;
	VkCompositeAlphaFlagBitsKHR compositeAlpha;
	VkPresentModeKHR presentMode;
	VkBool32 clipped;
	VkSwapchainKHR oldSwapchain;
}
struct VkSwapchainDisplayNativeHdrCreateInfoAMD {
	VkStructureType sType;
	void* pNext;
	VkBool32 localDimmingEnable;
}
struct VkSwapchainKHR_T {
}
struct VkSwapchainLatencyCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 latencyModeEnable;
}
struct VkSwapchainPresentBarrierCreateInfoNV {
	VkStructureType sType;
	void* pNext;
	VkBool32 presentBarrierEnable;
}
struct VkSwapchainPresentFenceInfoEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t swapchainCount;
	VkFence* pFences;
}
struct VkSwapchainPresentModeInfoEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t swapchainCount;
	VkPresentModeKHR* pPresentModes;
}
struct VkSwapchainPresentModesCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t presentModeCount;
	VkPresentModeKHR* pPresentModes;
}
struct VkSwapchainPresentScalingCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkPresentScalingFlagsEXT scalingBehavior;
	VkPresentGravityFlagsEXT presentGravityX;
	VkPresentGravityFlagsEXT presentGravityY;
}
struct VkTextureLODGatherFormatPropertiesAMD {
	VkStructureType sType;
	void* pNext;
	VkBool32 supportsTextureGatherLODBiasAMD;
}
struct VkTilePropertiesQCOM {
	VkStructureType sType;
	void* pNext;
	VkExtent3D tileSize;
	VkExtent2D apronSize;
	VkOffset2D origin;
}
struct VkTimelineSemaphoreSubmitInfo {
	VkStructureType sType;
	void* pNext;
	uint32_t waitSemaphoreValueCount;
	uint64_t* pWaitSemaphoreValues;
	uint32_t signalSemaphoreValueCount;
	uint64_t* pSignalSemaphoreValues;
}
struct VkTraceRaysIndirectCommand2KHR {
	VkDeviceAddress raygenShaderRecordAddress;
	VkDeviceSize raygenShaderRecordSize;
	VkDeviceAddress missShaderBindingTableAddress;
	VkDeviceSize missShaderBindingTableSize;
	VkDeviceSize missShaderBindingTableStride;
	VkDeviceAddress hitShaderBindingTableAddress;
	VkDeviceSize hitShaderBindingTableSize;
	VkDeviceSize hitShaderBindingTableStride;
	VkDeviceAddress callableShaderBindingTableAddress;
	VkDeviceSize callableShaderBindingTableSize;
	VkDeviceSize callableShaderBindingTableStride;
	uint32_t width;
	uint32_t height;
	uint32_t depth;
}
struct VkTraceRaysIndirectCommandKHR {
	uint32_t width;
	uint32_t height;
	uint32_t depth;
}
struct VkTransformMatrixKHR {
	float[4][3] matrix;
}
struct VkValidationCacheCreateInfoEXT {
	VkStructureType sType;
	void* pNext;
	VkValidationCacheCreateFlagsEXT flags;
	size_t initialDataSize;
	void* pInitialData;
}
struct VkValidationCacheEXT_T {
}
struct VkValidationFeaturesEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t enabledValidationFeatureCount;
	VkValidationFeatureEnableEXT* pEnabledValidationFeatures;
	uint32_t disabledValidationFeatureCount;
	VkValidationFeatureDisableEXT* pDisabledValidationFeatures;
}
struct VkValidationFlagsEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t disabledValidationCheckCount;
	VkValidationCheckEXT* pDisabledValidationChecks;
}
struct VkVertexInputAttributeDescription {
	uint32_t location;
	uint32_t binding;
	VkFormat format;
	uint32_t offset;
}
struct VkVertexInputAttributeDescription2EXT {
	VkStructureType sType;
	void* pNext;
	uint32_t location;
	uint32_t binding;
	VkFormat format;
	uint32_t offset;
}
struct VkVertexInputBindingDescription {
	uint32_t binding;
	uint32_t stride;
	VkVertexInputRate inputRate;
}
struct VkVertexInputBindingDescription2EXT {
	VkStructureType sType;
	void* pNext;
	uint32_t binding;
	uint32_t stride;
	VkVertexInputRate inputRate;
	uint32_t divisor;
}
struct VkVertexInputBindingDivisorDescription {
	uint32_t binding;
	uint32_t divisor;
}
struct VkVideoBeginCodingInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoBeginCodingFlagsKHR flags;
	VkVideoSessionKHR videoSession;
	VkVideoSessionParametersKHR videoSessionParameters;
	uint32_t referenceSlotCount;
	VkVideoReferenceSlotInfoKHR* pReferenceSlots;
}
struct VkVideoCapabilitiesKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoCapabilityFlagsKHR flags;
	VkDeviceSize minBitstreamBufferOffsetAlignment;
	VkDeviceSize minBitstreamBufferSizeAlignment;
	VkExtent2D pictureAccessGranularity;
	VkExtent2D minCodedExtent;
	VkExtent2D maxCodedExtent;
	uint32_t maxDpbSlots;
	uint32_t maxActiveReferencePictures;
	VkExtensionProperties stdHeaderVersion;
}
struct VkVideoCodingControlInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoCodingControlFlagsKHR flags;
}
struct VkVideoDecodeAV1CapabilitiesKHR {
	VkStructureType sType;
	void* pNext;
	StdVideoAV1Level maxLevel;
}
struct VkVideoDecodeAV1DpbSlotInfoKHR {
	VkStructureType sType;
	void* pNext;
	StdVideoDecodeAV1ReferenceInfo* pStdReferenceInfo;
}
struct VkVideoDecodeAV1InlineSessionParametersInfoKHR {
	VkStructureType sType;
	void* pNext;
	StdVideoAV1SequenceHeader* pStdSequenceHeader;
}
struct VkVideoDecodeAV1PictureInfoKHR {
	VkStructureType sType;
	void* pNext;
	StdVideoDecodeAV1PictureInfo* pStdPictureInfo;
	int32_t[7U] referenceNameSlotIndices;
	uint32_t frameHeaderOffset;
	uint32_t tileCount;
	uint32_t* pTileOffsets;
	uint32_t* pTileSizes;
}
struct VkVideoDecodeAV1ProfileInfoKHR {
	VkStructureType sType;
	void* pNext;
	StdVideoAV1Profile stdProfile;
	VkBool32 filmGrainSupport;
}
struct VkVideoDecodeAV1SessionParametersCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	StdVideoAV1SequenceHeader* pStdSequenceHeader;
}
struct VkVideoDecodeCapabilitiesKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoDecodeCapabilityFlagsKHR flags;
}
struct VkVideoDecodeH264CapabilitiesKHR {
	VkStructureType sType;
	void* pNext;
	StdVideoH264LevelIdc maxLevelIdc;
	VkOffset2D fieldOffsetGranularity;
}
struct VkVideoDecodeH264DpbSlotInfoKHR {
	VkStructureType sType;
	void* pNext;
	StdVideoDecodeH264ReferenceInfo* pStdReferenceInfo;
}
struct VkVideoDecodeH264InlineSessionParametersInfoKHR {
	VkStructureType sType;
	void* pNext;
	StdVideoH264SequenceParameterSet* pStdSPS;
	StdVideoH264PictureParameterSet* pStdPPS;
}
struct VkVideoDecodeH264PictureInfoKHR {
	VkStructureType sType;
	void* pNext;
	StdVideoDecodeH264PictureInfo* pStdPictureInfo;
	uint32_t sliceCount;
	uint32_t* pSliceOffsets;
}
struct VkVideoDecodeH264ProfileInfoKHR {
	VkStructureType sType;
	void* pNext;
	StdVideoH264ProfileIdc stdProfileIdc;
	VkVideoDecodeH264PictureLayoutFlagBitsKHR pictureLayout;
}
struct VkVideoDecodeH264SessionParametersAddInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t stdSPSCount;
	StdVideoH264SequenceParameterSet* pStdSPSs;
	uint32_t stdPPSCount;
	StdVideoH264PictureParameterSet* pStdPPSs;
}
struct VkVideoDecodeH264SessionParametersCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t maxStdSPSCount;
	uint32_t maxStdPPSCount;
	VkVideoDecodeH264SessionParametersAddInfoKHR* pParametersAddInfo;
}
struct VkVideoDecodeH265CapabilitiesKHR {
	VkStructureType sType;
	void* pNext;
	StdVideoH265LevelIdc maxLevelIdc;
}
struct VkVideoDecodeH265DpbSlotInfoKHR {
	VkStructureType sType;
	void* pNext;
	StdVideoDecodeH265ReferenceInfo* pStdReferenceInfo;
}
struct VkVideoDecodeH265InlineSessionParametersInfoKHR {
	VkStructureType sType;
	void* pNext;
	StdVideoH265VideoParameterSet* pStdVPS;
	StdVideoH265SequenceParameterSet* pStdSPS;
	StdVideoH265PictureParameterSet* pStdPPS;
}
struct VkVideoDecodeH265PictureInfoKHR {
	VkStructureType sType;
	void* pNext;
	StdVideoDecodeH265PictureInfo* pStdPictureInfo;
	uint32_t sliceSegmentCount;
	uint32_t* pSliceSegmentOffsets;
}
struct VkVideoDecodeH265ProfileInfoKHR {
	VkStructureType sType;
	void* pNext;
	StdVideoH265ProfileIdc stdProfileIdc;
}
struct VkVideoDecodeH265SessionParametersAddInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t stdVPSCount;
	StdVideoH265VideoParameterSet* pStdVPSs;
	uint32_t stdSPSCount;
	StdVideoH265SequenceParameterSet* pStdSPSs;
	uint32_t stdPPSCount;
	StdVideoH265PictureParameterSet* pStdPPSs;
}
struct VkVideoDecodeH265SessionParametersCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t maxStdVPSCount;
	uint32_t maxStdSPSCount;
	uint32_t maxStdPPSCount;
	VkVideoDecodeH265SessionParametersAddInfoKHR* pParametersAddInfo;
}
struct VkVideoDecodeInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoDecodeFlagsKHR flags;
	VkBuffer srcBuffer;
	VkDeviceSize srcBufferOffset;
	VkDeviceSize srcBufferRange;
	VkVideoPictureResourceInfoKHR dstPictureResource;
	VkVideoReferenceSlotInfoKHR* pSetupReferenceSlot;
	uint32_t referenceSlotCount;
	VkVideoReferenceSlotInfoKHR* pReferenceSlots;
}
struct VkVideoDecodeUsageInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoDecodeUsageFlagsKHR videoUsageHints;
}
struct VkVideoEncodeAV1CapabilitiesKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoEncodeAV1CapabilityFlagsKHR flags;
	StdVideoAV1Level maxLevel;
	VkExtent2D codedPictureAlignment;
	VkExtent2D maxTiles;
	VkExtent2D minTileSize;
	VkExtent2D maxTileSize;
	VkVideoEncodeAV1SuperblockSizeFlagsKHR superblockSizes;
	uint32_t maxSingleReferenceCount;
	uint32_t singleReferenceNameMask;
	uint32_t maxUnidirectionalCompoundReferenceCount;
	uint32_t maxUnidirectionalCompoundGroup1ReferenceCount;
	uint32_t unidirectionalCompoundReferenceNameMask;
	uint32_t maxBidirectionalCompoundReferenceCount;
	uint32_t maxBidirectionalCompoundGroup1ReferenceCount;
	uint32_t maxBidirectionalCompoundGroup2ReferenceCount;
	uint32_t bidirectionalCompoundReferenceNameMask;
	uint32_t maxTemporalLayerCount;
	uint32_t maxSpatialLayerCount;
	uint32_t maxOperatingPoints;
	uint32_t minQIndex;
	uint32_t maxQIndex;
	VkBool32 prefersGopRemainingFrames;
	VkBool32 requiresGopRemainingFrames;
	VkVideoEncodeAV1StdFlagsKHR stdSyntaxFlags;
}
struct VkVideoEncodeAV1DpbSlotInfoKHR {
	VkStructureType sType;
	void* pNext;
	StdVideoEncodeAV1ReferenceInfo* pStdReferenceInfo;
}
struct VkVideoEncodeAV1FrameSizeKHR {
	uint32_t intraFrameSize;
	uint32_t predictiveFrameSize;
	uint32_t bipredictiveFrameSize;
}
struct VkVideoEncodeAV1GopRemainingFrameInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 useGopRemainingFrames;
	uint32_t gopRemainingIntra;
	uint32_t gopRemainingPredictive;
	uint32_t gopRemainingBipredictive;
}
struct VkVideoEncodeAV1PictureInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoEncodeAV1PredictionModeKHR predictionMode;
	VkVideoEncodeAV1RateControlGroupKHR rateControlGroup;
	uint32_t constantQIndex;
	StdVideoEncodeAV1PictureInfo* pStdPictureInfo;
	int32_t[7U] referenceNameSlotIndices;
	VkBool32 primaryReferenceCdfOnly;
	VkBool32 generateObuExtensionHeader;
}
struct VkVideoEncodeAV1ProfileInfoKHR {
	VkStructureType sType;
	void* pNext;
	StdVideoAV1Profile stdProfile;
}
struct VkVideoEncodeAV1QIndexKHR {
	uint32_t intraQIndex;
	uint32_t predictiveQIndex;
	uint32_t bipredictiveQIndex;
}
struct VkVideoEncodeAV1QualityLevelPropertiesKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoEncodeAV1RateControlFlagsKHR preferredRateControlFlags;
	uint32_t preferredGopFrameCount;
	uint32_t preferredKeyFramePeriod;
	uint32_t preferredConsecutiveBipredictiveFrameCount;
	uint32_t preferredTemporalLayerCount;
	VkVideoEncodeAV1QIndexKHR preferredConstantQIndex;
	uint32_t preferredMaxSingleReferenceCount;
	uint32_t preferredSingleReferenceNameMask;
	uint32_t preferredMaxUnidirectionalCompoundReferenceCount;
	uint32_t preferredMaxUnidirectionalCompoundGroup1ReferenceCount;
	uint32_t preferredUnidirectionalCompoundReferenceNameMask;
	uint32_t preferredMaxBidirectionalCompoundReferenceCount;
	uint32_t preferredMaxBidirectionalCompoundGroup1ReferenceCount;
	uint32_t preferredMaxBidirectionalCompoundGroup2ReferenceCount;
	uint32_t preferredBidirectionalCompoundReferenceNameMask;
}
struct VkVideoEncodeAV1QuantizationMapCapabilitiesKHR {
	VkStructureType sType;
	void* pNext;
	int32_t minQIndexDelta;
	int32_t maxQIndexDelta;
}
struct VkVideoEncodeAV1RateControlInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoEncodeAV1RateControlFlagsKHR flags;
	uint32_t gopFrameCount;
	uint32_t keyFramePeriod;
	uint32_t consecutiveBipredictiveFrameCount;
	uint32_t temporalLayerCount;
}
struct VkVideoEncodeAV1RateControlLayerInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 useMinQIndex;
	VkVideoEncodeAV1QIndexKHR minQIndex;
	VkBool32 useMaxQIndex;
	VkVideoEncodeAV1QIndexKHR maxQIndex;
	VkBool32 useMaxFrameSize;
	VkVideoEncodeAV1FrameSizeKHR maxFrameSize;
}
struct VkVideoEncodeAV1SessionCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 useMaxLevel;
	StdVideoAV1Level maxLevel;
}
struct VkVideoEncodeAV1SessionParametersCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	StdVideoAV1SequenceHeader* pStdSequenceHeader;
	StdVideoEncodeAV1DecoderModelInfo* pStdDecoderModelInfo;
	uint32_t stdOperatingPointCount;
	StdVideoEncodeAV1OperatingPointInfo* pStdOperatingPoints;
}
struct VkVideoEncodeCapabilitiesKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoEncodeCapabilityFlagsKHR flags;
	VkVideoEncodeRateControlModeFlagsKHR rateControlModes;
	uint32_t maxRateControlLayers;
	uint64_t maxBitrate;
	uint32_t maxQualityLevels;
	VkExtent2D encodeInputPictureGranularity;
	VkVideoEncodeFeedbackFlagsKHR supportedEncodeFeedbackFlags;
}
struct VkVideoEncodeH264CapabilitiesKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoEncodeH264CapabilityFlagsKHR flags;
	StdVideoH264LevelIdc maxLevelIdc;
	uint32_t maxSliceCount;
	uint32_t maxPPictureL0ReferenceCount;
	uint32_t maxBPictureL0ReferenceCount;
	uint32_t maxL1ReferenceCount;
	uint32_t maxTemporalLayerCount;
	VkBool32 expectDyadicTemporalLayerPattern;
	int32_t minQp;
	int32_t maxQp;
	VkBool32 prefersGopRemainingFrames;
	VkBool32 requiresGopRemainingFrames;
	VkVideoEncodeH264StdFlagsKHR stdSyntaxFlags;
}
struct VkVideoEncodeH264DpbSlotInfoKHR {
	VkStructureType sType;
	void* pNext;
	StdVideoEncodeH264ReferenceInfo* pStdReferenceInfo;
}
struct VkVideoEncodeH264FrameSizeKHR {
	uint32_t frameISize;
	uint32_t framePSize;
	uint32_t frameBSize;
}
struct VkVideoEncodeH264GopRemainingFrameInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 useGopRemainingFrames;
	uint32_t gopRemainingI;
	uint32_t gopRemainingP;
	uint32_t gopRemainingB;
}
struct VkVideoEncodeH264NaluSliceInfoKHR {
	VkStructureType sType;
	void* pNext;
	int32_t constantQp;
	StdVideoEncodeH264SliceHeader* pStdSliceHeader;
}
struct VkVideoEncodeH264PictureInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t naluSliceEntryCount;
	VkVideoEncodeH264NaluSliceInfoKHR* pNaluSliceEntries;
	StdVideoEncodeH264PictureInfo* pStdPictureInfo;
	VkBool32 generatePrefixNalu;
}
struct VkVideoEncodeH264ProfileInfoKHR {
	VkStructureType sType;
	void* pNext;
	StdVideoH264ProfileIdc stdProfileIdc;
}
struct VkVideoEncodeH264QpKHR {
	int32_t qpI;
	int32_t qpP;
	int32_t qpB;
}
struct VkVideoEncodeH264QualityLevelPropertiesKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoEncodeH264RateControlFlagsKHR preferredRateControlFlags;
	uint32_t preferredGopFrameCount;
	uint32_t preferredIdrPeriod;
	uint32_t preferredConsecutiveBFrameCount;
	uint32_t preferredTemporalLayerCount;
	VkVideoEncodeH264QpKHR preferredConstantQp;
	uint32_t preferredMaxL0ReferenceCount;
	uint32_t preferredMaxL1ReferenceCount;
	VkBool32 preferredStdEntropyCodingModeFlag;
}
struct VkVideoEncodeH264QuantizationMapCapabilitiesKHR {
	VkStructureType sType;
	void* pNext;
	int32_t minQpDelta;
	int32_t maxQpDelta;
}
struct VkVideoEncodeH264RateControlInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoEncodeH264RateControlFlagsKHR flags;
	uint32_t gopFrameCount;
	uint32_t idrPeriod;
	uint32_t consecutiveBFrameCount;
	uint32_t temporalLayerCount;
}
struct VkVideoEncodeH264RateControlLayerInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 useMinQp;
	VkVideoEncodeH264QpKHR minQp;
	VkBool32 useMaxQp;
	VkVideoEncodeH264QpKHR maxQp;
	VkBool32 useMaxFrameSize;
	VkVideoEncodeH264FrameSizeKHR maxFrameSize;
}
struct VkVideoEncodeH264SessionCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 useMaxLevelIdc;
	StdVideoH264LevelIdc maxLevelIdc;
}
struct VkVideoEncodeH264SessionParametersAddInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t stdSPSCount;
	StdVideoH264SequenceParameterSet* pStdSPSs;
	uint32_t stdPPSCount;
	StdVideoH264PictureParameterSet* pStdPPSs;
}
struct VkVideoEncodeH264SessionParametersCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t maxStdSPSCount;
	uint32_t maxStdPPSCount;
	VkVideoEncodeH264SessionParametersAddInfoKHR* pParametersAddInfo;
}
struct VkVideoEncodeH264SessionParametersFeedbackInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 hasStdSPSOverrides;
	VkBool32 hasStdPPSOverrides;
}
struct VkVideoEncodeH264SessionParametersGetInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 writeStdSPS;
	VkBool32 writeStdPPS;
	uint32_t stdSPSId;
	uint32_t stdPPSId;
}
struct VkVideoEncodeH265CapabilitiesKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoEncodeH265CapabilityFlagsKHR flags;
	StdVideoH265LevelIdc maxLevelIdc;
	uint32_t maxSliceSegmentCount;
	VkExtent2D maxTiles;
	VkVideoEncodeH265CtbSizeFlagsKHR ctbSizes;
	VkVideoEncodeH265TransformBlockSizeFlagsKHR transformBlockSizes;
	uint32_t maxPPictureL0ReferenceCount;
	uint32_t maxBPictureL0ReferenceCount;
	uint32_t maxL1ReferenceCount;
	uint32_t maxSubLayerCount;
	VkBool32 expectDyadicTemporalSubLayerPattern;
	int32_t minQp;
	int32_t maxQp;
	VkBool32 prefersGopRemainingFrames;
	VkBool32 requiresGopRemainingFrames;
	VkVideoEncodeH265StdFlagsKHR stdSyntaxFlags;
}
struct VkVideoEncodeH265DpbSlotInfoKHR {
	VkStructureType sType;
	void* pNext;
	StdVideoEncodeH265ReferenceInfo* pStdReferenceInfo;
}
struct VkVideoEncodeH265FrameSizeKHR {
	uint32_t frameISize;
	uint32_t framePSize;
	uint32_t frameBSize;
}
struct VkVideoEncodeH265GopRemainingFrameInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 useGopRemainingFrames;
	uint32_t gopRemainingI;
	uint32_t gopRemainingP;
	uint32_t gopRemainingB;
}
struct VkVideoEncodeH265NaluSliceSegmentInfoKHR {
	VkStructureType sType;
	void* pNext;
	int32_t constantQp;
	StdVideoEncodeH265SliceSegmentHeader* pStdSliceSegmentHeader;
}
struct VkVideoEncodeH265PictureInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t naluSliceSegmentEntryCount;
	VkVideoEncodeH265NaluSliceSegmentInfoKHR* pNaluSliceSegmentEntries;
	StdVideoEncodeH265PictureInfo* pStdPictureInfo;
}
struct VkVideoEncodeH265ProfileInfoKHR {
	VkStructureType sType;
	void* pNext;
	StdVideoH265ProfileIdc stdProfileIdc;
}
struct VkVideoEncodeH265QpKHR {
	int32_t qpI;
	int32_t qpP;
	int32_t qpB;
}
struct VkVideoEncodeH265QualityLevelPropertiesKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoEncodeH265RateControlFlagsKHR preferredRateControlFlags;
	uint32_t preferredGopFrameCount;
	uint32_t preferredIdrPeriod;
	uint32_t preferredConsecutiveBFrameCount;
	uint32_t preferredSubLayerCount;
	VkVideoEncodeH265QpKHR preferredConstantQp;
	uint32_t preferredMaxL0ReferenceCount;
	uint32_t preferredMaxL1ReferenceCount;
}
struct VkVideoEncodeH265QuantizationMapCapabilitiesKHR {
	VkStructureType sType;
	void* pNext;
	int32_t minQpDelta;
	int32_t maxQpDelta;
}
struct VkVideoEncodeH265RateControlInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoEncodeH265RateControlFlagsKHR flags;
	uint32_t gopFrameCount;
	uint32_t idrPeriod;
	uint32_t consecutiveBFrameCount;
	uint32_t subLayerCount;
}
struct VkVideoEncodeH265RateControlLayerInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 useMinQp;
	VkVideoEncodeH265QpKHR minQp;
	VkBool32 useMaxQp;
	VkVideoEncodeH265QpKHR maxQp;
	VkBool32 useMaxFrameSize;
	VkVideoEncodeH265FrameSizeKHR maxFrameSize;
}
struct VkVideoEncodeH265SessionCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 useMaxLevelIdc;
	StdVideoH265LevelIdc maxLevelIdc;
}
struct VkVideoEncodeH265SessionParametersAddInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t stdVPSCount;
	StdVideoH265VideoParameterSet* pStdVPSs;
	uint32_t stdSPSCount;
	StdVideoH265SequenceParameterSet* pStdSPSs;
	uint32_t stdPPSCount;
	StdVideoH265PictureParameterSet* pStdPPSs;
}
struct VkVideoEncodeH265SessionParametersCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t maxStdVPSCount;
	uint32_t maxStdSPSCount;
	uint32_t maxStdPPSCount;
	VkVideoEncodeH265SessionParametersAddInfoKHR* pParametersAddInfo;
}
struct VkVideoEncodeH265SessionParametersFeedbackInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 hasStdVPSOverrides;
	VkBool32 hasStdSPSOverrides;
	VkBool32 hasStdPPSOverrides;
}
struct VkVideoEncodeH265SessionParametersGetInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 writeStdVPS;
	VkBool32 writeStdSPS;
	VkBool32 writeStdPPS;
	uint32_t stdVPSId;
	uint32_t stdSPSId;
	uint32_t stdPPSId;
}
struct VkVideoEncodeInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoEncodeFlagsKHR flags;
	VkBuffer dstBuffer;
	VkDeviceSize dstBufferOffset;
	VkDeviceSize dstBufferRange;
	VkVideoPictureResourceInfoKHR srcPictureResource;
	VkVideoReferenceSlotInfoKHR* pSetupReferenceSlot;
	uint32_t referenceSlotCount;
	VkVideoReferenceSlotInfoKHR* pReferenceSlots;
	uint32_t precedingExternallyEncodedBytes;
}
struct VkVideoEncodeQualityLevelInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t qualityLevel;
}
struct VkVideoEncodeQualityLevelPropertiesKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoEncodeRateControlModeFlagBitsKHR preferredRateControlMode;
	uint32_t preferredRateControlLayerCount;
}
struct VkVideoEncodeQuantizationMapCapabilitiesKHR {
	VkStructureType sType;
	void* pNext;
	VkExtent2D maxQuantizationMapExtent;
}
struct VkVideoEncodeQuantizationMapInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkImageView quantizationMap;
	VkExtent2D quantizationMapExtent;
}
struct VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkExtent2D quantizationMapTexelSize;
}
struct VkVideoEncodeRateControlInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoEncodeRateControlFlagsKHR flags;
	VkVideoEncodeRateControlModeFlagBitsKHR rateControlMode;
	uint32_t layerCount;
	VkVideoEncodeRateControlLayerInfoKHR* pLayers;
	uint32_t virtualBufferSizeInMs;
	uint32_t initialVirtualBufferSizeInMs;
}
struct VkVideoEncodeRateControlLayerInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint64_t averageBitrate;
	uint64_t maxBitrate;
	uint32_t frameRateNumerator;
	uint32_t frameRateDenominator;
}
struct VkVideoEncodeSessionParametersFeedbackInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkBool32 hasOverrides;
}
struct VkVideoEncodeSessionParametersGetInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoSessionParametersKHR videoSessionParameters;
}
struct VkVideoEncodeUsageInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoEncodeUsageFlagsKHR videoUsageHints;
	VkVideoEncodeContentFlagsKHR videoContentHints;
	VkVideoEncodeTuningModeKHR tuningMode;
}
struct VkVideoEndCodingInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoEndCodingFlagsKHR flags;
}
struct VkVideoFormatAV1QuantizationMapPropertiesKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoEncodeAV1SuperblockSizeFlagsKHR compatibleSuperblockSizes;
}
struct VkVideoFormatH265QuantizationMapPropertiesKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoEncodeH265CtbSizeFlagsKHR compatibleCtbSizes;
}
struct VkVideoFormatPropertiesKHR {
	VkStructureType sType;
	void* pNext;
	VkFormat format;
	VkComponentMapping componentMapping;
	VkImageCreateFlags imageCreateFlags;
	VkImageType imageType;
	VkImageTiling imageTiling;
	VkImageUsageFlags imageUsageFlags;
}
struct VkVideoFormatQuantizationMapPropertiesKHR {
	VkStructureType sType;
	void* pNext;
	VkExtent2D quantizationMapTexelSize;
}
struct VkVideoInlineQueryInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkQueryPool queryPool;
	uint32_t firstQuery;
	uint32_t queryCount;
}
struct VkVideoPictureResourceInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkOffset2D codedOffset;
	VkExtent2D codedExtent;
	uint32_t baseArrayLayer;
	VkImageView imageViewBinding;
}
struct VkVideoProfileInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoCodecOperationFlagBitsKHR videoCodecOperation;
	VkVideoChromaSubsamplingFlagsKHR chromaSubsampling;
	VkVideoComponentBitDepthFlagsKHR lumaBitDepth;
	VkVideoComponentBitDepthFlagsKHR chromaBitDepth;
}
struct VkVideoProfileListInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t profileCount;
	VkVideoProfileInfoKHR* pProfiles;
}
struct VkVideoReferenceSlotInfoKHR {
	VkStructureType sType;
	void* pNext;
	int32_t slotIndex;
	VkVideoPictureResourceInfoKHR* pPictureResource;
}
struct VkVideoSessionCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t queueFamilyIndex;
	VkVideoSessionCreateFlagsKHR flags;
	VkVideoProfileInfoKHR* pVideoProfile;
	VkFormat pictureFormat;
	VkExtent2D maxCodedExtent;
	VkFormat referencePictureFormat;
	uint32_t maxDpbSlots;
	uint32_t maxActiveReferencePictures;
	VkExtensionProperties* pStdHeaderVersion;
}
struct VkVideoSessionKHR_T {
}
struct VkVideoSessionMemoryRequirementsKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t memoryBindIndex;
	VkMemoryRequirements memoryRequirements;
}
struct VkVideoSessionParametersCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkVideoSessionParametersCreateFlagsKHR flags;
	VkVideoSessionParametersKHR videoSessionParametersTemplate;
	VkVideoSessionKHR videoSession;
}
struct VkVideoSessionParametersKHR_T {
}
struct VkVideoSessionParametersUpdateInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t updateSequenceCount;
}
struct VkViewport {
	float x;
	float y;
	float width;
	float height;
	float minDepth;
	float maxDepth;
}
struct VkViewportSwizzleNV {
	VkViewportCoordinateSwizzleNV x;
	VkViewportCoordinateSwizzleNV y;
	VkViewportCoordinateSwizzleNV z;
	VkViewportCoordinateSwizzleNV w;
}
struct VkViewportWScalingNV {
	float xcoeff;
	float ycoeff;
}
struct VkWin32KeyedMutexAcquireReleaseInfoKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t acquireCount;
	VkDeviceMemory* pAcquireSyncs;
	uint64_t* pAcquireKeys;
	uint32_t* pAcquireTimeouts;
	uint32_t releaseCount;
	VkDeviceMemory* pReleaseSyncs;
	uint64_t* pReleaseKeys;
}
struct VkWin32KeyedMutexAcquireReleaseInfoNV {
	VkStructureType sType;
	void* pNext;
	uint32_t acquireCount;
	VkDeviceMemory* pAcquireSyncs;
	uint64_t* pAcquireKeys;
	uint32_t* pAcquireTimeoutMilliseconds;
	uint32_t releaseCount;
	VkDeviceMemory* pReleaseSyncs;
	uint64_t* pReleaseKeys;
}
struct VkWin32SurfaceCreateInfoKHR {
	VkStructureType sType;
	void* pNext;
	VkWin32SurfaceCreateFlagsKHR flags;
	HINSTANCE hinstance;
	HWND hwnd;
}
struct VkWriteDescriptorSet {
	VkStructureType sType;
	void* pNext;
	VkDescriptorSet dstSet;
	uint32_t dstBinding;
	uint32_t dstArrayElement;
	uint32_t descriptorCount;
	VkDescriptorType descriptorType;
	VkDescriptorImageInfo* pImageInfo;
	VkDescriptorBufferInfo* pBufferInfo;
	VkBufferView* pTexelBufferView;
}
struct VkWriteDescriptorSetAccelerationStructureKHR {
	VkStructureType sType;
	void* pNext;
	uint32_t accelerationStructureCount;
	VkAccelerationStructureKHR* pAccelerationStructures;
}
struct VkWriteDescriptorSetAccelerationStructureNV {
	VkStructureType sType;
	void* pNext;
	uint32_t accelerationStructureCount;
	VkAccelerationStructureNV* pAccelerationStructures;
}
struct VkWriteDescriptorSetInlineUniformBlock {
	VkStructureType sType;
	void* pNext;
	uint32_t dataSize;
	void* pData;
}
struct VkWriteDescriptorSetPartitionedAccelerationStructureNV {
	VkStructureType sType;
	void* pNext;
	uint32_t accelerationStructureCount;
	VkDeviceAddress* pAccelerationStructures;
}
struct VkWriteIndirectExecutionSetPipelineEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t index;
	VkPipeline pipeline;
}
struct VkWriteIndirectExecutionSetShaderEXT {
	VkStructureType sType;
	void* pNext;
	uint32_t index;
	VkShaderEXT shader;
}
struct VkXYColorEXT {
	float x;
	float y;
}

// Global variables

extern(Windows) { nothrow __gshared {

VkResult function(VkPhysicalDevice physicalDevice, int32_t drmFd, VkDisplayKHR display)
	vkAcquireDrmDisplayEXT;

VkResult function(VkDevice device, VkSwapchainKHR swapchain)
	vkAcquireFullScreenExclusiveModeEXT;

VkResult function(VkDevice device, VkAcquireNextImageInfoKHR* pAcquireInfo, uint32_t* pImageIndex)
	vkAcquireNextImage2KHR;

VkResult function(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t* pImageIndex)
	vkAcquireNextImageKHR;

VkResult function(VkDevice device, VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo, VkPerformanceConfigurationINTEL* pConfiguration)
	vkAcquirePerformanceConfigurationINTEL;

VkResult function(VkDevice device, VkAcquireProfilingLockInfoKHR* pInfo)
	vkAcquireProfilingLockKHR;

VkResult function(VkPhysicalDevice physicalDevice, VkDisplayKHR display)
	vkAcquireWinrtDisplayNV;

VkResult function(VkDevice device, VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers)
	vkAllocateCommandBuffers;

VkResult function(VkDevice device, VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets)
	vkAllocateDescriptorSets;

VkResult function(VkDevice device, VkMemoryAllocateInfo* pAllocateInfo, VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory)
	vkAllocateMemory;

void function(VkDevice device, VkAntiLagDataAMD* pData)
	vkAntiLagUpdateAMD;

VkResult function(VkCommandBuffer commandBuffer, VkCommandBufferBeginInfo* pBeginInfo)
	vkBeginCommandBuffer;

VkResult function(VkDevice device, uint32_t bindInfoCount, VkBindAccelerationStructureMemoryInfoNV* pBindInfos)
	vkBindAccelerationStructureMemoryNV;

VkResult function(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset)
	vkBindBufferMemory;

VkResult function(VkDevice device, uint32_t bindInfoCount, VkBindBufferMemoryInfo* pBindInfos)
	vkBindBufferMemory2;

VkResult function(VkDevice device, uint32_t bindInfoCount, VkBindBufferMemoryInfo* pBindInfos)
	vkBindBufferMemory2KHR;

VkResult function(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset)
	vkBindImageMemory;

VkResult function(VkDevice device, uint32_t bindInfoCount, VkBindImageMemoryInfo* pBindInfos)
	vkBindImageMemory2;

VkResult function(VkDevice device, uint32_t bindInfoCount, VkBindImageMemoryInfo* pBindInfos)
	vkBindImageMemory2KHR;

VkResult function(VkDevice device, VkOpticalFlowSessionNV session, VkOpticalFlowSessionBindingPointNV bindingPoint, VkImageView view, VkImageLayout layout)
	vkBindOpticalFlowSessionImageNV;

VkResult function(VkDevice device, VkVideoSessionKHR videoSession, uint32_t bindSessionMemoryInfoCount, VkBindVideoSessionMemoryInfoKHR* pBindSessionMemoryInfos)
	vkBindVideoSessionMemoryKHR;

VkResult function(VkDevice device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount, VkAccelerationStructureBuildGeometryInfoKHR* pInfos, VkAccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos)
	vkBuildAccelerationStructuresKHR;

VkResult function(VkDevice device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount, VkMicromapBuildInfoEXT* pInfos)
	vkBuildMicromapsEXT;

void function(VkCommandBuffer commandBuffer, VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin)
	vkCmdBeginConditionalRenderingEXT;

void function(VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT* pLabelInfo)
	vkCmdBeginDebugUtilsLabelEXT;

void function(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags)
	vkCmdBeginQuery;

void function(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags, uint32_t index)
	vkCmdBeginQueryIndexedEXT;

void function(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents)
	vkCmdBeginRenderPass;

void function(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassBeginInfo* pSubpassBeginInfo)
	vkCmdBeginRenderPass2;

void function(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassBeginInfo* pSubpassBeginInfo)
	vkCmdBeginRenderPass2KHR;

void function(VkCommandBuffer commandBuffer, VkRenderingInfo* pRenderingInfo)
	vkCmdBeginRendering;

void function(VkCommandBuffer commandBuffer, VkRenderingInfo* pRenderingInfo)
	vkCmdBeginRenderingKHR;

void function(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, VkBuffer* pCounterBuffers, VkDeviceSize* pCounterBufferOffsets)
	vkCmdBeginTransformFeedbackEXT;

void function(VkCommandBuffer commandBuffer, VkVideoBeginCodingInfoKHR* pBeginInfo)
	vkCmdBeginVideoCodingKHR;

void function(VkCommandBuffer commandBuffer, VkBindDescriptorBufferEmbeddedSamplersInfoEXT* pBindDescriptorBufferEmbeddedSamplersInfo)
	vkCmdBindDescriptorBufferEmbeddedSamplers2EXT;

void function(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set)
	vkCmdBindDescriptorBufferEmbeddedSamplersEXT;

void function(VkCommandBuffer commandBuffer, uint32_t bufferCount, VkDescriptorBufferBindingInfoEXT* pBindingInfos)
	vkCmdBindDescriptorBuffersEXT;

void function(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, VkDescriptorSet* pDescriptorSets, uint32_t dynamicOffsetCount, uint32_t* pDynamicOffsets)
	vkCmdBindDescriptorSets;

void function(VkCommandBuffer commandBuffer, VkBindDescriptorSetsInfo* pBindDescriptorSetsInfo)
	vkCmdBindDescriptorSets2;

void function(VkCommandBuffer commandBuffer, VkBindDescriptorSetsInfo* pBindDescriptorSetsInfo)
	vkCmdBindDescriptorSets2KHR;

void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType)
	vkCmdBindIndexBuffer;

void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkDeviceSize size, VkIndexType indexType)
	vkCmdBindIndexBuffer2;

void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkDeviceSize size, VkIndexType indexType)
	vkCmdBindIndexBuffer2KHR;

void function(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout)
	vkCmdBindInvocationMaskHUAWEI;

void function(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)
	vkCmdBindPipeline;

void function(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline, uint32_t groupIndex)
	vkCmdBindPipelineShaderGroupNV;

void function(VkCommandBuffer commandBuffer, uint32_t stageCount, VkShaderStageFlagBits* pStages, VkShaderEXT* pShaders)
	vkCmdBindShadersEXT;

void function(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout)
	vkCmdBindShadingRateImageNV;

void function(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets, VkDeviceSize* pSizes)
	vkCmdBindTransformFeedbackBuffersEXT;

void function(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets)
	vkCmdBindVertexBuffers;

void function(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets, VkDeviceSize* pSizes, VkDeviceSize* pStrides)
	vkCmdBindVertexBuffers2;

void function(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets, VkDeviceSize* pSizes, VkDeviceSize* pStrides)
	vkCmdBindVertexBuffers2EXT;

void function(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageBlit* pRegions, VkFilter filter)
	vkCmdBlitImage;

void function(VkCommandBuffer commandBuffer, VkBlitImageInfo2* pBlitImageInfo)
	vkCmdBlitImage2;

void function(VkCommandBuffer commandBuffer, VkBlitImageInfo2* pBlitImageInfo)
	vkCmdBlitImage2KHR;

void function(VkCommandBuffer commandBuffer, VkAccelerationStructureInfoNV* pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset)
	vkCmdBuildAccelerationStructureNV;

void function(VkCommandBuffer commandBuffer, uint32_t infoCount, VkAccelerationStructureBuildGeometryInfoKHR* pInfos, VkDeviceAddress* pIndirectDeviceAddresses, uint32_t* pIndirectStrides, uint32_t** ppMaxPrimitiveCounts)
	vkCmdBuildAccelerationStructuresIndirectKHR;

void function(VkCommandBuffer commandBuffer, uint32_t infoCount, VkAccelerationStructureBuildGeometryInfoKHR* pInfos, VkAccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos)
	vkCmdBuildAccelerationStructuresKHR;

void function(VkCommandBuffer commandBuffer, VkClusterAccelerationStructureCommandsInfoNV* pCommandInfos)
	vkCmdBuildClusterAccelerationStructureIndirectNV;

void function(VkCommandBuffer commandBuffer, uint32_t infoCount, VkMicromapBuildInfoEXT* pInfos)
	vkCmdBuildMicromapsEXT;

void function(VkCommandBuffer commandBuffer, VkBuildPartitionedAccelerationStructureInfoNV* pBuildInfo)
	vkCmdBuildPartitionedAccelerationStructuresNV;

void function(VkCommandBuffer commandBuffer, uint32_t attachmentCount, VkClearAttachment* pAttachments, uint32_t rectCount, VkClearRect* pRects)
	vkCmdClearAttachments;

void function(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue* pColor, uint32_t rangeCount, VkImageSubresourceRange* pRanges)
	vkCmdClearColorImage;

void function(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue* pDepthStencil, uint32_t rangeCount, VkImageSubresourceRange* pRanges)
	vkCmdClearDepthStencilImage;

void function(VkCommandBuffer commandBuffer, VkVideoCodingControlInfoKHR* pCodingControlInfo)
	vkCmdControlVideoCodingKHR;

void function(VkCommandBuffer commandBuffer, uint32_t infoCount, VkConvertCooperativeVectorMatrixInfoNV* pInfos)
	vkCmdConvertCooperativeVectorMatrixNV;

void function(VkCommandBuffer commandBuffer, VkCopyAccelerationStructureInfoKHR* pInfo)
	vkCmdCopyAccelerationStructureKHR;

void function(VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeKHR mode)
	vkCmdCopyAccelerationStructureNV;

void function(VkCommandBuffer commandBuffer, VkCopyAccelerationStructureToMemoryInfoKHR* pInfo)
	vkCmdCopyAccelerationStructureToMemoryKHR;

void function(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, VkBufferCopy* pRegions)
	vkCmdCopyBuffer;

void function(VkCommandBuffer commandBuffer, VkCopyBufferInfo2* pCopyBufferInfo)
	vkCmdCopyBuffer2;

void function(VkCommandBuffer commandBuffer, VkCopyBufferInfo2* pCopyBufferInfo)
	vkCmdCopyBuffer2KHR;

void function(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkBufferImageCopy* pRegions)
	vkCmdCopyBufferToImage;

void function(VkCommandBuffer commandBuffer, VkCopyBufferToImageInfo2* pCopyBufferToImageInfo)
	vkCmdCopyBufferToImage2;

void function(VkCommandBuffer commandBuffer, VkCopyBufferToImageInfo2* pCopyBufferToImageInfo)
	vkCmdCopyBufferToImage2KHR;

void function(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageCopy* pRegions)
	vkCmdCopyImage;

void function(VkCommandBuffer commandBuffer, VkCopyImageInfo2* pCopyImageInfo)
	vkCmdCopyImage2;

void function(VkCommandBuffer commandBuffer, VkCopyImageInfo2* pCopyImageInfo)
	vkCmdCopyImage2KHR;

void function(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, VkBufferImageCopy* pRegions)
	vkCmdCopyImageToBuffer;

void function(VkCommandBuffer commandBuffer, VkCopyImageToBufferInfo2* pCopyImageToBufferInfo)
	vkCmdCopyImageToBuffer2;

void function(VkCommandBuffer commandBuffer, VkCopyImageToBufferInfo2* pCopyImageToBufferInfo)
	vkCmdCopyImageToBuffer2KHR;

void function(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32_t copyCount, uint32_t stride)
	vkCmdCopyMemoryIndirectNV;

void function(VkCommandBuffer commandBuffer, VkCopyMemoryToAccelerationStructureInfoKHR* pInfo)
	vkCmdCopyMemoryToAccelerationStructureKHR;

void function(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32_t copyCount, uint32_t stride, VkImage dstImage, VkImageLayout dstImageLayout, VkImageSubresourceLayers* pImageSubresources)
	vkCmdCopyMemoryToImageIndirectNV;

void function(VkCommandBuffer commandBuffer, VkCopyMemoryToMicromapInfoEXT* pInfo)
	vkCmdCopyMemoryToMicromapEXT;

void function(VkCommandBuffer commandBuffer, VkCopyMicromapInfoEXT* pInfo)
	vkCmdCopyMicromapEXT;

void function(VkCommandBuffer commandBuffer, VkCopyMicromapToMemoryInfoEXT* pInfo)
	vkCmdCopyMicromapToMemoryEXT;

void function(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags)
	vkCmdCopyQueryPoolResults;

void function(VkCommandBuffer commandBuffer, VkCuLaunchInfoNVX* pLaunchInfo)
	vkCmdCuLaunchKernelNVX;

void function(VkCommandBuffer commandBuffer, VkCudaLaunchInfoNV* pLaunchInfo)
	vkCmdCudaLaunchKernelNV;

void function(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT* pMarkerInfo)
	vkCmdDebugMarkerBeginEXT;

void function(VkCommandBuffer commandBuffer)
	vkCmdDebugMarkerEndEXT;

void function(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT* pMarkerInfo)
	vkCmdDebugMarkerInsertEXT;

void function(VkCommandBuffer commandBuffer, VkVideoDecodeInfoKHR* pDecodeInfo)
	vkCmdDecodeVideoKHR;

void function(VkCommandBuffer commandBuffer, VkDeviceAddress indirectCommandsAddress, VkDeviceAddress indirectCommandsCountAddress, uint32_t stride)
	vkCmdDecompressMemoryIndirectCountNV;

void function(VkCommandBuffer commandBuffer, uint32_t decompressRegionCount, VkDecompressMemoryRegionNV* pDecompressMemoryRegions)
	vkCmdDecompressMemoryNV;

void function(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
	vkCmdDispatch;

void function(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
	vkCmdDispatchBase;

void function(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
	vkCmdDispatchBaseKHR;

void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)
	vkCmdDispatchIndirect;

void function(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance)
	vkCmdDraw;

void function(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
	vkCmdDrawClusterHUAWEI;

void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)
	vkCmdDrawClusterIndirectHUAWEI;

void function(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance)
	vkCmdDrawIndexed;

void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
	vkCmdDrawIndexedIndirect;

void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
	vkCmdDrawIndexedIndirectCount;

void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
	vkCmdDrawIndexedIndirectCountAMD;

void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
	vkCmdDrawIndexedIndirectCountKHR;

void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
	vkCmdDrawIndirect;

void function(VkCommandBuffer commandBuffer, uint32_t instanceCount, uint32_t firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint32_t counterOffset, uint32_t vertexStride)
	vkCmdDrawIndirectByteCountEXT;

void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
	vkCmdDrawIndirectCount;

void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
	vkCmdDrawIndirectCountAMD;

void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
	vkCmdDrawIndirectCountKHR;

void function(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
	vkCmdDrawMeshTasksEXT;

void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
	vkCmdDrawMeshTasksIndirectCountEXT;

void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
	vkCmdDrawMeshTasksIndirectCountNV;

void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
	vkCmdDrawMeshTasksIndirectEXT;

void function(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
	vkCmdDrawMeshTasksIndirectNV;

void function(VkCommandBuffer commandBuffer, uint32_t taskCount, uint32_t firstTask)
	vkCmdDrawMeshTasksNV;

void function(VkCommandBuffer commandBuffer, uint32_t drawCount, VkMultiDrawInfoEXT* pVertexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride)
	vkCmdDrawMultiEXT;

void function(VkCommandBuffer commandBuffer, uint32_t drawCount, VkMultiDrawIndexedInfoEXT* pIndexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride, int32_t* pVertexOffset)
	vkCmdDrawMultiIndexedEXT;

void function(VkCommandBuffer commandBuffer, VkVideoEncodeInfoKHR* pEncodeInfo)
	vkCmdEncodeVideoKHR;

void function(VkCommandBuffer commandBuffer)
	vkCmdEndConditionalRenderingEXT;

void function(VkCommandBuffer commandBuffer)
	vkCmdEndDebugUtilsLabelEXT;

void function(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query)
	vkCmdEndQuery;

void function(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, uint32_t index)
	vkCmdEndQueryIndexedEXT;

void function(VkCommandBuffer commandBuffer)
	vkCmdEndRenderPass;

void function(VkCommandBuffer commandBuffer, VkSubpassEndInfo* pSubpassEndInfo)
	vkCmdEndRenderPass2;

void function(VkCommandBuffer commandBuffer, VkSubpassEndInfo* pSubpassEndInfo)
	vkCmdEndRenderPass2KHR;

void function(VkCommandBuffer commandBuffer)
	vkCmdEndRendering;

void function(VkCommandBuffer commandBuffer)
	vkCmdEndRenderingKHR;

void function(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, VkBuffer* pCounterBuffers, VkDeviceSize* pCounterBufferOffsets)
	vkCmdEndTransformFeedbackEXT;

void function(VkCommandBuffer commandBuffer, VkVideoEndCodingInfoKHR* pEndCodingInfo)
	vkCmdEndVideoCodingKHR;

void function(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, VkCommandBuffer* pCommandBuffers)
	vkCmdExecuteCommands;

void function(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, VkGeneratedCommandsInfoEXT* pGeneratedCommandsInfo)
	vkCmdExecuteGeneratedCommandsEXT;

void function(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo)
	vkCmdExecuteGeneratedCommandsNV;

void function(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data)
	vkCmdFillBuffer;

void function(VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT* pLabelInfo)
	vkCmdInsertDebugUtilsLabelEXT;

void function(VkCommandBuffer commandBuffer, VkSubpassContents contents)
	vkCmdNextSubpass;

void function(VkCommandBuffer commandBuffer, VkSubpassBeginInfo* pSubpassBeginInfo, VkSubpassEndInfo* pSubpassEndInfo)
	vkCmdNextSubpass2;

void function(VkCommandBuffer commandBuffer, VkSubpassBeginInfo* pSubpassBeginInfo, VkSubpassEndInfo* pSubpassEndInfo)
	vkCmdNextSubpass2KHR;

void function(VkCommandBuffer commandBuffer, VkOpticalFlowSessionNV session, VkOpticalFlowExecuteInfoNV* pExecuteInfo)
	vkCmdOpticalFlowExecuteNV;

void function(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
	vkCmdPipelineBarrier;

void function(VkCommandBuffer commandBuffer, VkDependencyInfo* pDependencyInfo)
	vkCmdPipelineBarrier2;

void function(VkCommandBuffer commandBuffer, VkDependencyInfo* pDependencyInfo)
	vkCmdPipelineBarrier2KHR;

void function(VkCommandBuffer commandBuffer, VkGeneratedCommandsInfoEXT* pGeneratedCommandsInfo, VkCommandBuffer stateCommandBuffer)
	vkCmdPreprocessGeneratedCommandsEXT;

void function(VkCommandBuffer commandBuffer, VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo)
	vkCmdPreprocessGeneratedCommandsNV;

void function(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, void* pValues)
	vkCmdPushConstants;

void function(VkCommandBuffer commandBuffer, VkPushConstantsInfo* pPushConstantsInfo)
	vkCmdPushConstants2;

void function(VkCommandBuffer commandBuffer, VkPushConstantsInfo* pPushConstantsInfo)
	vkCmdPushConstants2KHR;

void function(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites)
	vkCmdPushDescriptorSet;

void function(VkCommandBuffer commandBuffer, VkPushDescriptorSetInfo* pPushDescriptorSetInfo)
	vkCmdPushDescriptorSet2;

void function(VkCommandBuffer commandBuffer, VkPushDescriptorSetInfo* pPushDescriptorSetInfo)
	vkCmdPushDescriptorSet2KHR;

void function(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites)
	vkCmdPushDescriptorSetKHR;

void function(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, void* pData)
	vkCmdPushDescriptorSetWithTemplate;

void function(VkCommandBuffer commandBuffer, VkPushDescriptorSetWithTemplateInfo* pPushDescriptorSetWithTemplateInfo)
	vkCmdPushDescriptorSetWithTemplate2;

void function(VkCommandBuffer commandBuffer, VkPushDescriptorSetWithTemplateInfo* pPushDescriptorSetWithTemplateInfo)
	vkCmdPushDescriptorSetWithTemplate2KHR;

void function(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, void* pData)
	vkCmdPushDescriptorSetWithTemplateKHR;

void function(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
	vkCmdResetEvent;

void function(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask)
	vkCmdResetEvent2;

void function(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask)
	vkCmdResetEvent2KHR;

void function(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)
	vkCmdResetQueryPool;

void function(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageResolve* pRegions)
	vkCmdResolveImage;

void function(VkCommandBuffer commandBuffer, VkResolveImageInfo2* pResolveImageInfo)
	vkCmdResolveImage2;

void function(VkCommandBuffer commandBuffer, VkResolveImageInfo2* pResolveImageInfo)
	vkCmdResolveImage2KHR;

void function(VkCommandBuffer commandBuffer, VkBool32 alphaToCoverageEnable)
	vkCmdSetAlphaToCoverageEnableEXT;

void function(VkCommandBuffer commandBuffer, VkBool32 alphaToOneEnable)
	vkCmdSetAlphaToOneEnableEXT;

void function(VkCommandBuffer commandBuffer, VkImageAspectFlags aspectMask)
	vkCmdSetAttachmentFeedbackLoopEnableEXT;

void function(VkCommandBuffer commandBuffer, ref float[4] blendConstants)
	vkCmdSetBlendConstants;

void function(VkCommandBuffer commandBuffer, void* pCheckpointMarker)
	vkCmdSetCheckpointNV;

void function(VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint32_t customSampleOrderCount, VkCoarseSampleOrderCustomNV* pCustomSampleOrders)
	vkCmdSetCoarseSampleOrderNV;

void function(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, VkColorBlendAdvancedEXT* pColorBlendAdvanced)
	vkCmdSetColorBlendAdvancedEXT;

void function(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, VkBool32* pColorBlendEnables)
	vkCmdSetColorBlendEnableEXT;

void function(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, VkColorBlendEquationEXT* pColorBlendEquations)
	vkCmdSetColorBlendEquationEXT;

void function(VkCommandBuffer commandBuffer, uint32_t attachmentCount, VkBool32* pColorWriteEnables)
	vkCmdSetColorWriteEnableEXT;

void function(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, VkColorComponentFlags* pColorWriteMasks)
	vkCmdSetColorWriteMaskEXT;

void function(VkCommandBuffer commandBuffer, VkConservativeRasterizationModeEXT conservativeRasterizationMode)
	vkCmdSetConservativeRasterizationModeEXT;

void function(VkCommandBuffer commandBuffer, VkCoverageModulationModeNV coverageModulationMode)
	vkCmdSetCoverageModulationModeNV;

void function(VkCommandBuffer commandBuffer, VkBool32 coverageModulationTableEnable)
	vkCmdSetCoverageModulationTableEnableNV;

void function(VkCommandBuffer commandBuffer, uint32_t coverageModulationTableCount, float* pCoverageModulationTable)
	vkCmdSetCoverageModulationTableNV;

void function(VkCommandBuffer commandBuffer, VkCoverageReductionModeNV coverageReductionMode)
	vkCmdSetCoverageReductionModeNV;

void function(VkCommandBuffer commandBuffer, VkBool32 coverageToColorEnable)
	vkCmdSetCoverageToColorEnableNV;

void function(VkCommandBuffer commandBuffer, uint32_t coverageToColorLocation)
	vkCmdSetCoverageToColorLocationNV;

void function(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)
	vkCmdSetCullMode;

void function(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)
	vkCmdSetCullModeEXT;

void function(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
	vkCmdSetDepthBias;

void function(VkCommandBuffer commandBuffer, VkDepthBiasInfoEXT* pDepthBiasInfo)
	vkCmdSetDepthBias2EXT;

void function(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)
	vkCmdSetDepthBiasEnable;

void function(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)
	vkCmdSetDepthBiasEnableEXT;

void function(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds)
	vkCmdSetDepthBounds;

void function(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)
	vkCmdSetDepthBoundsTestEnable;

void function(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)
	vkCmdSetDepthBoundsTestEnableEXT;

void function(VkCommandBuffer commandBuffer, VkBool32 depthClampEnable)
	vkCmdSetDepthClampEnableEXT;

void function(VkCommandBuffer commandBuffer, VkDepthClampModeEXT depthClampMode, VkDepthClampRangeEXT* pDepthClampRange)
	vkCmdSetDepthClampRangeEXT;

void function(VkCommandBuffer commandBuffer, VkBool32 depthClipEnable)
	vkCmdSetDepthClipEnableEXT;

void function(VkCommandBuffer commandBuffer, VkBool32 negativeOneToOne)
	vkCmdSetDepthClipNegativeOneToOneEXT;

void function(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)
	vkCmdSetDepthCompareOp;

void function(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)
	vkCmdSetDepthCompareOpEXT;

void function(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)
	vkCmdSetDepthTestEnable;

void function(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)
	vkCmdSetDepthTestEnableEXT;

void function(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)
	vkCmdSetDepthWriteEnable;

void function(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)
	vkCmdSetDepthWriteEnableEXT;

void function(VkCommandBuffer commandBuffer, VkSetDescriptorBufferOffsetsInfoEXT* pSetDescriptorBufferOffsetsInfo)
	vkCmdSetDescriptorBufferOffsets2EXT;

void function(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t setCount, uint32_t* pBufferIndices, VkDeviceSize* pOffsets)
	vkCmdSetDescriptorBufferOffsetsEXT;

void function(VkCommandBuffer commandBuffer, uint32_t deviceMask)
	vkCmdSetDeviceMask;

void function(VkCommandBuffer commandBuffer, uint32_t deviceMask)
	vkCmdSetDeviceMaskKHR;

void function(VkCommandBuffer commandBuffer, uint32_t firstDiscardRectangle, uint32_t discardRectangleCount, VkRect2D* pDiscardRectangles)
	vkCmdSetDiscardRectangleEXT;

void function(VkCommandBuffer commandBuffer, VkBool32 discardRectangleEnable)
	vkCmdSetDiscardRectangleEnableEXT;

void function(VkCommandBuffer commandBuffer, VkDiscardRectangleModeEXT discardRectangleMode)
	vkCmdSetDiscardRectangleModeEXT;

void function(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
	vkCmdSetEvent;

void function(VkCommandBuffer commandBuffer, VkEvent event, VkDependencyInfo* pDependencyInfo)
	vkCmdSetEvent2;

void function(VkCommandBuffer commandBuffer, VkEvent event, VkDependencyInfo* pDependencyInfo)
	vkCmdSetEvent2KHR;

void function(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, VkBool32* pExclusiveScissorEnables)
	vkCmdSetExclusiveScissorEnableNV;

void function(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, VkRect2D* pExclusiveScissors)
	vkCmdSetExclusiveScissorNV;

void function(VkCommandBuffer commandBuffer, float extraPrimitiveOverestimationSize)
	vkCmdSetExtraPrimitiveOverestimationSizeEXT;

void function(VkCommandBuffer commandBuffer, VkFragmentShadingRateNV shadingRate, ref VkFragmentShadingRateCombinerOpKHR[2] combinerOps)
	vkCmdSetFragmentShadingRateEnumNV;

void function(VkCommandBuffer commandBuffer, VkExtent2D* pFragmentSize, ref VkFragmentShadingRateCombinerOpKHR[2] combinerOps)
	vkCmdSetFragmentShadingRateKHR;

void function(VkCommandBuffer commandBuffer, VkFrontFace frontFace)
	vkCmdSetFrontFace;

void function(VkCommandBuffer commandBuffer, VkFrontFace frontFace)
	vkCmdSetFrontFaceEXT;

void function(VkCommandBuffer commandBuffer, VkLineRasterizationModeEXT lineRasterizationMode)
	vkCmdSetLineRasterizationModeEXT;

void function(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern)
	vkCmdSetLineStipple;

void function(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern)
	vkCmdSetLineStippleEXT;

void function(VkCommandBuffer commandBuffer, VkBool32 stippledLineEnable)
	vkCmdSetLineStippleEnableEXT;

void function(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern)
	vkCmdSetLineStippleKHR;

void function(VkCommandBuffer commandBuffer, float lineWidth)
	vkCmdSetLineWidth;

void function(VkCommandBuffer commandBuffer, VkLogicOp logicOp)
	vkCmdSetLogicOpEXT;

void function(VkCommandBuffer commandBuffer, VkBool32 logicOpEnable)
	vkCmdSetLogicOpEnableEXT;

void function(VkCommandBuffer commandBuffer, uint32_t patchControlPoints)
	vkCmdSetPatchControlPointsEXT;

VkResult function(VkCommandBuffer commandBuffer, VkPerformanceMarkerInfoINTEL* pMarkerInfo)
	vkCmdSetPerformanceMarkerINTEL;

VkResult function(VkCommandBuffer commandBuffer, VkPerformanceOverrideInfoINTEL* pOverrideInfo)
	vkCmdSetPerformanceOverrideINTEL;

VkResult function(VkCommandBuffer commandBuffer, VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo)
	vkCmdSetPerformanceStreamMarkerINTEL;

void function(VkCommandBuffer commandBuffer, VkPolygonMode polygonMode)
	vkCmdSetPolygonModeEXT;

void function(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)
	vkCmdSetPrimitiveRestartEnable;

void function(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)
	vkCmdSetPrimitiveRestartEnableEXT;

void function(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)
	vkCmdSetPrimitiveTopology;

void function(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)
	vkCmdSetPrimitiveTopologyEXT;

void function(VkCommandBuffer commandBuffer, VkProvokingVertexModeEXT provokingVertexMode)
	vkCmdSetProvokingVertexModeEXT;

void function(VkCommandBuffer commandBuffer, VkSampleCountFlagBits rasterizationSamples)
	vkCmdSetRasterizationSamplesEXT;

void function(VkCommandBuffer commandBuffer, uint32_t rasterizationStream)
	vkCmdSetRasterizationStreamEXT;

void function(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)
	vkCmdSetRasterizerDiscardEnable;

void function(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)
	vkCmdSetRasterizerDiscardEnableEXT;

void function(VkCommandBuffer commandBuffer, uint32_t pipelineStackSize)
	vkCmdSetRayTracingPipelineStackSizeKHR;

void function(VkCommandBuffer commandBuffer, VkRenderingAttachmentLocationInfo* pLocationInfo)
	vkCmdSetRenderingAttachmentLocations;

void function(VkCommandBuffer commandBuffer, VkRenderingAttachmentLocationInfo* pLocationInfo)
	vkCmdSetRenderingAttachmentLocationsKHR;

void function(VkCommandBuffer commandBuffer, VkRenderingInputAttachmentIndexInfo* pInputAttachmentIndexInfo)
	vkCmdSetRenderingInputAttachmentIndices;

void function(VkCommandBuffer commandBuffer, VkRenderingInputAttachmentIndexInfo* pInputAttachmentIndexInfo)
	vkCmdSetRenderingInputAttachmentIndicesKHR;

void function(VkCommandBuffer commandBuffer, VkBool32 representativeFragmentTestEnable)
	vkCmdSetRepresentativeFragmentTestEnableNV;

void function(VkCommandBuffer commandBuffer, VkSampleLocationsInfoEXT* pSampleLocationsInfo)
	vkCmdSetSampleLocationsEXT;

void function(VkCommandBuffer commandBuffer, VkBool32 sampleLocationsEnable)
	vkCmdSetSampleLocationsEnableEXT;

void function(VkCommandBuffer commandBuffer, VkSampleCountFlagBits samples, VkSampleMask* pSampleMask)
	vkCmdSetSampleMaskEXT;

void function(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, VkRect2D* pScissors)
	vkCmdSetScissor;

void function(VkCommandBuffer commandBuffer, uint32_t scissorCount, VkRect2D* pScissors)
	vkCmdSetScissorWithCount;

void function(VkCommandBuffer commandBuffer, uint32_t scissorCount, VkRect2D* pScissors)
	vkCmdSetScissorWithCountEXT;

void function(VkCommandBuffer commandBuffer, VkBool32 shadingRateImageEnable)
	vkCmdSetShadingRateImageEnableNV;

void function(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask)
	vkCmdSetStencilCompareMask;

void function(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)
	vkCmdSetStencilOp;

void function(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)
	vkCmdSetStencilOpEXT;

void function(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference)
	vkCmdSetStencilReference;

void function(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)
	vkCmdSetStencilTestEnable;

void function(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)
	vkCmdSetStencilTestEnableEXT;

void function(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask)
	vkCmdSetStencilWriteMask;

void function(VkCommandBuffer commandBuffer, VkTessellationDomainOrigin domainOrigin)
	vkCmdSetTessellationDomainOriginEXT;

void function(VkCommandBuffer commandBuffer, uint32_t vertexBindingDescriptionCount, VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions, uint32_t vertexAttributeDescriptionCount, VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions)
	vkCmdSetVertexInputEXT;

void function(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, VkViewport* pViewports)
	vkCmdSetViewport;

void function(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, VkShadingRatePaletteNV* pShadingRatePalettes)
	vkCmdSetViewportShadingRatePaletteNV;

void function(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, VkViewportSwizzleNV* pViewportSwizzles)
	vkCmdSetViewportSwizzleNV;

void function(VkCommandBuffer commandBuffer, VkBool32 viewportWScalingEnable)
	vkCmdSetViewportWScalingEnableNV;

void function(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, VkViewportWScalingNV* pViewportWScalings)
	vkCmdSetViewportWScalingNV;

void function(VkCommandBuffer commandBuffer, uint32_t viewportCount, VkViewport* pViewports)
	vkCmdSetViewportWithCount;

void function(VkCommandBuffer commandBuffer, uint32_t viewportCount, VkViewport* pViewports)
	vkCmdSetViewportWithCountEXT;

void function(VkCommandBuffer commandBuffer)
	vkCmdSubpassShadingHUAWEI;

void function(VkCommandBuffer commandBuffer, VkDeviceAddress indirectDeviceAddress)
	vkCmdTraceRaysIndirect2KHR;

void function(VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, VkDeviceAddress indirectDeviceAddress)
	vkCmdTraceRaysIndirectKHR;

void function(VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, uint32_t width, uint32_t height, uint32_t depth)
	vkCmdTraceRaysKHR;

void function(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32_t width, uint32_t height, uint32_t depth)
	vkCmdTraceRaysNV;

void function(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, void* pData)
	vkCmdUpdateBuffer;

void function(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)
	vkCmdUpdatePipelineIndirectBufferNV;

void function(VkCommandBuffer commandBuffer, uint32_t eventCount, VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
	vkCmdWaitEvents;

void function(VkCommandBuffer commandBuffer, uint32_t eventCount, VkEvent* pEvents, VkDependencyInfo* pDependencyInfos)
	vkCmdWaitEvents2;

void function(VkCommandBuffer commandBuffer, uint32_t eventCount, VkEvent* pEvents, VkDependencyInfo* pDependencyInfos)
	vkCmdWaitEvents2KHR;

void function(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery)
	vkCmdWriteAccelerationStructuresPropertiesKHR;

void function(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, VkAccelerationStructureNV* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery)
	vkCmdWriteAccelerationStructuresPropertiesNV;

void function(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)
	vkCmdWriteBufferMarker2AMD;

void function(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)
	vkCmdWriteBufferMarkerAMD;

void function(VkCommandBuffer commandBuffer, uint32_t micromapCount, VkMicromapEXT* pMicromaps, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery)
	vkCmdWriteMicromapsPropertiesEXT;

void function(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query)
	vkCmdWriteTimestamp;

void function(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query)
	vkCmdWriteTimestamp2;

void function(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query)
	vkCmdWriteTimestamp2KHR;

VkResult function(VkDevice device, VkPipeline pipeline, uint32_t shader)
	vkCompileDeferredNV;

VkResult function(VkDevice device, VkConvertCooperativeVectorMatrixInfoNV* pInfo)
	vkConvertCooperativeVectorMatrixNV;

VkResult function(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyAccelerationStructureInfoKHR* pInfo)
	vkCopyAccelerationStructureKHR;

VkResult function(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyAccelerationStructureToMemoryInfoKHR* pInfo)
	vkCopyAccelerationStructureToMemoryKHR;

VkResult function(VkDevice device, VkCopyImageToImageInfo* pCopyImageToImageInfo)
	vkCopyImageToImage;

VkResult function(VkDevice device, VkCopyImageToImageInfo* pCopyImageToImageInfo)
	vkCopyImageToImageEXT;

VkResult function(VkDevice device, VkCopyImageToMemoryInfo* pCopyImageToMemoryInfo)
	vkCopyImageToMemory;

VkResult function(VkDevice device, VkCopyImageToMemoryInfo* pCopyImageToMemoryInfo)
	vkCopyImageToMemoryEXT;

VkResult function(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyMemoryToAccelerationStructureInfoKHR* pInfo)
	vkCopyMemoryToAccelerationStructureKHR;

VkResult function(VkDevice device, VkCopyMemoryToImageInfo* pCopyMemoryToImageInfo)
	vkCopyMemoryToImage;

VkResult function(VkDevice device, VkCopyMemoryToImageInfo* pCopyMemoryToImageInfo)
	vkCopyMemoryToImageEXT;

VkResult function(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyMemoryToMicromapInfoEXT* pInfo)
	vkCopyMemoryToMicromapEXT;

VkResult function(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyMicromapInfoEXT* pInfo)
	vkCopyMicromapEXT;

VkResult function(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyMicromapToMemoryInfoEXT* pInfo)
	vkCopyMicromapToMemoryEXT;

VkResult function(VkDevice device, VkAccelerationStructureCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkAccelerationStructureKHR* pAccelerationStructure)
	vkCreateAccelerationStructureKHR;

VkResult function(VkDevice device, VkAccelerationStructureCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, VkAccelerationStructureNV* pAccelerationStructure)
	vkCreateAccelerationStructureNV;

VkResult function(VkDevice device, VkBufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer)
	vkCreateBuffer;

VkResult function(VkDevice device, VkBufferViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkBufferView* pView)
	vkCreateBufferView;

VkResult function(VkDevice device, VkCommandPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool)
	vkCreateCommandPool;

VkResult function(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, VkComputePipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)
	vkCreateComputePipelines;

VkResult function(VkDevice device, VkCuFunctionCreateInfoNVX* pCreateInfo, VkAllocationCallbacks* pAllocator, VkCuFunctionNVX* pFunction)
	vkCreateCuFunctionNVX;

VkResult function(VkDevice device, VkCuModuleCreateInfoNVX* pCreateInfo, VkAllocationCallbacks* pAllocator, VkCuModuleNVX* pModule)
	vkCreateCuModuleNVX;

VkResult function(VkDevice device, VkCudaFunctionCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, VkCudaFunctionNV* pFunction)
	vkCreateCudaFunctionNV;

VkResult function(VkDevice device, VkCudaModuleCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, VkCudaModuleNV* pModule)
	vkCreateCudaModuleNV;

VkResult function(VkInstance instance, VkDebugReportCallbackCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDebugReportCallbackEXT* pCallback)
	vkCreateDebugReportCallbackEXT;

VkResult function(VkInstance instance, VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDebugUtilsMessengerEXT* pMessenger)
	vkCreateDebugUtilsMessengerEXT;

VkResult function(VkDevice device, VkAllocationCallbacks* pAllocator, VkDeferredOperationKHR* pDeferredOperation)
	vkCreateDeferredOperationKHR;

VkResult function(VkDevice device, VkDescriptorPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool)
	vkCreateDescriptorPool;

VkResult function(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout)
	vkCreateDescriptorSetLayout;

VkResult function(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)
	vkCreateDescriptorUpdateTemplate;

VkResult function(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)
	vkCreateDescriptorUpdateTemplateKHR;

VkResult function(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDevice* pDevice)
	vkCreateDevice;

VkResult function(VkPhysicalDevice physicalDevice, VkDisplayKHR display, VkDisplayModeCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDisplayModeKHR* pMode)
	vkCreateDisplayModeKHR;

VkResult function(VkInstance instance, VkDisplaySurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface)
	vkCreateDisplayPlaneSurfaceKHR;

VkResult function(VkDevice device, VkEventCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkEvent* pEvent)
	vkCreateEvent;

VkResult function(VkDevice device, VkFenceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkFence* pFence)
	vkCreateFence;

VkResult function(VkDevice device, VkFramebufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer)
	vkCreateFramebuffer;

VkResult function(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, VkGraphicsPipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)
	vkCreateGraphicsPipelines;

VkResult function(VkInstance instance, VkHeadlessSurfaceCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface)
	vkCreateHeadlessSurfaceEXT;

VkResult function(VkDevice device, VkImageCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkImage* pImage)
	vkCreateImage;

VkResult function(VkDevice device, VkImageViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkImageView* pView)
	vkCreateImageView;

VkResult function(VkDevice device, VkIndirectCommandsLayoutCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkIndirectCommandsLayoutEXT* pIndirectCommandsLayout)
	vkCreateIndirectCommandsLayoutEXT;

VkResult function(VkDevice device, VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, VkIndirectCommandsLayoutNV* pIndirectCommandsLayout)
	vkCreateIndirectCommandsLayoutNV;

VkResult function(VkDevice device, VkIndirectExecutionSetCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkIndirectExecutionSetEXT* pIndirectExecutionSet)
	vkCreateIndirectExecutionSetEXT;

VkResult function(VkInstanceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkInstance* pInstance)
	vkCreateInstance;

VkResult function(VkDevice device, VkMicromapCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkMicromapEXT* pMicromap)
	vkCreateMicromapEXT;

VkResult function(VkDevice device, VkOpticalFlowSessionCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, VkOpticalFlowSessionNV* pSession)
	vkCreateOpticalFlowSessionNV;

VkResult function(VkDevice device, VkPipelineBinaryCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineBinaryHandlesInfoKHR* pBinaries)
	vkCreatePipelineBinariesKHR;

VkResult function(VkDevice device, VkPipelineCacheCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache)
	vkCreatePipelineCache;

VkResult function(VkDevice device, VkPipelineLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout)
	vkCreatePipelineLayout;

VkResult function(VkDevice device, VkPrivateDataSlotCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPrivateDataSlot* pPrivateDataSlot)
	vkCreatePrivateDataSlot;

VkResult function(VkDevice device, VkPrivateDataSlotCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPrivateDataSlot* pPrivateDataSlot)
	vkCreatePrivateDataSlotEXT;

VkResult function(VkDevice device, VkQueryPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool)
	vkCreateQueryPool;

VkResult function(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint32_t createInfoCount, VkRayTracingPipelineCreateInfoKHR* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)
	vkCreateRayTracingPipelinesKHR;

VkResult function(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, VkRayTracingPipelineCreateInfoNV* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)
	vkCreateRayTracingPipelinesNV;

VkResult function(VkDevice device, VkRenderPassCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass)
	vkCreateRenderPass;

VkResult function(VkDevice device, VkRenderPassCreateInfo2* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass)
	vkCreateRenderPass2;

VkResult function(VkDevice device, VkRenderPassCreateInfo2* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass)
	vkCreateRenderPass2KHR;

VkResult function(VkDevice device, VkSamplerCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSampler* pSampler)
	vkCreateSampler;

VkResult function(VkDevice device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion)
	vkCreateSamplerYcbcrConversion;

VkResult function(VkDevice device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion)
	vkCreateSamplerYcbcrConversionKHR;

VkResult function(VkDevice device, VkSemaphoreCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore)
	vkCreateSemaphore;

VkResult function(VkDevice device, VkShaderModuleCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule)
	vkCreateShaderModule;

VkResult function(VkDevice device, uint32_t createInfoCount, VkShaderCreateInfoEXT* pCreateInfos, VkAllocationCallbacks* pAllocator, VkShaderEXT* pShaders)
	vkCreateShadersEXT;

VkResult function(VkDevice device, uint32_t swapchainCount, VkSwapchainCreateInfoKHR* pCreateInfos, VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchains)
	vkCreateSharedSwapchainsKHR;

VkResult function(VkDevice device, VkSwapchainCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchain)
	vkCreateSwapchainKHR;

VkResult function(VkDevice device, VkValidationCacheCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkValidationCacheEXT* pValidationCache)
	vkCreateValidationCacheEXT;

VkResult function(VkDevice device, VkVideoSessionCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkVideoSessionKHR* pVideoSession)
	vkCreateVideoSessionKHR;

VkResult function(VkDevice device, VkVideoSessionParametersCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkVideoSessionParametersKHR* pVideoSessionParameters)
	vkCreateVideoSessionParametersKHR;

VkResult function(VkInstance instance, VkWin32SurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface)
	vkCreateWin32SurfaceKHR;

VkResult function(VkDevice device, VkDebugMarkerObjectNameInfoEXT* pNameInfo)
	vkDebugMarkerSetObjectNameEXT;

VkResult function(VkDevice device, VkDebugMarkerObjectTagInfoEXT* pTagInfo)
	vkDebugMarkerSetObjectTagEXT;

void function(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, immutable(char)* pLayerPrefix, immutable(char)* pMessage)
	vkDebugReportMessageEXT;

VkResult function(VkDevice device, VkDeferredOperationKHR operation)
	vkDeferredOperationJoinKHR;

void function(VkDevice device, VkAccelerationStructureKHR accelerationStructure, VkAllocationCallbacks* pAllocator)
	vkDestroyAccelerationStructureKHR;

void function(VkDevice device, VkAccelerationStructureNV accelerationStructure, VkAllocationCallbacks* pAllocator)
	vkDestroyAccelerationStructureNV;

void function(VkDevice device, VkBuffer buffer, VkAllocationCallbacks* pAllocator)
	vkDestroyBuffer;

void function(VkDevice device, VkBufferView bufferView, VkAllocationCallbacks* pAllocator)
	vkDestroyBufferView;

void function(VkDevice device, VkCommandPool commandPool, VkAllocationCallbacks* pAllocator)
	vkDestroyCommandPool;

void function(VkDevice device, VkCuFunctionNVX function_, VkAllocationCallbacks* pAllocator)
	vkDestroyCuFunctionNVX;

void function(VkDevice device, VkCuModuleNVX module_, VkAllocationCallbacks* pAllocator)
	vkDestroyCuModuleNVX;

void function(VkDevice device, VkCudaFunctionNV function_, VkAllocationCallbacks* pAllocator)
	vkDestroyCudaFunctionNV;

void function(VkDevice device, VkCudaModuleNV module_, VkAllocationCallbacks* pAllocator)
	vkDestroyCudaModuleNV;

void function(VkInstance instance, VkDebugReportCallbackEXT callback, VkAllocationCallbacks* pAllocator)
	vkDestroyDebugReportCallbackEXT;

void function(VkInstance instance, VkDebugUtilsMessengerEXT messenger, VkAllocationCallbacks* pAllocator)
	vkDestroyDebugUtilsMessengerEXT;

void function(VkDevice device, VkDeferredOperationKHR operation, VkAllocationCallbacks* pAllocator)
	vkDestroyDeferredOperationKHR;

void function(VkDevice device, VkDescriptorPool descriptorPool, VkAllocationCallbacks* pAllocator)
	vkDestroyDescriptorPool;

void function(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, VkAllocationCallbacks* pAllocator)
	vkDestroyDescriptorSetLayout;

void function(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks* pAllocator)
	vkDestroyDescriptorUpdateTemplate;

void function(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks* pAllocator)
	vkDestroyDescriptorUpdateTemplateKHR;

void function(VkDevice device, VkAllocationCallbacks* pAllocator)
	vkDestroyDevice;

void function(VkDevice device, VkEvent event, VkAllocationCallbacks* pAllocator)
	vkDestroyEvent;

void function(VkDevice device, VkFence fence, VkAllocationCallbacks* pAllocator)
	vkDestroyFence;

void function(VkDevice device, VkFramebuffer framebuffer, VkAllocationCallbacks* pAllocator)
	vkDestroyFramebuffer;

void function(VkDevice device, VkImage image, VkAllocationCallbacks* pAllocator)
	vkDestroyImage;

void function(VkDevice device, VkImageView imageView, VkAllocationCallbacks* pAllocator)
	vkDestroyImageView;

void function(VkDevice device, VkIndirectCommandsLayoutEXT indirectCommandsLayout, VkAllocationCallbacks* pAllocator)
	vkDestroyIndirectCommandsLayoutEXT;

void function(VkDevice device, VkIndirectCommandsLayoutNV indirectCommandsLayout, VkAllocationCallbacks* pAllocator)
	vkDestroyIndirectCommandsLayoutNV;

void function(VkDevice device, VkIndirectExecutionSetEXT indirectExecutionSet, VkAllocationCallbacks* pAllocator)
	vkDestroyIndirectExecutionSetEXT;

void function(VkInstance instance, VkAllocationCallbacks* pAllocator)
	vkDestroyInstance;

void function(VkDevice device, VkMicromapEXT micromap, VkAllocationCallbacks* pAllocator)
	vkDestroyMicromapEXT;

void function(VkDevice device, VkOpticalFlowSessionNV session, VkAllocationCallbacks* pAllocator)
	vkDestroyOpticalFlowSessionNV;

void function(VkDevice device, VkPipeline pipeline, VkAllocationCallbacks* pAllocator)
	vkDestroyPipeline;

void function(VkDevice device, VkPipelineBinaryKHR pipelineBinary, VkAllocationCallbacks* pAllocator)
	vkDestroyPipelineBinaryKHR;

void function(VkDevice device, VkPipelineCache pipelineCache, VkAllocationCallbacks* pAllocator)
	vkDestroyPipelineCache;

void function(VkDevice device, VkPipelineLayout pipelineLayout, VkAllocationCallbacks* pAllocator)
	vkDestroyPipelineLayout;

void function(VkDevice device, VkPrivateDataSlot privateDataSlot, VkAllocationCallbacks* pAllocator)
	vkDestroyPrivateDataSlot;

void function(VkDevice device, VkPrivateDataSlot privateDataSlot, VkAllocationCallbacks* pAllocator)
	vkDestroyPrivateDataSlotEXT;

void function(VkDevice device, VkQueryPool queryPool, VkAllocationCallbacks* pAllocator)
	vkDestroyQueryPool;

void function(VkDevice device, VkRenderPass renderPass, VkAllocationCallbacks* pAllocator)
	vkDestroyRenderPass;

void function(VkDevice device, VkSampler sampler, VkAllocationCallbacks* pAllocator)
	vkDestroySampler;

void function(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, VkAllocationCallbacks* pAllocator)
	vkDestroySamplerYcbcrConversion;

void function(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, VkAllocationCallbacks* pAllocator)
	vkDestroySamplerYcbcrConversionKHR;

void function(VkDevice device, VkSemaphore semaphore, VkAllocationCallbacks* pAllocator)
	vkDestroySemaphore;

void function(VkDevice device, VkShaderEXT shader, VkAllocationCallbacks* pAllocator)
	vkDestroyShaderEXT;

void function(VkDevice device, VkShaderModule shaderModule, VkAllocationCallbacks* pAllocator)
	vkDestroyShaderModule;

void function(VkInstance instance, VkSurfaceKHR surface, VkAllocationCallbacks* pAllocator)
	vkDestroySurfaceKHR;

void function(VkDevice device, VkSwapchainKHR swapchain, VkAllocationCallbacks* pAllocator)
	vkDestroySwapchainKHR;

void function(VkDevice device, VkValidationCacheEXT validationCache, VkAllocationCallbacks* pAllocator)
	vkDestroyValidationCacheEXT;

void function(VkDevice device, VkVideoSessionKHR videoSession, VkAllocationCallbacks* pAllocator)
	vkDestroyVideoSessionKHR;

void function(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, VkAllocationCallbacks* pAllocator)
	vkDestroyVideoSessionParametersKHR;

VkResult function(VkDevice device)
	vkDeviceWaitIdle;

VkResult function(VkDevice device, VkDisplayKHR display, VkDisplayPowerInfoEXT* pDisplayPowerInfo)
	vkDisplayPowerControlEXT;

VkResult function(VkCommandBuffer commandBuffer)
	vkEndCommandBuffer;

VkResult function(VkPhysicalDevice physicalDevice, immutable(char)* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties)
	vkEnumerateDeviceExtensionProperties;

VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkLayerProperties* pProperties)
	vkEnumerateDeviceLayerProperties;

VkResult function(immutable(char)* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties)
	vkEnumerateInstanceExtensionProperties;

VkResult function(uint32_t* pPropertyCount, VkLayerProperties* pProperties)
	vkEnumerateInstanceLayerProperties;

VkResult function(uint32_t* pApiVersion)
	vkEnumerateInstanceVersion;

VkResult function(VkInstance instance, uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)
	vkEnumeratePhysicalDeviceGroups;

VkResult function(VkInstance instance, uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)
	vkEnumeratePhysicalDeviceGroupsKHR;

VkResult function(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, uint32_t* pCounterCount, VkPerformanceCounterKHR* pCounters, VkPerformanceCounterDescriptionKHR* pCounterDescriptions)
	vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;

VkResult function(VkInstance instance, uint32_t* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices)
	vkEnumeratePhysicalDevices;

VkResult function(VkDevice device, uint32_t memoryRangeCount, VkMappedMemoryRange* pMemoryRanges)
	vkFlushMappedMemoryRanges;

void function(VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount, VkCommandBuffer* pCommandBuffers)
	vkFreeCommandBuffers;

VkResult function(VkDevice device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, VkDescriptorSet* pDescriptorSets)
	vkFreeDescriptorSets;

void function(VkDevice device, VkDeviceMemory memory, VkAllocationCallbacks* pAllocator)
	vkFreeMemory;

void function(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, VkAccelerationStructureBuildGeometryInfoKHR* pBuildInfo, uint32_t* pMaxPrimitiveCounts, VkAccelerationStructureBuildSizesInfoKHR* pSizeInfo)
	vkGetAccelerationStructureBuildSizesKHR;

VkDeviceAddress function(VkDevice device, VkAccelerationStructureDeviceAddressInfoKHR* pInfo)
	vkGetAccelerationStructureDeviceAddressKHR;

VkResult function(VkDevice device, VkAccelerationStructureNV accelerationStructure, size_t dataSize, void* pData)
	vkGetAccelerationStructureHandleNV;

void function(VkDevice device, VkAccelerationStructureMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements)
	vkGetAccelerationStructureMemoryRequirementsNV;

VkResult function(VkDevice device, VkAccelerationStructureCaptureDescriptorDataInfoEXT* pInfo, void* pData)
	vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT;

VkDeviceAddress function(VkDevice device, VkBufferDeviceAddressInfo* pInfo)
	vkGetBufferDeviceAddress;

VkDeviceAddress function(VkDevice device, VkBufferDeviceAddressInfo* pInfo)
	vkGetBufferDeviceAddressEXT;

VkDeviceAddress function(VkDevice device, VkBufferDeviceAddressInfo* pInfo)
	vkGetBufferDeviceAddressKHR;

void function(VkDevice device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements)
	vkGetBufferMemoryRequirements;

void function(VkDevice device, VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)
	vkGetBufferMemoryRequirements2;

void function(VkDevice device, VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)
	vkGetBufferMemoryRequirements2KHR;

uint64_t function(VkDevice device, VkBufferDeviceAddressInfo* pInfo)
	vkGetBufferOpaqueCaptureAddress;

uint64_t function(VkDevice device, VkBufferDeviceAddressInfo* pInfo)
	vkGetBufferOpaqueCaptureAddressKHR;

VkResult function(VkDevice device, VkBufferCaptureDescriptorDataInfoEXT* pInfo, void* pData)
	vkGetBufferOpaqueCaptureDescriptorDataEXT;

VkResult function(VkDevice device, uint32_t timestampCount, VkCalibratedTimestampInfoKHR* pTimestampInfos, uint64_t* pTimestamps, uint64_t* pMaxDeviation)
	vkGetCalibratedTimestampsEXT;

VkResult function(VkDevice device, uint32_t timestampCount, VkCalibratedTimestampInfoKHR* pTimestampInfos, uint64_t* pTimestamps, uint64_t* pMaxDeviation)
	vkGetCalibratedTimestampsKHR;

void function(VkDevice device, VkClusterAccelerationStructureInputInfoNV* pInfo, VkAccelerationStructureBuildSizesInfoKHR* pSizeInfo)
	vkGetClusterAccelerationStructureBuildSizesNV;

VkResult function(VkDevice device, VkCudaModuleNV module_, size_t* pCacheSize, void* pCacheData)
	vkGetCudaModuleCacheNV;

uint32_t function(VkDevice device, VkDeferredOperationKHR operation)
	vkGetDeferredOperationMaxConcurrencyKHR;

VkResult function(VkDevice device, VkDeferredOperationKHR operation)
	vkGetDeferredOperationResultKHR;

void function(VkDevice device, VkDescriptorGetInfoEXT* pDescriptorInfo, size_t dataSize, void* pDescriptor)
	vkGetDescriptorEXT;

void function(VkDevice device, VkDescriptorSet descriptorSet, void** ppData)
	vkGetDescriptorSetHostMappingVALVE;

void function(VkDevice device, VkDescriptorSetLayout layout, uint32_t binding, VkDeviceSize* pOffset)
	vkGetDescriptorSetLayoutBindingOffsetEXT;

void function(VkDevice device, VkDescriptorSetBindingReferenceVALVE* pBindingReference, VkDescriptorSetLayoutHostMappingInfoVALVE* pHostMapping)
	vkGetDescriptorSetLayoutHostMappingInfoVALVE;

void function(VkDevice device, VkDescriptorSetLayout layout, VkDeviceSize* pLayoutSizeInBytes)
	vkGetDescriptorSetLayoutSizeEXT;

void function(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport)
	vkGetDescriptorSetLayoutSupport;

void function(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport)
	vkGetDescriptorSetLayoutSupportKHR;

void function(VkDevice device, VkAccelerationStructureVersionInfoKHR* pVersionInfo, VkAccelerationStructureCompatibilityKHR* pCompatibility)
	vkGetDeviceAccelerationStructureCompatibilityKHR;

void function(VkDevice device, VkDeviceBufferMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements)
	vkGetDeviceBufferMemoryRequirements;

void function(VkDevice device, VkDeviceBufferMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements)
	vkGetDeviceBufferMemoryRequirementsKHR;

VkResult function(VkDevice device, VkDeviceFaultCountsEXT* pFaultCounts, VkDeviceFaultInfoEXT* pFaultInfo)
	vkGetDeviceFaultInfoEXT;

void function(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)
	vkGetDeviceGroupPeerMemoryFeatures;

void function(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)
	vkGetDeviceGroupPeerMemoryFeaturesKHR;

VkResult function(VkDevice device, VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities)
	vkGetDeviceGroupPresentCapabilitiesKHR;

VkResult function(VkDevice device, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkDeviceGroupPresentModeFlagsKHR* pModes)
	vkGetDeviceGroupSurfacePresentModes2EXT;

VkResult function(VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR* pModes)
	vkGetDeviceGroupSurfacePresentModesKHR;

void function(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements)
	vkGetDeviceImageMemoryRequirements;

void function(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements)
	vkGetDeviceImageMemoryRequirementsKHR;

void function(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
	vkGetDeviceImageSparseMemoryRequirements;

void function(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
	vkGetDeviceImageSparseMemoryRequirementsKHR;

void function(VkDevice device, VkDeviceImageSubresourceInfo* pInfo, VkSubresourceLayout2* pLayout)
	vkGetDeviceImageSubresourceLayout;

void function(VkDevice device, VkDeviceImageSubresourceInfo* pInfo, VkSubresourceLayout2* pLayout)
	vkGetDeviceImageSubresourceLayoutKHR;

void function(VkDevice device, VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes)
	vkGetDeviceMemoryCommitment;

uint64_t function(VkDevice device, VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo)
	vkGetDeviceMemoryOpaqueCaptureAddress;

uint64_t function(VkDevice device, VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo)
	vkGetDeviceMemoryOpaqueCaptureAddressKHR;

void function(VkDevice device, VkMicromapVersionInfoEXT* pVersionInfo, VkAccelerationStructureCompatibilityKHR* pCompatibility)
	vkGetDeviceMicromapCompatibilityEXT;

PFN_vkVoidFunction function(VkDevice device, immutable(char)* pName)
	vkGetDeviceProcAddr;

void function(VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue* pQueue)
	vkGetDeviceQueue;

void function(VkDevice device, VkDeviceQueueInfo2* pQueueInfo, VkQueue* pQueue)
	vkGetDeviceQueue2;

VkResult function(VkDevice device, VkRenderPass renderpass, VkExtent2D* pMaxWorkgroupSize)
	vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI;

VkResult function(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModeProperties2KHR* pProperties)
	vkGetDisplayModeProperties2KHR;

VkResult function(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModePropertiesKHR* pProperties)
	vkGetDisplayModePropertiesKHR;

VkResult function(VkPhysicalDevice physicalDevice, VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR* pCapabilities)
	vkGetDisplayPlaneCapabilities2KHR;

VkResult function(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32_t planeIndex, VkDisplayPlaneCapabilitiesKHR* pCapabilities)
	vkGetDisplayPlaneCapabilitiesKHR;

VkResult function(VkPhysicalDevice physicalDevice, uint32_t planeIndex, uint32_t* pDisplayCount, VkDisplayKHR* pDisplays)
	vkGetDisplayPlaneSupportedDisplaysKHR;

VkResult function(VkPhysicalDevice physicalDevice, int32_t drmFd, uint32_t connectorId, VkDisplayKHR* display)
	vkGetDrmDisplayEXT;

VkResult function(VkDevice device, VkRenderingInfo* pRenderingInfo, VkTilePropertiesQCOM* pProperties)
	vkGetDynamicRenderingTilePropertiesQCOM;

VkResult function(VkDevice device, VkVideoEncodeSessionParametersGetInfoKHR* pVideoSessionParametersInfo, VkVideoEncodeSessionParametersFeedbackInfoKHR* pFeedbackInfo, size_t* pDataSize, void* pData)
	vkGetEncodedVideoSessionParametersKHR;

VkResult function(VkDevice device, VkEvent event)
	vkGetEventStatus;

VkResult function(VkDevice device, VkFenceGetFdInfoKHR* pGetFdInfo, int* pFd)
	vkGetFenceFdKHR;

VkResult function(VkDevice device, VkFence fence)
	vkGetFenceStatus;

VkResult function(VkDevice device, VkFenceGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle)
	vkGetFenceWin32HandleKHR;

VkResult function(VkDevice device, VkFramebuffer framebuffer, uint32_t* pPropertiesCount, VkTilePropertiesQCOM* pProperties)
	vkGetFramebufferTilePropertiesQCOM;

void function(VkDevice device, VkGeneratedCommandsMemoryRequirementsInfoEXT* pInfo, VkMemoryRequirements2* pMemoryRequirements)
	vkGetGeneratedCommandsMemoryRequirementsEXT;

void function(VkDevice device, VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2* pMemoryRequirements)
	vkGetGeneratedCommandsMemoryRequirementsNV;

VkResult function(VkDevice device, VkImage image, VkImageDrmFormatModifierPropertiesEXT* pProperties)
	vkGetImageDrmFormatModifierPropertiesEXT;

void function(VkDevice device, VkImage image, VkMemoryRequirements* pMemoryRequirements)
	vkGetImageMemoryRequirements;

void function(VkDevice device, VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)
	vkGetImageMemoryRequirements2;

void function(VkDevice device, VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)
	vkGetImageMemoryRequirements2KHR;

VkResult function(VkDevice device, VkImageCaptureDescriptorDataInfoEXT* pInfo, void* pData)
	vkGetImageOpaqueCaptureDescriptorDataEXT;

void function(VkDevice device, VkImage image, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements)
	vkGetImageSparseMemoryRequirements;

void function(VkDevice device, VkImageSparseMemoryRequirementsInfo2* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
	vkGetImageSparseMemoryRequirements2;

void function(VkDevice device, VkImageSparseMemoryRequirementsInfo2* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
	vkGetImageSparseMemoryRequirements2KHR;

void function(VkDevice device, VkImage image, VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout)
	vkGetImageSubresourceLayout;

void function(VkDevice device, VkImage image, VkImageSubresource2* pSubresource, VkSubresourceLayout2* pLayout)
	vkGetImageSubresourceLayout2;

void function(VkDevice device, VkImage image, VkImageSubresource2* pSubresource, VkSubresourceLayout2* pLayout)
	vkGetImageSubresourceLayout2EXT;

void function(VkDevice device, VkImage image, VkImageSubresource2* pSubresource, VkSubresourceLayout2* pLayout)
	vkGetImageSubresourceLayout2KHR;

VkResult function(VkDevice device, VkImageView imageView, VkImageViewAddressPropertiesNVX* pProperties)
	vkGetImageViewAddressNVX;

uint64_t function(VkDevice device, VkImageViewHandleInfoNVX* pInfo)
	vkGetImageViewHandle64NVX;

uint32_t function(VkDevice device, VkImageViewHandleInfoNVX* pInfo)
	vkGetImageViewHandleNVX;

VkResult function(VkDevice device, VkImageViewCaptureDescriptorDataInfoEXT* pInfo, void* pData)
	vkGetImageViewOpaqueCaptureDescriptorDataEXT;

PFN_vkVoidFunction function(VkInstance instance, immutable(char)* pName)
	vkGetInstanceProcAddr;

void function(VkDevice device, VkSwapchainKHR swapchain, VkGetLatencyMarkerInfoNV* pLatencyMarkerInfo)
	vkGetLatencyTimingsNV;

VkResult function(VkDevice device, VkMemoryGetFdInfoKHR* pGetFdInfo, int* pFd)
	vkGetMemoryFdKHR;

VkResult function(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, int fd, VkMemoryFdPropertiesKHR* pMemoryFdProperties)
	vkGetMemoryFdPropertiesKHR;

VkResult function(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, void* pHostPointer, VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties)
	vkGetMemoryHostPointerPropertiesEXT;

VkResult function(VkDevice device, VkMemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo, VkRemoteAddressNV* pAddress)
	vkGetMemoryRemoteAddressNV;

VkResult function(VkDevice device, VkMemoryGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle)
	vkGetMemoryWin32HandleKHR;

VkResult function(VkDevice device, VkDeviceMemory memory, VkExternalMemoryHandleTypeFlagsNV handleType, HANDLE* pHandle)
	vkGetMemoryWin32HandleNV;

VkResult function(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, HANDLE handle, VkMemoryWin32HandlePropertiesKHR* pMemoryWin32HandleProperties)
	vkGetMemoryWin32HandlePropertiesKHR;

void function(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, VkMicromapBuildInfoEXT* pBuildInfo, VkMicromapBuildSizesInfoEXT* pSizeInfo)
	vkGetMicromapBuildSizesEXT;

void function(VkDevice device, VkPartitionedAccelerationStructureInstancesInputNV* pInfo, VkAccelerationStructureBuildSizesInfoKHR* pSizeInfo)
	vkGetPartitionedAccelerationStructuresBuildSizesNV;

VkResult function(VkDevice device, VkSwapchainKHR swapchain, uint32_t* pPresentationTimingCount, VkPastPresentationTimingGOOGLE* pPresentationTimings)
	vkGetPastPresentationTimingGOOGLE;

VkResult function(VkDevice device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL* pValue)
	vkGetPerformanceParameterINTEL;

VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pTimeDomainCount, VkTimeDomainKHR* pTimeDomains)
	vkGetPhysicalDeviceCalibrateableTimeDomainsEXT;

VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pTimeDomainCount, VkTimeDomainKHR* pTimeDomains)
	vkGetPhysicalDeviceCalibrateableTimeDomainsKHR;

VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkCooperativeMatrixFlexibleDimensionsPropertiesNV* pProperties)
	vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV;

VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkCooperativeMatrixPropertiesKHR* pProperties)
	vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR;

VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkCooperativeMatrixPropertiesNV* pProperties)
	vkGetPhysicalDeviceCooperativeMatrixPropertiesNV;

VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkCooperativeVectorPropertiesNV* pProperties)
	vkGetPhysicalDeviceCooperativeVectorPropertiesNV;

VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlaneProperties2KHR* pProperties)
	vkGetPhysicalDeviceDisplayPlaneProperties2KHR;

VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties)
	vkGetPhysicalDeviceDisplayPlanePropertiesKHR;

VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayProperties2KHR* pProperties)
	vkGetPhysicalDeviceDisplayProperties2KHR;

VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPropertiesKHR* pProperties)
	vkGetPhysicalDeviceDisplayPropertiesKHR;

void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties)
	vkGetPhysicalDeviceExternalBufferProperties;

void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties)
	vkGetPhysicalDeviceExternalBufferPropertiesKHR;

void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties)
	vkGetPhysicalDeviceExternalFenceProperties;

void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties)
	vkGetPhysicalDeviceExternalFencePropertiesKHR;

VkResult function(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties)
	vkGetPhysicalDeviceExternalImageFormatPropertiesNV;

void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties)
	vkGetPhysicalDeviceExternalSemaphoreProperties;

void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties)
	vkGetPhysicalDeviceExternalSemaphorePropertiesKHR;

void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* pFeatures)
	vkGetPhysicalDeviceFeatures;

void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures)
	vkGetPhysicalDeviceFeatures2;

void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures)
	vkGetPhysicalDeviceFeatures2KHR;

void function(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties)
	vkGetPhysicalDeviceFormatProperties;

void function(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties)
	vkGetPhysicalDeviceFormatProperties2;

void function(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties)
	vkGetPhysicalDeviceFormatProperties2KHR;

VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates)
	vkGetPhysicalDeviceFragmentShadingRatesKHR;

VkResult function(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties)
	vkGetPhysicalDeviceImageFormatProperties;

VkResult function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties)
	vkGetPhysicalDeviceImageFormatProperties2;

VkResult function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties)
	vkGetPhysicalDeviceImageFormatProperties2KHR;

void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties)
	vkGetPhysicalDeviceMemoryProperties;

void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties)
	vkGetPhysicalDeviceMemoryProperties2;

void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties)
	vkGetPhysicalDeviceMemoryProperties2KHR;

void function(VkPhysicalDevice physicalDevice, VkSampleCountFlagBits samples, VkMultisamplePropertiesEXT* pMultisampleProperties)
	vkGetPhysicalDeviceMultisamplePropertiesEXT;

VkResult function(VkPhysicalDevice physicalDevice, VkOpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo, uint32_t* pFormatCount, VkOpticalFlowImageFormatPropertiesNV* pImageFormatProperties)
	vkGetPhysicalDeviceOpticalFlowImageFormatsNV;

VkResult function(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pRectCount, VkRect2D* pRects)
	vkGetPhysicalDevicePresentRectanglesKHR;

void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* pProperties)
	vkGetPhysicalDeviceProperties;

void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties)
	vkGetPhysicalDeviceProperties2;

void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties)
	vkGetPhysicalDeviceProperties2KHR;

void function(VkPhysicalDevice physicalDevice, VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo, uint32_t* pNumPasses)
	vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;

void function(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties)
	vkGetPhysicalDeviceQueueFamilyProperties;

void function(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties)
	vkGetPhysicalDeviceQueueFamilyProperties2;

void function(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties)
	vkGetPhysicalDeviceQueueFamilyProperties2KHR;

void function(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t* pPropertyCount, VkSparseImageFormatProperties* pProperties)
	vkGetPhysicalDeviceSparseImageFormatProperties;

void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2* pProperties)
	vkGetPhysicalDeviceSparseImageFormatProperties2;

void function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2* pProperties)
	vkGetPhysicalDeviceSparseImageFormatProperties2KHR;

VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pCombinationCount, VkFramebufferMixedSamplesCombinationNV* pCombinations)
	vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV;

VkResult function(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT* pSurfaceCapabilities)
	vkGetPhysicalDeviceSurfaceCapabilities2EXT;

VkResult function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkSurfaceCapabilities2KHR* pSurfaceCapabilities)
	vkGetPhysicalDeviceSurfaceCapabilities2KHR;

VkResult function(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities)
	vkGetPhysicalDeviceSurfaceCapabilitiesKHR;

VkResult function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint32_t* pSurfaceFormatCount, VkSurfaceFormat2KHR* pSurfaceFormats)
	vkGetPhysicalDeviceSurfaceFormats2KHR;

VkResult function(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats)
	vkGetPhysicalDeviceSurfaceFormatsKHR;

VkResult function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint32_t* pPresentModeCount, VkPresentModeKHR* pPresentModes)
	vkGetPhysicalDeviceSurfacePresentModes2EXT;

VkResult function(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pPresentModeCount, VkPresentModeKHR* pPresentModes)
	vkGetPhysicalDeviceSurfacePresentModesKHR;

VkResult function(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32* pSupported)
	vkGetPhysicalDeviceSurfaceSupportKHR;

VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pToolCount, VkPhysicalDeviceToolProperties* pToolProperties)
	vkGetPhysicalDeviceToolProperties;

VkResult function(VkPhysicalDevice physicalDevice, uint32_t* pToolCount, VkPhysicalDeviceToolProperties* pToolProperties)
	vkGetPhysicalDeviceToolPropertiesEXT;

VkResult function(VkPhysicalDevice physicalDevice, VkVideoProfileInfoKHR* pVideoProfile, VkVideoCapabilitiesKHR* pCapabilities)
	vkGetPhysicalDeviceVideoCapabilitiesKHR;

VkResult function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR* pQualityLevelInfo, VkVideoEncodeQualityLevelPropertiesKHR* pQualityLevelProperties)
	vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR;

VkResult function(VkPhysicalDevice physicalDevice, VkPhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo, uint32_t* pVideoFormatPropertyCount, VkVideoFormatPropertiesKHR* pVideoFormatProperties)
	vkGetPhysicalDeviceVideoFormatPropertiesKHR;

VkBool32 function(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex)
	vkGetPhysicalDeviceWin32PresentationSupportKHR;

VkResult function(VkDevice device, VkPipelineBinaryDataInfoKHR* pInfo, VkPipelineBinaryKeyKHR* pPipelineBinaryKey, size_t* pPipelineBinaryDataSize, void* pPipelineBinaryData)
	vkGetPipelineBinaryDataKHR;

VkResult function(VkDevice device, VkPipelineCache pipelineCache, size_t* pDataSize, void* pData)
	vkGetPipelineCacheData;

VkResult function(VkDevice device, VkPipelineExecutableInfoKHR* pExecutableInfo, uint32_t* pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations)
	vkGetPipelineExecutableInternalRepresentationsKHR;

VkResult function(VkDevice device, VkPipelineInfoKHR* pPipelineInfo, uint32_t* pExecutableCount, VkPipelineExecutablePropertiesKHR* pProperties)
	vkGetPipelineExecutablePropertiesKHR;

VkResult function(VkDevice device, VkPipelineExecutableInfoKHR* pExecutableInfo, uint32_t* pStatisticCount, VkPipelineExecutableStatisticKHR* pStatistics)
	vkGetPipelineExecutableStatisticsKHR;

VkDeviceAddress function(VkDevice device, VkPipelineIndirectDeviceAddressInfoNV* pInfo)
	vkGetPipelineIndirectDeviceAddressNV;

void function(VkDevice device, VkComputePipelineCreateInfo* pCreateInfo, VkMemoryRequirements2* pMemoryRequirements)
	vkGetPipelineIndirectMemoryRequirementsNV;

VkResult function(VkDevice device, VkPipelineCreateInfoKHR* pPipelineCreateInfo, VkPipelineBinaryKeyKHR* pPipelineKey)
	vkGetPipelineKeyKHR;

VkResult function(VkDevice device, VkPipelineInfoEXT* pPipelineInfo, VkBaseOutStructure* pPipelineProperties)
	vkGetPipelinePropertiesEXT;

void function(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t* pData)
	vkGetPrivateData;

void function(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t* pData)
	vkGetPrivateDataEXT;

VkResult function(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags)
	vkGetQueryPoolResults;

void function(VkQueue queue, uint32_t* pCheckpointDataCount, VkCheckpointData2NV* pCheckpointData)
	vkGetQueueCheckpointData2NV;

void function(VkQueue queue, uint32_t* pCheckpointDataCount, VkCheckpointDataNV* pCheckpointData)
	vkGetQueueCheckpointDataNV;

VkResult function(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData)
	vkGetRayTracingCaptureReplayShaderGroupHandlesKHR;

VkResult function(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData)
	vkGetRayTracingShaderGroupHandlesKHR;

VkResult function(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData)
	vkGetRayTracingShaderGroupHandlesNV;

VkDeviceSize function(VkDevice device, VkPipeline pipeline, uint32_t group, VkShaderGroupShaderKHR groupShader)
	vkGetRayTracingShaderGroupStackSizeKHR;

VkResult function(VkDevice device, VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties)
	vkGetRefreshCycleDurationGOOGLE;

void function(VkDevice device, VkRenderPass renderPass, VkExtent2D* pGranularity)
	vkGetRenderAreaGranularity;

void function(VkDevice device, VkRenderingAreaInfo* pRenderingAreaInfo, VkExtent2D* pGranularity)
	vkGetRenderingAreaGranularity;

void function(VkDevice device, VkRenderingAreaInfo* pRenderingAreaInfo, VkExtent2D* pGranularity)
	vkGetRenderingAreaGranularityKHR;

VkResult function(VkDevice device, VkSamplerCaptureDescriptorDataInfoEXT* pInfo, void* pData)
	vkGetSamplerOpaqueCaptureDescriptorDataEXT;

VkResult function(VkDevice device, VkSemaphore semaphore, uint64_t* pValue)
	vkGetSemaphoreCounterValue;

VkResult function(VkDevice device, VkSemaphore semaphore, uint64_t* pValue)
	vkGetSemaphoreCounterValueKHR;

VkResult function(VkDevice device, VkSemaphoreGetFdInfoKHR* pGetFdInfo, int* pFd)
	vkGetSemaphoreFdKHR;

VkResult function(VkDevice device, VkSemaphoreGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle)
	vkGetSemaphoreWin32HandleKHR;

VkResult function(VkDevice device, VkShaderEXT shader, size_t* pDataSize, void* pData)
	vkGetShaderBinaryDataEXT;

VkResult function(VkDevice device, VkPipeline pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, size_t* pInfoSize, void* pInfo)
	vkGetShaderInfoAMD;

void function(VkDevice device, VkShaderModuleCreateInfo* pCreateInfo, VkShaderModuleIdentifierEXT* pIdentifier)
	vkGetShaderModuleCreateInfoIdentifierEXT;

void function(VkDevice device, VkShaderModule shaderModule, VkShaderModuleIdentifierEXT* pIdentifier)
	vkGetShaderModuleIdentifierEXT;

VkResult function(VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagBitsEXT counter, uint64_t* pCounterValue)
	vkGetSwapchainCounterEXT;

VkResult function(VkDevice device, VkSwapchainKHR swapchain, uint32_t* pSwapchainImageCount, VkImage* pSwapchainImages)
	vkGetSwapchainImagesKHR;

VkResult function(VkDevice device, VkSwapchainKHR swapchain)
	vkGetSwapchainStatusKHR;

VkResult function(VkDevice device, VkValidationCacheEXT validationCache, size_t* pDataSize, void* pData)
	vkGetValidationCacheDataEXT;

VkResult function(VkDevice device, VkVideoSessionKHR videoSession, uint32_t* pMemoryRequirementsCount, VkVideoSessionMemoryRequirementsKHR* pMemoryRequirements)
	vkGetVideoSessionMemoryRequirementsKHR;

VkResult function(VkPhysicalDevice physicalDevice, uint32_t deviceRelativeId, VkDisplayKHR* pDisplay)
	vkGetWinrtDisplayNV;

VkResult function(VkDevice device, VkImportFenceFdInfoKHR* pImportFenceFdInfo)
	vkImportFenceFdKHR;

VkResult function(VkDevice device, VkImportFenceWin32HandleInfoKHR* pImportFenceWin32HandleInfo)
	vkImportFenceWin32HandleKHR;

VkResult function(VkDevice device, VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo)
	vkImportSemaphoreFdKHR;

VkResult function(VkDevice device, VkImportSemaphoreWin32HandleInfoKHR* pImportSemaphoreWin32HandleInfo)
	vkImportSemaphoreWin32HandleKHR;

VkResult function(VkDevice device, VkInitializePerformanceApiInfoINTEL* pInitializeInfo)
	vkInitializePerformanceApiINTEL;

VkResult function(VkDevice device, uint32_t memoryRangeCount, VkMappedMemoryRange* pMemoryRanges)
	vkInvalidateMappedMemoryRanges;

VkResult function(VkDevice device, VkSwapchainKHR swapchain, VkLatencySleepInfoNV* pSleepInfo)
	vkLatencySleepNV;

VkResult function(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData)
	vkMapMemory;

VkResult function(VkDevice device, VkMemoryMapInfo* pMemoryMapInfo, void** ppData)
	vkMapMemory2;

VkResult function(VkDevice device, VkMemoryMapInfo* pMemoryMapInfo, void** ppData)
	vkMapMemory2KHR;

VkResult function(VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount, VkPipelineCache* pSrcCaches)
	vkMergePipelineCaches;

VkResult function(VkDevice device, VkValidationCacheEXT dstCache, uint32_t srcCacheCount, VkValidationCacheEXT* pSrcCaches)
	vkMergeValidationCachesEXT;

void function(VkQueue queue, VkDebugUtilsLabelEXT* pLabelInfo)
	vkQueueBeginDebugUtilsLabelEXT;

VkResult function(VkQueue queue, uint32_t bindInfoCount, VkBindSparseInfo* pBindInfo, VkFence fence)
	vkQueueBindSparse;

void function(VkQueue queue)
	vkQueueEndDebugUtilsLabelEXT;

void function(VkQueue queue, VkDebugUtilsLabelEXT* pLabelInfo)
	vkQueueInsertDebugUtilsLabelEXT;

void function(VkQueue queue, VkOutOfBandQueueTypeInfoNV* pQueueTypeInfo)
	vkQueueNotifyOutOfBandNV;

VkResult function(VkQueue queue, VkPresentInfoKHR* pPresentInfo)
	vkQueuePresentKHR;

VkResult function(VkQueue queue, VkPerformanceConfigurationINTEL configuration)
	vkQueueSetPerformanceConfigurationINTEL;

VkResult function(VkQueue queue, uint32_t submitCount, VkSubmitInfo* pSubmits, VkFence fence)
	vkQueueSubmit;

VkResult function(VkQueue queue, uint32_t submitCount, VkSubmitInfo2* pSubmits, VkFence fence)
	vkQueueSubmit2;

VkResult function(VkQueue queue, uint32_t submitCount, VkSubmitInfo2* pSubmits, VkFence fence)
	vkQueueSubmit2KHR;

VkResult function(VkQueue queue)
	vkQueueWaitIdle;

VkResult function(VkDevice device, VkDeviceEventInfoEXT* pDeviceEventInfo, VkAllocationCallbacks* pAllocator, VkFence* pFence)
	vkRegisterDeviceEventEXT;

VkResult function(VkDevice device, VkDisplayKHR display, VkDisplayEventInfoEXT* pDisplayEventInfo, VkAllocationCallbacks* pAllocator, VkFence* pFence)
	vkRegisterDisplayEventEXT;

VkResult function(VkDevice device, VkReleaseCapturedPipelineDataInfoKHR* pInfo, VkAllocationCallbacks* pAllocator)
	vkReleaseCapturedPipelineDataKHR;

VkResult function(VkPhysicalDevice physicalDevice, VkDisplayKHR display)
	vkReleaseDisplayEXT;

VkResult function(VkDevice device, VkSwapchainKHR swapchain)
	vkReleaseFullScreenExclusiveModeEXT;

VkResult function(VkDevice device, VkPerformanceConfigurationINTEL configuration)
	vkReleasePerformanceConfigurationINTEL;

void function(VkDevice device)
	vkReleaseProfilingLockKHR;

VkResult function(VkDevice device, VkReleaseSwapchainImagesInfoEXT* pReleaseInfo)
	vkReleaseSwapchainImagesEXT;

VkResult function(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags)
	vkResetCommandBuffer;

VkResult function(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags)
	vkResetCommandPool;

VkResult function(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags)
	vkResetDescriptorPool;

VkResult function(VkDevice device, VkEvent event)
	vkResetEvent;

VkResult function(VkDevice device, uint32_t fenceCount, VkFence* pFences)
	vkResetFences;

void function(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)
	vkResetQueryPool;

void function(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)
	vkResetQueryPoolEXT;

VkResult function(VkDevice device, VkDebugUtilsObjectNameInfoEXT* pNameInfo)
	vkSetDebugUtilsObjectNameEXT;

VkResult function(VkDevice device, VkDebugUtilsObjectTagInfoEXT* pTagInfo)
	vkSetDebugUtilsObjectTagEXT;

void function(VkDevice device, VkDeviceMemory memory, float priority)
	vkSetDeviceMemoryPriorityEXT;

VkResult function(VkDevice device, VkEvent event)
	vkSetEvent;

void function(VkDevice device, uint32_t swapchainCount, VkSwapchainKHR* pSwapchains, VkHdrMetadataEXT* pMetadata)
	vkSetHdrMetadataEXT;

void function(VkDevice device, VkSwapchainKHR swapchain, VkSetLatencyMarkerInfoNV* pLatencyMarkerInfo)
	vkSetLatencyMarkerNV;

VkResult function(VkDevice device, VkSwapchainKHR swapchain, VkLatencySleepModeInfoNV* pSleepModeInfo)
	vkSetLatencySleepModeNV;

void function(VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable)
	vkSetLocalDimmingAMD;

VkResult function(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data)
	vkSetPrivateData;

VkResult function(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data)
	vkSetPrivateDataEXT;

VkResult function(VkDevice device, VkSemaphoreSignalInfo* pSignalInfo)
	vkSignalSemaphore;

VkResult function(VkDevice device, VkSemaphoreSignalInfo* pSignalInfo)
	vkSignalSemaphoreKHR;

void function(VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, VkDebugUtilsMessengerCallbackDataEXT* pCallbackData)
	vkSubmitDebugUtilsMessageEXT;

VkResult function(VkDevice device, uint32_t transitionCount, VkHostImageLayoutTransitionInfo* pTransitions)
	vkTransitionImageLayout;

VkResult function(VkDevice device, uint32_t transitionCount, VkHostImageLayoutTransitionInfo* pTransitions)
	vkTransitionImageLayoutEXT;

void function(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags)
	vkTrimCommandPool;

void function(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags)
	vkTrimCommandPoolKHR;

void function(VkDevice device)
	vkUninitializePerformanceApiINTEL;

void function(VkDevice device, VkDeviceMemory memory)
	vkUnmapMemory;

VkResult function(VkDevice device, VkMemoryUnmapInfo* pMemoryUnmapInfo)
	vkUnmapMemory2;

VkResult function(VkDevice device, VkMemoryUnmapInfo* pMemoryUnmapInfo)
	vkUnmapMemory2KHR;

void function(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, void* pData)
	vkUpdateDescriptorSetWithTemplate;

void function(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, void* pData)
	vkUpdateDescriptorSetWithTemplateKHR;

void function(VkDevice device, uint32_t descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites, uint32_t descriptorCopyCount, VkCopyDescriptorSet* pDescriptorCopies)
	vkUpdateDescriptorSets;

void function(VkDevice device, VkIndirectExecutionSetEXT indirectExecutionSet, uint32_t executionSetWriteCount, VkWriteIndirectExecutionSetPipelineEXT* pExecutionSetWrites)
	vkUpdateIndirectExecutionSetPipelineEXT;

void function(VkDevice device, VkIndirectExecutionSetEXT indirectExecutionSet, uint32_t executionSetWriteCount, VkWriteIndirectExecutionSetShaderEXT* pExecutionSetWrites)
	vkUpdateIndirectExecutionSetShaderEXT;

VkResult function(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, VkVideoSessionParametersUpdateInfoKHR* pUpdateInfo)
	vkUpdateVideoSessionParametersKHR;

VkResult function(VkDevice device, uint32_t fenceCount, VkFence* pFences, VkBool32 waitAll, uint64_t timeout)
	vkWaitForFences;

VkResult function(VkDevice device, VkSwapchainKHR swapchain, uint64_t presentId, uint64_t timeout)
	vkWaitForPresentKHR;

VkResult function(VkDevice device, VkSemaphoreWaitInfo* pWaitInfo, uint64_t timeout)
	vkWaitSemaphores;

VkResult function(VkDevice device, VkSemaphoreWaitInfo* pWaitInfo, uint64_t timeout)
	vkWaitSemaphoresKHR;

VkResult function(VkDevice device, uint32_t accelerationStructureCount, VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType queryType, size_t dataSize, void* pData, size_t stride)
	vkWriteAccelerationStructuresPropertiesKHR;

VkResult function(VkDevice device, uint32_t micromapCount, VkMicromapEXT* pMicromaps, VkQueryType queryType, size_t dataSize, void* pData, size_t stride)
	vkWriteMicromapsPropertiesEXT;

}} // extern(Windows), __gshared

extern(C) { nothrow __gshared {

}} // extern(C), __gshared

